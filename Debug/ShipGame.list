
ShipGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a418  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  0800a5a8  0800a5a8  0001a5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af30  0800af30  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800af30  0800af30  0001af30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af38  0800af38  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af38  0800af38  0001af38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af3c  0800af3c  0001af3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800af40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000240  0800b180  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  0800b180  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fca8  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e3  00000000  00000000  0002ff5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  00032240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b02  00000000  00000000  00033090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a18  00000000  00000000  00033b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107f7  00000000  00000000  0005c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd57d  00000000  00000000  0006cda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005110  00000000  00000000  0016a320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0016f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a590 	.word	0x0800a590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800a590 	.word	0x0800a590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000f4c:	e002      	b.n	8000f54 <Delay+0x10>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f9      	bne.n	8000f4e <Delay+0xa>
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <lcd_delay>:
void lcd_delay(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	Delay(200);
 8000f6c:	20c8      	movs	r0, #200	; 0xc8
 8000f6e:	f7ff ffe9 	bl	8000f44 <Delay>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000f82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000f8c:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <lcd_cmd+0x190>)
 8000f8e:	2280      	movs	r2, #128	; 0x80
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000f92:	4b5e      	ldr	r3, [pc, #376]	; (800110c <lcd_cmd+0x194>)
 8000f94:	2220      	movs	r2, #32
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000f98:	4b5c      	ldr	r3, [pc, #368]	; (800110c <lcd_cmd+0x194>)
 8000f9a:	2210      	movs	r2, #16
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000f9e:	4b5b      	ldr	r3, [pc, #364]	; (800110c <lcd_cmd+0x194>)
 8000fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000fa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000fb0:	f7ff ffda 	bl	8000f68 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000fb4:	4b54      	ldr	r3, [pc, #336]	; (8001108 <lcd_cmd+0x190>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	4a53      	ldr	r2, [pc, #332]	; (8001108 <lcd_cmd+0x190>)
 8000fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbe:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <lcd_cmd+0x5a>
 8000fca:	4b50      	ldr	r3, [pc, #320]	; (800110c <lcd_cmd+0x194>)
 8000fcc:	2220      	movs	r2, #32
 8000fce:	619a      	str	r2, [r3, #24]
 8000fd0:	e003      	b.n	8000fda <lcd_cmd+0x62>
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <lcd_cmd+0x194>)
 8000fd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fd8:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 0320 	and.w	r3, r3, #32
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <lcd_cmd+0x74>
 8000fe4:	4b49      	ldr	r3, [pc, #292]	; (800110c <lcd_cmd+0x194>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	619a      	str	r2, [r3, #24]
 8000fea:	e003      	b.n	8000ff4 <lcd_cmd+0x7c>
 8000fec:	4b47      	ldr	r3, [pc, #284]	; (800110c <lcd_cmd+0x194>)
 8000fee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ff2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <lcd_cmd+0x90>
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <lcd_cmd+0x194>)
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	619a      	str	r2, [r3, #24]
 8001006:	e003      	b.n	8001010 <lcd_cmd+0x98>
 8001008:	4b40      	ldr	r3, [pc, #256]	; (800110c <lcd_cmd+0x194>)
 800100a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800100e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	da05      	bge.n	8001024 <lcd_cmd+0xac>
 8001018:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800101c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001020:	619a      	str	r2, [r3, #24]
 8001022:	e004      	b.n	800102e <lcd_cmd+0xb6>
 8001024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800102c:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800102e:	f7ff ff9b 	bl	8000f68 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8001032:	4b35      	ldr	r3, [pc, #212]	; (8001108 <lcd_cmd+0x190>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8001038:	4b34      	ldr	r3, [pc, #208]	; (800110c <lcd_cmd+0x194>)
 800103a:	2220      	movs	r2, #32
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800103e:	4b33      	ldr	r3, [pc, #204]	; (800110c <lcd_cmd+0x194>)
 8001040:	2210      	movs	r2, #16
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <lcd_cmd+0x194>)
 8001046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800104c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8001056:	f7ff ff87 	bl	8000f68 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <lcd_cmd+0x190>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <lcd_cmd+0x190>)
 8001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001064:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <lcd_cmd+0x100>
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <lcd_cmd+0x194>)
 8001072:	2220      	movs	r2, #32
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	e003      	b.n	8001080 <lcd_cmd+0x108>
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <lcd_cmd+0x194>)
 800107a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800107e:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <lcd_cmd+0x11a>
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <lcd_cmd+0x194>)
 800108c:	2210      	movs	r2, #16
 800108e:	619a      	str	r2, [r3, #24]
 8001090:	e003      	b.n	800109a <lcd_cmd+0x122>
 8001092:	4b1e      	ldr	r3, [pc, #120]	; (800110c <lcd_cmd+0x194>)
 8001094:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001098:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <lcd_cmd+0x136>
 80010a4:	4b19      	ldr	r3, [pc, #100]	; (800110c <lcd_cmd+0x194>)
 80010a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010aa:	619a      	str	r2, [r3, #24]
 80010ac:	e003      	b.n	80010b6 <lcd_cmd+0x13e>
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <lcd_cmd+0x194>)
 80010b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010b4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <lcd_cmd+0x154>
 80010c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c8:	619a      	str	r2, [r3, #24]
 80010ca:	e004      	b.n	80010d6 <lcd_cmd+0x15e>
 80010cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010d4:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80010d6:	f7ff ff47 	bl	8000f68 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <lcd_cmd+0x190>)
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <lcd_cmd+0x194>)
 80010e2:	2220      	movs	r2, #32
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <lcd_cmd+0x194>)
 80010e8:	2210      	movs	r2, #16
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <lcd_cmd+0x194>)
 80010ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80010f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	48000800 	.word	0x48000800
 800110c:	48000400 	.word	0x48000400

08001110 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800111a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001128:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800112a:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <lcd_char_cp+0x194>)
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8001130:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <lcd_char_cp+0x198>)
 8001132:	2220      	movs	r2, #32
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8001136:	4b5c      	ldr	r3, [pc, #368]	; (80012a8 <lcd_char_cp+0x198>)
 8001138:	2210      	movs	r2, #16
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 800113c:	4b5a      	ldr	r3, [pc, #360]	; (80012a8 <lcd_char_cp+0x198>)
 800113e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8001144:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114c:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800114e:	f7ff ff0b 	bl	8000f68 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8001152:	4b54      	ldr	r3, [pc, #336]	; (80012a4 <lcd_char_cp+0x194>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	4a53      	ldr	r2, [pc, #332]	; (80012a4 <lcd_char_cp+0x194>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <lcd_char_cp+0x60>
 8001168:	4b4f      	ldr	r3, [pc, #316]	; (80012a8 <lcd_char_cp+0x198>)
 800116a:	2220      	movs	r2, #32
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	e003      	b.n	8001178 <lcd_char_cp+0x68>
 8001170:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <lcd_char_cp+0x198>)
 8001172:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001176:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 0320 	and.w	r3, r3, #32
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <lcd_char_cp+0x7a>
 8001182:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <lcd_char_cp+0x198>)
 8001184:	2210      	movs	r2, #16
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	e003      	b.n	8001192 <lcd_char_cp+0x82>
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <lcd_char_cp+0x198>)
 800118c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001190:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <lcd_char_cp+0x96>
 800119c:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <lcd_char_cp+0x198>)
 800119e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	e003      	b.n	80011ae <lcd_char_cp+0x9e>
 80011a6:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <lcd_char_cp+0x198>)
 80011a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011ac:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da05      	bge.n	80011c2 <lcd_char_cp+0xb2>
 80011b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	e004      	b.n	80011cc <lcd_char_cp+0xbc>
 80011c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011ca:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80011cc:	f7ff fecc 	bl	8000f68 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <lcd_char_cp+0x194>)
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <lcd_char_cp+0x198>)
 80011d8:	2220      	movs	r2, #32
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80011dc:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <lcd_char_cp+0x198>)
 80011de:	2210      	movs	r2, #16
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <lcd_char_cp+0x198>)
 80011e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80011ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80011f4:	f7ff feb8 	bl	8000f68 <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80011f8:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <lcd_char_cp+0x194>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	4a29      	ldr	r2, [pc, #164]	; (80012a4 <lcd_char_cp+0x194>)
 80011fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001202:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <lcd_char_cp+0x106>
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <lcd_char_cp+0x198>)
 8001210:	2220      	movs	r2, #32
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	e003      	b.n	800121e <lcd_char_cp+0x10e>
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <lcd_char_cp+0x198>)
 8001218:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800121c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <lcd_char_cp+0x120>
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <lcd_char_cp+0x198>)
 800122a:	2210      	movs	r2, #16
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	e003      	b.n	8001238 <lcd_char_cp+0x128>
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <lcd_char_cp+0x198>)
 8001232:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001236:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <lcd_char_cp+0x13c>
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <lcd_char_cp+0x198>)
 8001244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001248:	619a      	str	r2, [r3, #24]
 800124a:	e003      	b.n	8001254 <lcd_char_cp+0x144>
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <lcd_char_cp+0x198>)
 800124e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001252:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <lcd_char_cp+0x15a>
 800125e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001266:	619a      	str	r2, [r3, #24]
 8001268:	e004      	b.n	8001274 <lcd_char_cp+0x164>
 800126a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800126e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001272:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8001274:	f7ff fe78 	bl	8000f68 <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <lcd_char_cp+0x194>)
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <lcd_char_cp+0x198>)
 8001280:	2220      	movs	r2, #32
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <lcd_char_cp+0x198>)
 8001286:	2210      	movs	r2, #16
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <lcd_char_cp+0x198>)
 800128c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8001292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000800 	.word	0x48000800
 80012a8:	48000400 	.word	0x48000400

080012ac <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	while(*out_char)
 80012b4:	e008      	b.n	80012c8 <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff26 	bl	8001110 <lcd_char_cp>
        lcd_delay();
 80012c4:	f7ff fe50 	bl	8000f68 <lcd_delay>
	while(*out_char)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f2      	bne.n	80012b6 <lcd_out_cp+0xa>
	}

}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	460b      	mov	r3, r1
 80012e6:	71bb      	strb	r3, [r7, #6]
 80012e8:	4613      	mov	r3, r2
 80012ea:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 80012ec:	20fa      	movs	r0, #250	; 0xfa
 80012ee:	f001 fd1d 	bl	8002d2c <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 80012f2:	2002      	movs	r0, #2
 80012f4:	f7ff fe40 	bl	8000f78 <lcd_cmd>
    HAL_Delay(50);
 80012f8:	2032      	movs	r0, #50	; 0x32
 80012fa:	f001 fd17 	bl	8002d2c <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	4313      	orrs	r3, r2
 8001304:	b2da      	uxtb	r2, r3
 8001306:	797b      	ldrb	r3, [r7, #5]
 8001308:	4313      	orrs	r3, r2
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f043 0320 	orr.w	r3, r3, #32
 8001310:	b2db      	uxtb	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe30 	bl	8000f78 <lcd_cmd>
    HAL_Delay(50);
 8001318:	2032      	movs	r0, #50	; 0x32
 800131a:	f001 fd07 	bl	8002d2c <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 800131e:	2006      	movs	r0, #6
 8001320:	f7ff fe2a 	bl	8000f78 <lcd_cmd>
    HAL_Delay(50);
 8001324:	2032      	movs	r0, #50	; 0x32
 8001326:	f001 fd01 	bl	8002d2c <HAL_Delay>
    lcd_cmd(0x0E);
 800132a:	200e      	movs	r0, #14
 800132c:	f7ff fe24 	bl	8000f78 <lcd_cmd>
    HAL_Delay(50);
 8001330:	2032      	movs	r0, #50	; 0x32
 8001332:	f001 fcfb 	bl	8002d2c <HAL_Delay>
    lcd_cmd(0x0C);
 8001336:	200c      	movs	r0, #12
 8001338:	f7ff fe1e 	bl	8000f78 <lcd_cmd>
    HAL_Delay(50);
 800133c:	2032      	movs	r0, #50	; 0x32
 800133e:	f001 fcf5 	bl	8002d2c <HAL_Delay>
    lcd_cmd(0x01);
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff fe18 	bl	8000f78 <lcd_cmd>
    HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f001 fcef 	bl	8002d2c <HAL_Delay>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	460a      	mov	r2, r1
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	4613      	mov	r3, r2
 8001364:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d106      	bne.n	800137a <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	337f      	adds	r3, #127	; 0x7f
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fe00 	bl	8000f78 <lcd_cmd>
 8001378:	e008      	b.n	800138c <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d105      	bne.n	800138c <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	3b41      	subs	r3, #65	; 0x41
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fdf6 	bl	8000f78 <lcd_cmd>
	}
    HAL_Delay(5);
 800138c:	2005      	movs	r0, #5
 800138e:	f001 fccd 	bl	8002d2c <HAL_Delay>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <lcd_char>:

void lcd_char(unsigned char row, unsigned char column, char out_char)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	460b      	mov	r3, r1
 80013a6:	71bb      	strb	r3, [r7, #6]
 80013a8:	4613      	mov	r3, r2
 80013aa:	717b      	strb	r3, [r7, #5]
	lcd_gotoxy(row, column);
 80013ac:	79ba      	ldrb	r2, [r7, #6]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffcf 	bl	8001356 <lcd_gotoxy>
	lcd_char_cp(out_char);
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fea8 	bl	8001110 <lcd_char_cp>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	603a      	str	r2, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	460b      	mov	r3, r1
 80013d6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ffb9 	bl	8001356 <lcd_gotoxy>
	lcd_out_cp(out_char);
 80013e4:	6838      	ldr	r0, [r7, #0]
 80013e6:	f7ff ff61 	bl	80012ac <lcd_out_cp>
    HAL_Delay(5);
 80013ea:	2005      	movs	r0, #5
 80013ec:	f001 fc9e 	bl	8002d2c <HAL_Delay>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <lcd_clear>:
void lcd_clear(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fdbb 	bl	8000f78 <lcd_cmd>
    HAL_Delay(5);
 8001402:	2005      	movs	r0, #5
 8001404:	f001 fc92 	bl	8002d2c <HAL_Delay>

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// WYPISYWANIE TEKSTU NA UART
int __io_putchar(int ch)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b0a      	cmp	r3, #10
 8001418:	d109      	bne.n	800142e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800141a:	230d      	movs	r3, #13
 800141c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800141e:	f107 010f 	add.w	r1, r7, #15
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	2201      	movs	r2, #1
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <__io_putchar+0x3c>)
 800142a:	f004 fe79 	bl	8006120 <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800142e:	1d39      	adds	r1, r7, #4
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2201      	movs	r2, #1
 8001436:	4804      	ldr	r0, [pc, #16]	; (8001448 <__io_putchar+0x3c>)
 8001438:	f004 fe72 	bl	8006120 <HAL_UART_Transmit>
    return 1;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002c0 	.word	0x200002c0

0800144c <__io_getchar>:

//POBIERANIE TEKSTU Z UART
int __io_getchar(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
    uint8_t ch;
        HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8001452:	1df9      	adds	r1, r7, #7
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2201      	movs	r2, #1
 800145a:	4807      	ldr	r0, [pc, #28]	; (8001478 <__io_getchar+0x2c>)
 800145c:	f004 feea 	bl	8006234 <HAL_UART_Receive>
        if (ch == '\r\n') {
            HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
        }
        HAL_UART_Transmit(&huart2, &ch, 1, HAL_MAX_DELAY);
 8001460:	1df9      	adds	r1, r7, #7
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	2201      	movs	r2, #1
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <__io_getchar+0x2c>)
 800146a:	f004 fe59 	bl	8006120 <HAL_UART_Transmit>
        return ch;
 800146e:	79fb      	ldrb	r3, [r7, #7]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200002c0 	.word	0x200002c0

0800147c <_read>:

//POBIERA DANE WYJSCIOWE ORAZ WSTAWIA JE DO BUFFORA
int _read( char *buffor, int buffor_size)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
    int count = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
    char ch;
    while (1)
    {
        ch = __io_getchar();
 800148a:	f7ff ffdf 	bl	800144c <__io_getchar>
 800148e:	4603      	mov	r3, r0
 8001490:	72fb      	strb	r3, [r7, #11]
        if (ch == '\r')
 8001492:	7afb      	ldrb	r3, [r7, #11]
 8001494:	2b0d      	cmp	r3, #13
 8001496:	d008      	beq.n	80014aa <_read+0x2e>
        {
            break;
        }
        buffor[count++] = ch;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60fa      	str	r2, [r7, #12]
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	7afa      	ldrb	r2, [r7, #11]
 80014a6:	701a      	strb	r2, [r3, #0]
        ch = __io_getchar();
 80014a8:	e7ef      	b.n	800148a <_read+0xe>
            break;
 80014aa:	bf00      	nop
    }
    buffor[count] = '\0';
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
    if(count >= buffor_size){
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	db01      	blt.n	80014c2 <_read+0x46>
    	count =0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
    }
    return count; // Zwraca 0 gdy buffor jest przepelniony
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <Create_char>:
				  0b00000}, //PUDLO GORA - PUDLO DOL 0X06
};

// FUNKCJA TWORZACA WLASNE ZNAKI
void Create_char(uint8_t start_location, uint8_t char_table[][8], uint8_t num_chars)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	4613      	mov	r3, r2
 80014da:	71bb      	strb	r3, [r7, #6]
    for (uint8_t j = 0; j < num_chars; j++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	75fb      	strb	r3, [r7, #23]
 80014e0:	e023      	b.n	800152a <Create_char+0x5e>
        uint8_t location = start_location + j;
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	4413      	add	r3, r2
 80014e8:	73fb      	strb	r3, [r7, #15]
        lcd_cmd(0x40 | (location << 3));
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd3d 	bl	8000f78 <lcd_cmd>
        for (int i = 0; i < 8; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	e00c      	b.n	800151e <Create_char+0x52>
        {
            lcd_char_cp(char_table[j][i]);
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	441a      	add	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fdfc 	bl	8001110 <lcd_char_cp>
        for (int i = 0; i < 8; i++)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	3301      	adds	r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	2b07      	cmp	r3, #7
 8001522:	ddef      	ble.n	8001504 <Create_char+0x38>
    for (uint8_t j = 0; j < num_chars; j++) {
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	3301      	adds	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
 800152a:	7dfa      	ldrb	r2, [r7, #23]
 800152c:	79bb      	ldrb	r3, [r7, #6]
 800152e:	429a      	cmp	r2, r3
 8001530:	d3d7      	bcc.n	80014e2 <Create_char+0x16>
        }
    }
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <Check_line>:

//Sprawdza w ktorej linii znajduje sie obiekt, zwraca w ktorej linii
int Check_line(int y)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	if(y>=3)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	dd01      	ble.n	800154e <Check_line+0x12>
	{
		return 2;
 800154a:	2302      	movs	r3, #2
 800154c:	e000      	b.n	8001550 <Check_line+0x14>
	}
	else
	{
		return 1;
 800154e:	2301      	movs	r3, #1
	}
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <Print_in_lcd>:
int position_x = 1; // Gdzie znajduje sie statek w pionie
int miss_in = 0; //Czy przy przemieszczaniu sie na wczesniejszej pozycji bylo pudlo nad statkiem (4) lub pod statkiem (5)

//WYPISUJE STATEK W DANEJ LINII 1/2 ORAZ W KTOREJ POLOWIE LINII GORNEJ/DOLNEJ
void Print_in_lcd()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	int line = Check_line(position_y);
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <Print_in_lcd+0x60>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffe8 	bl	800153c <Check_line>
 800156c:	6078      	str	r0, [r7, #4]
	if(!round_zero) // Jezeli nie jest runda zerowa to czysci ekran
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <Print_in_lcd+0x64>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <Print_in_lcd+0x1e>
	{
		lcd_clear();
 8001576:	f7ff ff3f 	bl	80013f8 <lcd_clear>
	}
	if(position_y%2==0)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <Print_in_lcd+0x60>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d109      	bne.n	800159a <Print_in_lcd+0x3e>
	{
	    lcd_char(line,position_x,0x00);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <Print_in_lcd+0x68>)
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	b2d1      	uxtb	r1, r2
 8001590:	2200      	movs	r2, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff01 	bl	800139a <lcd_char>
 8001598:	e008      	b.n	80015ac <Print_in_lcd+0x50>
	}
	else
	{
	    lcd_char(line,position_x,0x01);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <Print_in_lcd+0x68>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	b2d1      	uxtb	r1, r2
 80015a4:	2201      	movs	r2, #1
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fef7 	bl	800139a <lcd_char>
	}
	HAL_Delay(500);
 80015ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b0:	f001 fbbc 	bl	8002d2c <HAL_Delay>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000058 	.word	0x20000058
 80015c0:	20000348 	.word	0x20000348
 80015c4:	2000005c 	.word	0x2000005c

080015c8 <Positioning>:

//USTALENIE LINII I CZYSZCZENIE POPRZEDNIEJ POZYCJI STATKU W RUNDZIE NIEZEROWEJ (POMOCNE W FUNKCJI Keyboard())
void Positioning(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	int line = Check_line(position_y);
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <Positioning+0x6c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ffb2 	bl	800153c <Check_line>
 80015d8:	6078      	str	r0, [r7, #4]
	if(miss_in == 4)
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <Positioning+0x70>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d109      	bne.n	80015f6 <Positioning+0x2e>
	{
		lcd_char(line,position_x,0x03);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <Positioning+0x74>)
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	b2d1      	uxtb	r1, r2
 80015ec:	2203      	movs	r2, #3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fed3 	bl	800139a <lcd_char>
 80015f4:	e016      	b.n	8001624 <Positioning+0x5c>
	}
	else if(miss_in == 5)
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <Positioning+0x70>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d109      	bne.n	8001612 <Positioning+0x4a>
	{
		lcd_char(line,position_x,0x02);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <Positioning+0x74>)
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	b2d1      	uxtb	r1, r2
 8001608:	2202      	movs	r2, #2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fec5 	bl	800139a <lcd_char>
 8001610:	e008      	b.n	8001624 <Positioning+0x5c>
	}
	else
	{
		lcd_print(line,position_x," ");
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <Positioning+0x74>)
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	b2d1      	uxtb	r1, r2
 800161c:	4a08      	ldr	r2, [pc, #32]	; (8001640 <Positioning+0x78>)
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fed2 	bl	80013c8 <lcd_print>
	}
	miss_in = 0;
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <Positioning+0x70>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000058 	.word	0x20000058
 8001638:	2000034c 	.word	0x2000034c
 800163c:	2000005c 	.word	0x2000005c
 8001640:	0800a5a8 	.word	0x0800a5a8

08001644 <Init_tab>:

// TABLICA NA WSZYSTKO CO JEST NA EKRANIE
int tab[4][16];
void Init_tab(){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
	for(int i=0 ; i<4 ; i++){
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	e013      	b.n	8001678 <Init_tab+0x34>
		for(int j=0 ; j<16 ; j++){
 8001650:	2300      	movs	r3, #0
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	e00a      	b.n	800166c <Init_tab+0x28>
				// 0 - NIC
				// 1 - STATEK
				// 2 - PUDLO
				tab[i][j]=0;
 8001656:	490d      	ldr	r1, [pc, #52]	; (800168c <Init_tab+0x48>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	011a      	lsls	r2, r3, #4
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4413      	add	r3, r2
 8001660:	2200      	movs	r2, #0
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0 ; j<16 ; j++){
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	ddf1      	ble.n	8001656 <Init_tab+0x12>
	for(int i=0 ; i<4 ; i++){
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3301      	adds	r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b03      	cmp	r3, #3
 800167c:	dde8      	ble.n	8001650 <Init_tab+0xc>
			}
	}
}
 800167e:	bf00      	nop
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	20000350 	.word	0x20000350

08001690 <Print_tab>:
// WYSPISUJE W UART CALA TAB
void Print_tab()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
	printf(" ");
 8001696:	2020      	movs	r0, #32
 8001698:	f006 f960 	bl	800795c <putchar>
	for(int i=0 ; i<16 ; i++)
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e008      	b.n	80016b4 <Print_tab+0x24>
	{
		printf("%3d", i+1);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4619      	mov	r1, r3
 80016a8:	4827      	ldr	r0, [pc, #156]	; (8001748 <Print_tab+0xb8>)
 80016aa:	f006 f945 	bl	8007938 <iprintf>
	for(int i=0 ; i<16 ; i++)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	ddf3      	ble.n	80016a2 <Print_tab+0x12>
	}
	printf("\n");
 80016ba:	200a      	movs	r0, #10
 80016bc:	f006 f94e 	bl	800795c <putchar>
    for(int i=0 ; i<4 ; i++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	e038      	b.n	8001738 <Print_tab+0xa8>
    {
    	printf("%d", i+1);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	481f      	ldr	r0, [pc, #124]	; (800174c <Print_tab+0xbc>)
 80016ce:	f006 f933 	bl	8007938 <iprintf>
        for(int j=0 ; j<16 ; j++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	e026      	b.n	8001726 <Print_tab+0x96>
        {
            // JEZELI TAB TO 0 - CZYLI NIC LUB 1 CZYLI STATEK WYPISUJEMY 0
            // JEZELEI TAB TO 2 CZYLI PUDLO TO X
        	if(tab[i][j]==0 || tab[i][j]==1)
 80016d8:	491d      	ldr	r1, [pc, #116]	; (8001750 <Print_tab+0xc0>)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	011a      	lsls	r2, r3, #4
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <Print_tab+0x6c>
 80016ea:	4919      	ldr	r1, [pc, #100]	; (8001750 <Print_tab+0xc0>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	011a      	lsls	r2, r3, #4
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d104      	bne.n	8001706 <Print_tab+0x76>
            {
                printf("%3c", '-');
 80016fc:	212d      	movs	r1, #45	; 0x2d
 80016fe:	4815      	ldr	r0, [pc, #84]	; (8001754 <Print_tab+0xc4>)
 8001700:	f006 f91a 	bl	8007938 <iprintf>
 8001704:	e00c      	b.n	8001720 <Print_tab+0x90>
            }
            else if(tab[i][j]==2)
 8001706:	4912      	ldr	r1, [pc, #72]	; (8001750 <Print_tab+0xc0>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	011a      	lsls	r2, r3, #4
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d103      	bne.n	8001720 <Print_tab+0x90>
            {
                printf("%3c", 'X');
 8001718:	2158      	movs	r1, #88	; 0x58
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <Print_tab+0xc4>)
 800171c:	f006 f90c 	bl	8007938 <iprintf>
        for(int j=0 ; j<16 ; j++)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	ddd5      	ble.n	80016d8 <Print_tab+0x48>
            }
        }
        printf("\n");
 800172c:	200a      	movs	r0, #10
 800172e:	f006 f915 	bl	800795c <putchar>
    for(int i=0 ; i<4 ; i++)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b03      	cmp	r3, #3
 800173c:	ddc3      	ble.n	80016c6 <Print_tab+0x36>
    }
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	0800a5ac 	.word	0x0800a5ac
 800174c:	0800a5b0 	.word	0x0800a5b0
 8001750:	20000350 	.word	0x20000350
 8001754:	0800a5b4 	.word	0x0800a5b4

08001758 <Give_voltage>:

// SPRAWDZA NAPIECIE Z PRZYCISKOW NA LCD
float Give_voltage()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800175e:	4820      	ldr	r0, [pc, #128]	; (80017e0 <Give_voltage+0x88>)
 8001760:	f001 fe8a 	bl	8003478 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	481d      	ldr	r0, [pc, #116]	; (80017e0 <Give_voltage+0x88>)
 800176a:	f001 ff73 	bl	8003654 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc1);
 800176e:	481c      	ldr	r0, [pc, #112]	; (80017e0 <Give_voltage+0x88>)
 8001770:	f001 ff3c 	bl	80035ec <HAL_ADC_Stop>
	uint32_t val = HAL_ADC_GetValue(&hadc1);
 8001774:	481a      	ldr	r0, [pc, #104]	; (80017e0 <Give_voltage+0x88>)
 8001776:	f002 f845 	bl	8003804 <HAL_ADC_GetValue>
 800177a:	6078      	str	r0, [r7, #4]
	float volt = (float)val * 3.3 / (pow(2,12)-1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001786:	ee17 0a90 	vmov	r0, s15
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_f2d>
 800178e:	a310      	add	r3, pc, #64	; (adr r3, 80017d0 <Give_voltage+0x78>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe ff30 	bl	80005f8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a30d      	add	r3, pc, #52	; (adr r3, 80017d8 <Give_voltage+0x80>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f851 	bl	800084c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9f9 	bl	8000ba8 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	603b      	str	r3, [r7, #0]
	return volt;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	ee07 3a90 	vmov	s15, r3
}
 80017c0:	eeb0 0a67 	vmov.f32	s0, s15
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	f3af 8000 	nop.w
 80017d0:	66666666 	.word	0x66666666
 80017d4:	400a6666 	.word	0x400a6666
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40affe00 	.word	0x40affe00
 80017e0:	2000025c 	.word	0x2000025c
 80017e4:	00000000 	.word	0x00000000

080017e8 <Start_game_keyboard>:

// SWOBODNE PORUSZANIE SIE STATKIEM W RUNDZIE ZEROWEJ
int Start_game_keyboard()
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	 float volt = Give_voltage();
 80017ee:	f7ff ffb3 	bl	8001758 <Give_voltage>
 80017f2:	ed87 0a01 	vstr	s0, [r7, #4]
	 if(volt > VSelect && volt < 2.9) // SELECT
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7fe fea6 	bl	8000548 <__aeabi_f2d>
 80017fc:	4b66      	ldr	r3, [pc, #408]	; (8001998 <Start_game_keyboard+0x1b0>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7ff f989 	bl	8000b18 <__aeabi_dcmpgt>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00c      	beq.n	8001826 <Start_game_keyboard+0x3e>
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7fe fe9b 	bl	8000548 <__aeabi_f2d>
 8001812:	a35d      	add	r3, pc, #372	; (adr r3, 8001988 <Start_game_keyboard+0x1a0>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7ff f960 	bl	8000adc <__aeabi_dcmplt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <Start_game_keyboard+0x3e>
	 {
	    	return 3;
 8001822:	2303      	movs	r3, #3
 8001824:	e0ab      	b.n	800197e <Start_game_keyboard+0x196>
	 }
	 else if(volt > VLeft && volt < (VSelect - 0.2) && position_x>1 ) // LEFT
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	4b5b      	ldr	r3, [pc, #364]	; (800199c <Start_game_keyboard+0x1b4>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7ff f971 	bl	8000b18 <__aeabi_dcmpgt>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d021      	beq.n	8001880 <Start_game_keyboard+0x98>
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7fe fe83 	bl	8000548 <__aeabi_f2d>
 8001842:	4604      	mov	r4, r0
 8001844:	460d      	mov	r5, r1
 8001846:	4b54      	ldr	r3, [pc, #336]	; (8001998 <Start_game_keyboard+0x1b0>)
 8001848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184c:	a350      	add	r3, pc, #320	; (adr r3, 8001990 <Start_game_keyboard+0x1a8>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fd19 	bl	8000288 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4620      	mov	r0, r4
 800185c:	4629      	mov	r1, r5
 800185e:	f7ff f93d 	bl	8000adc <__aeabi_dcmplt>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <Start_game_keyboard+0x98>
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <Start_game_keyboard+0x1b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	dd07      	ble.n	8001880 <Start_game_keyboard+0x98>
	 {
	    --position_x;
 8001870:	4b4b      	ldr	r3, [pc, #300]	; (80019a0 <Start_game_keyboard+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <Start_game_keyboard+0x1b8>)
 8001878:	6013      	str	r3, [r2, #0]
	    Print_in_lcd();
 800187a:	f7ff fe6f 	bl	800155c <Print_in_lcd>
 800187e:	e07a      	b.n	8001976 <Start_game_keyboard+0x18e>
	 }
	 else if(volt > VDown && volt < (VLeft - 0.2) && position_y<4) // DOWN
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7fe fe61 	bl	8000548 <__aeabi_f2d>
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <Start_game_keyboard+0x1bc>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7ff f944 	bl	8000b18 <__aeabi_dcmpgt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d021      	beq.n	80018da <Start_game_keyboard+0xf2>
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	4604      	mov	r4, r0
 800189e:	460d      	mov	r5, r1
 80018a0:	4b3e      	ldr	r3, [pc, #248]	; (800199c <Start_game_keyboard+0x1b4>)
 80018a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a6:	a33a      	add	r3, pc, #232	; (adr r3, 8001990 <Start_game_keyboard+0x1a8>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fcec 	bl	8000288 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7ff f910 	bl	8000adc <__aeabi_dcmplt>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <Start_game_keyboard+0xf2>
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <Start_game_keyboard+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	dc07      	bgt.n	80018da <Start_game_keyboard+0xf2>
	 {
		 ++position_y;
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <Start_game_keyboard+0x1c0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <Start_game_keyboard+0x1c0>)
 80018d2:	6013      	str	r3, [r2, #0]
	     Print_in_lcd();
 80018d4:	f7ff fe42 	bl	800155c <Print_in_lcd>
 80018d8:	e04d      	b.n	8001976 <Start_game_keyboard+0x18e>
	 }
	 else if(volt > VUp && volt < (VDown - 0.2) && position_y>1 ) // UP
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe fe34 	bl	8000548 <__aeabi_f2d>
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <Start_game_keyboard+0x1c4>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7ff f917 	bl	8000b18 <__aeabi_dcmpgt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d021      	beq.n	8001934 <Start_game_keyboard+0x14c>
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7fe fe29 	bl	8000548 <__aeabi_f2d>
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <Start_game_keyboard+0x1bc>)
 80018fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001900:	a323      	add	r3, pc, #140	; (adr r3, 8001990 <Start_game_keyboard+0x1a8>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fcbf 	bl	8000288 <__aeabi_dsub>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7ff f8e3 	bl	8000adc <__aeabi_dcmplt>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <Start_game_keyboard+0x14c>
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <Start_game_keyboard+0x1c0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	dd07      	ble.n	8001934 <Start_game_keyboard+0x14c>
	 {

	     --position_y;
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <Start_game_keyboard+0x1c0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <Start_game_keyboard+0x1c0>)
 800192c:	6013      	str	r3, [r2, #0]
	     Print_in_lcd();
 800192e:	f7ff fe15 	bl	800155c <Print_in_lcd>
 8001932:	e020      	b.n	8001976 <Start_game_keyboard+0x18e>
	 }
	 else if(volt < (VUp - 0.2)  && position_x<16) // RIGHT
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7fe fe07 	bl	8000548 <__aeabi_f2d>
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <Start_game_keyboard+0x1c4>)
 8001940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001944:	a312      	add	r3, pc, #72	; (adr r3, 8001990 <Start_game_keyboard+0x1a8>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fc9d 	bl	8000288 <__aeabi_dsub>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7ff f8c1 	bl	8000adc <__aeabi_dcmplt>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00a      	beq.n	8001976 <Start_game_keyboard+0x18e>
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <Start_game_keyboard+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	dc06      	bgt.n	8001976 <Start_game_keyboard+0x18e>
	 {
		 ++position_x;
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <Start_game_keyboard+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <Start_game_keyboard+0x1b8>)
 8001970:	6013      	str	r3, [r2, #0]
	     Print_in_lcd();
 8001972:	f7ff fdf3 	bl	800155c <Print_in_lcd>
	 }
	 HAL_Delay(100);
 8001976:	2064      	movs	r0, #100	; 0x64
 8001978:	f001 f9d8 	bl	8002d2c <HAL_Delay>
	 return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bdb0      	pop	{r4, r5, r7, pc}
 8001986:	bf00      	nop
 8001988:	33333333 	.word	0x33333333
 800198c:	40073333 	.word	0x40073333
 8001990:	9999999a 	.word	0x9999999a
 8001994:	3fc99999 	.word	0x3fc99999
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	2000005c 	.word	0x2000005c
 80019a4:	20000010 	.word	0x20000010
 80019a8:	20000058 	.word	0x20000058
 80019ac:	20000018 	.word	0x20000018

080019b0 <Keyboard>:
// WYBIERA MIEJSCE NA STATEK
int Keyboard()
{
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	int line = Check_line(position_y);
 80019b6:	4b98      	ldr	r3, [pc, #608]	; (8001c18 <Keyboard+0x268>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fdbe 	bl	800153c <Check_line>
 80019c0:	6078      	str	r0, [r7, #4]
    if(tab[position_y][position_x-1] == 2 && position_y%2==1)
 80019c2:	4b95      	ldr	r3, [pc, #596]	; (8001c18 <Keyboard+0x268>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b95      	ldr	r3, [pc, #596]	; (8001c1c <Keyboard+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	4994      	ldr	r1, [pc, #592]	; (8001c20 <Keyboard+0x270>)
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d10c      	bne.n	80019f4 <Keyboard+0x44>
 80019da:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <Keyboard+0x268>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	bfb8      	it	lt
 80019e6:	425b      	neglt	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d103      	bne.n	80019f4 <Keyboard+0x44>
    {
    	miss_in = 5;
 80019ec:	4b8d      	ldr	r3, [pc, #564]	; (8001c24 <Keyboard+0x274>)
 80019ee:	2205      	movs	r2, #5
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e015      	b.n	8001a20 <Keyboard+0x70>
    }
    else if(tab[position_y-2][position_x-1] == 2 && position_y%2==0)
 80019f4:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <Keyboard+0x268>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1e9a      	subs	r2, r3, #2
 80019fa:	4b88      	ldr	r3, [pc, #544]	; (8001c1c <Keyboard+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	4987      	ldr	r1, [pc, #540]	; (8001c20 <Keyboard+0x270>)
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d108      	bne.n	8001a20 <Keyboard+0x70>
 8001a0e:	4b82      	ldr	r3, [pc, #520]	; (8001c18 <Keyboard+0x268>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <Keyboard+0x70>
    {
    	miss_in = 4;
 8001a1a:	4b82      	ldr	r3, [pc, #520]	; (8001c24 <Keyboard+0x274>)
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	601a      	str	r2, [r3, #0]
    }

    float volt = Give_voltage();
 8001a20:	f7ff fe9a 	bl	8001758 <Give_voltage>
 8001a24:	ed87 0a00 	vstr	s0, [r7]
    if(volt > VSelect && volt < VSelect) // SELECT
 8001a28:	6838      	ldr	r0, [r7, #0]
 8001a2a:	f7fe fd8d 	bl	8000548 <__aeabi_f2d>
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <Keyboard+0x278>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7ff f870 	bl	8000b18 <__aeabi_dcmpgt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <Keyboard+0xa8>
 8001a3e:	6838      	ldr	r0, [r7, #0]
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <Keyboard+0x278>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7ff f847 	bl	8000adc <__aeabi_dcmplt>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <Keyboard+0xa8>
    {
    	return 3;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e1c2      	b.n	8001dde <Keyboard+0x42e>
    }
    else if(volt > VLeft && volt < (VSelect - 0.2) && position_x>1 && tab[position_y-1][position_x-2] != 2) // LEFT
 8001a58:	6838      	ldr	r0, [r7, #0]
 8001a5a:	f7fe fd75 	bl	8000548 <__aeabi_f2d>
 8001a5e:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <Keyboard+0x27c>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7ff f858 	bl	8000b18 <__aeabi_dcmpgt>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d075      	beq.n	8001b5a <Keyboard+0x1aa>
 8001a6e:	6838      	ldr	r0, [r7, #0]
 8001a70:	f7fe fd6a 	bl	8000548 <__aeabi_f2d>
 8001a74:	4604      	mov	r4, r0
 8001a76:	460d      	mov	r5, r1
 8001a78:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <Keyboard+0x278>)
 8001a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a7e:	a364      	add	r3, pc, #400	; (adr r3, 8001c10 <Keyboard+0x260>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fc00 	bl	8000288 <__aeabi_dsub>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7ff f824 	bl	8000adc <__aeabi_dcmplt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d05f      	beq.n	8001b5a <Keyboard+0x1aa>
 8001a9a:	4b60      	ldr	r3, [pc, #384]	; (8001c1c <Keyboard+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	dd5b      	ble.n	8001b5a <Keyboard+0x1aa>
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <Keyboard+0x268>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	4b5c      	ldr	r3, [pc, #368]	; (8001c1c <Keyboard+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b02      	subs	r3, #2
 8001aae:	495c      	ldr	r1, [pc, #368]	; (8001c20 <Keyboard+0x270>)
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d04e      	beq.n	8001b5a <Keyboard+0x1aa>
    {
    	Positioning();
 8001abc:	f7ff fd84 	bl	80015c8 <Positioning>
    	--position_x;
 8001ac0:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <Keyboard+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	4a55      	ldr	r2, [pc, #340]	; (8001c1c <Keyboard+0x26c>)
 8001ac8:	6013      	str	r3, [r2, #0]
    	if(tab[position_y-2][position_x-1] == 2 && position_y%2==0)
 8001aca:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <Keyboard+0x268>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	1e9a      	subs	r2, r3, #2
 8001ad0:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <Keyboard+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	4952      	ldr	r1, [pc, #328]	; (8001c20 <Keyboard+0x270>)
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	4413      	add	r3, r2
 8001adc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d113      	bne.n	8001b0c <Keyboard+0x15c>
 8001ae4:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <Keyboard+0x268>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d10d      	bne.n	8001b0c <Keyboard+0x15c>
    	{
    		lcd_char(line,position_x,0x04);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	4a49      	ldr	r2, [pc, #292]	; (8001c1c <Keyboard+0x26c>)
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	b2d1      	uxtb	r1, r2
 8001afa:	2204      	movs	r2, #4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fc4c 	bl	800139a <lcd_char>
    		HAL_Delay(500);
 8001b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b06:	f001 f911 	bl	8002d2c <HAL_Delay>
 8001b0a:	e025      	b.n	8001b58 <Keyboard+0x1a8>
    	}
    	else if(tab[position_y][position_x-1] == 2 && position_y%2==1)
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <Keyboard+0x268>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <Keyboard+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	4942      	ldr	r1, [pc, #264]	; (8001c20 <Keyboard+0x270>)
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d116      	bne.n	8001b52 <Keyboard+0x1a2>
 8001b24:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <Keyboard+0x268>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	bfb8      	it	lt
 8001b30:	425b      	neglt	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d10d      	bne.n	8001b52 <Keyboard+0x1a2>
    	{
    		lcd_char(line,position_x,0x05);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4a38      	ldr	r2, [pc, #224]	; (8001c1c <Keyboard+0x26c>)
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	b2d1      	uxtb	r1, r2
 8001b40:	2205      	movs	r2, #5
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fc29 	bl	800139a <lcd_char>
    		HAL_Delay(500);
 8001b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b4c:	f001 f8ee 	bl	8002d2c <HAL_Delay>
 8001b50:	e002      	b.n	8001b58 <Keyboard+0x1a8>
    	}
    	else
    	{
    		Print_in_lcd();
 8001b52:	f7ff fd03 	bl	800155c <Print_in_lcd>
    	if(tab[position_y-2][position_x-1] == 2 && position_y%2==0)
 8001b56:	e141      	b.n	8001ddc <Keyboard+0x42c>
 8001b58:	e140      	b.n	8001ddc <Keyboard+0x42c>
    	}
    }
    else if(volt > VDown && volt < (VLeft - 0.2) && position_y<4 && tab[position_y][position_x-1] != 2) // DOWN
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f7fe fcf4 	bl	8000548 <__aeabi_f2d>
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <Keyboard+0x280>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d061      	beq.n	8001c34 <Keyboard+0x284>
 8001b70:	6838      	ldr	r0, [r7, #0]
 8001b72:	f7fe fce9 	bl	8000548 <__aeabi_f2d>
 8001b76:	4604      	mov	r4, r0
 8001b78:	460d      	mov	r5, r1
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <Keyboard+0x27c>)
 8001b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b80:	a323      	add	r3, pc, #140	; (adr r3, 8001c10 <Keyboard+0x260>)
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	f7fe fb7f 	bl	8000288 <__aeabi_dsub>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4620      	mov	r0, r4
 8001b90:	4629      	mov	r1, r5
 8001b92:	f7fe ffa3 	bl	8000adc <__aeabi_dcmplt>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d04b      	beq.n	8001c34 <Keyboard+0x284>
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <Keyboard+0x268>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	dc47      	bgt.n	8001c34 <Keyboard+0x284>
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <Keyboard+0x268>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <Keyboard+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	491c      	ldr	r1, [pc, #112]	; (8001c20 <Keyboard+0x270>)
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d03b      	beq.n	8001c34 <Keyboard+0x284>
    {
    	Positioning();
 8001bbc:	f7ff fd04 	bl	80015c8 <Positioning>
        ++position_y;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <Keyboard+0x268>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <Keyboard+0x268>)
 8001bc8:	6013      	str	r3, [r2, #0]
        if(tab[position_y][position_x-1] == 2 && position_y==3)
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <Keyboard+0x268>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <Keyboard+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	4912      	ldr	r1, [pc, #72]	; (8001c20 <Keyboard+0x270>)
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	4413      	add	r3, r2
 8001bda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d113      	bne.n	8001c0a <Keyboard+0x25a>
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <Keyboard+0x268>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d10f      	bne.n	8001c0a <Keyboard+0x25a>
        {
        	lcd_char(line+1,position_x,0x05);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <Keyboard+0x26c>)
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	b2d1      	uxtb	r1, r2
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fbcd 	bl	800139a <lcd_char>
        	HAL_Delay(500);
 8001c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c04:	f001 f892 	bl	8002d2c <HAL_Delay>
        if(tab[position_y][position_x-1] == 2 && position_y==3)
 8001c08:	e0e8      	b.n	8001ddc <Keyboard+0x42c>
        }
        else
        {
        	Print_in_lcd();
 8001c0a:	f7ff fca7 	bl	800155c <Print_in_lcd>
        if(tab[position_y][position_x-1] == 2 && position_y==3)
 8001c0e:	e0e5      	b.n	8001ddc <Keyboard+0x42c>
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	3fc99999 	.word	0x3fc99999
 8001c18:	20000058 	.word	0x20000058
 8001c1c:	2000005c 	.word	0x2000005c
 8001c20:	20000350 	.word	0x20000350
 8001c24:	2000034c 	.word	0x2000034c
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000010 	.word	0x20000010
        }
    }
    else if(volt > VUp && volt < (VDown - 0.2)   && position_y>1 && tab[position_y-2][position_x-1] != 2) // UP
 8001c34:	6838      	ldr	r0, [r7, #0]
 8001c36:	f7fe fc87 	bl	8000548 <__aeabi_f2d>
 8001c3a:	4b6d      	ldr	r3, [pc, #436]	; (8001df0 <Keyboard+0x440>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe ff6a 	bl	8000b18 <__aeabi_dcmpgt>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d051      	beq.n	8001cee <Keyboard+0x33e>
 8001c4a:	6838      	ldr	r0, [r7, #0]
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_f2d>
 8001c50:	4604      	mov	r4, r0
 8001c52:	460d      	mov	r5, r1
 8001c54:	4b67      	ldr	r3, [pc, #412]	; (8001df4 <Keyboard+0x444>)
 8001c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c5a:	a363      	add	r3, pc, #396	; (adr r3, 8001de8 <Keyboard+0x438>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fb12 	bl	8000288 <__aeabi_dsub>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe ff36 	bl	8000adc <__aeabi_dcmplt>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03b      	beq.n	8001cee <Keyboard+0x33e>
 8001c76:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <Keyboard+0x448>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	dd37      	ble.n	8001cee <Keyboard+0x33e>
 8001c7e:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <Keyboard+0x448>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	1e9a      	subs	r2, r3, #2
 8001c84:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <Keyboard+0x44c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	495d      	ldr	r1, [pc, #372]	; (8001e00 <Keyboard+0x450>)
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	4413      	add	r3, r2
 8001c90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d02a      	beq.n	8001cee <Keyboard+0x33e>
    {
    	Positioning();
 8001c98:	f7ff fc96 	bl	80015c8 <Positioning>
        --position_y;
 8001c9c:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <Keyboard+0x448>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	4a55      	ldr	r2, [pc, #340]	; (8001df8 <Keyboard+0x448>)
 8001ca4:	6013      	str	r3, [r2, #0]
        if(tab[position_y-2][position_x-1] == 2 && position_y==2)
 8001ca6:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <Keyboard+0x448>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	1e9a      	subs	r2, r3, #2
 8001cac:	4b53      	ldr	r3, [pc, #332]	; (8001dfc <Keyboard+0x44c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	4953      	ldr	r1, [pc, #332]	; (8001e00 <Keyboard+0x450>)
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d113      	bne.n	8001ce8 <Keyboard+0x338>
 8001cc0:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <Keyboard+0x448>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d10f      	bne.n	8001ce8 <Keyboard+0x338>
        {
        	lcd_char(line-1,position_x,0x04);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4a4a      	ldr	r2, [pc, #296]	; (8001dfc <Keyboard+0x44c>)
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	b2d1      	uxtb	r1, r2
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fb5e 	bl	800139a <lcd_char>
        	HAL_Delay(500);
 8001cde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce2:	f001 f823 	bl	8002d2c <HAL_Delay>
        if(tab[position_y-2][position_x-1] == 2 && position_y==2)
 8001ce6:	e079      	b.n	8001ddc <Keyboard+0x42c>
        }
        else
        {
        	Print_in_lcd();
 8001ce8:	f7ff fc38 	bl	800155c <Print_in_lcd>
        if(tab[position_y-2][position_x-1] == 2 && position_y==2)
 8001cec:	e076      	b.n	8001ddc <Keyboard+0x42c>
        }
    }
    else if(volt < (VUp - 0.2)   && position_x<16 && tab[position_y-1][position_x] != 2) // RIGHT
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	f7fe fc2a 	bl	8000548 <__aeabi_f2d>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	460d      	mov	r5, r1
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <Keyboard+0x440>)
 8001cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cfe:	a33a      	add	r3, pc, #232	; (adr r3, 8001de8 <Keyboard+0x438>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fac0 	bl	8000288 <__aeabi_dsub>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7fe fee4 	bl	8000adc <__aeabi_dcmplt>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d05e      	beq.n	8001dd8 <Keyboard+0x428>
 8001d1a:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <Keyboard+0x44c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b0f      	cmp	r3, #15
 8001d20:	dc5a      	bgt.n	8001dd8 <Keyboard+0x428>
 8001d22:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <Keyboard+0x448>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	1e5a      	subs	r2, r3, #1
 8001d28:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <Keyboard+0x44c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4934      	ldr	r1, [pc, #208]	; (8001e00 <Keyboard+0x450>)
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	4413      	add	r3, r2
 8001d32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d04e      	beq.n	8001dd8 <Keyboard+0x428>
    {
    	Positioning();
 8001d3a:	f7ff fc45 	bl	80015c8 <Positioning>
    	++position_x;
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <Keyboard+0x44c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3301      	adds	r3, #1
 8001d44:	4a2d      	ldr	r2, [pc, #180]	; (8001dfc <Keyboard+0x44c>)
 8001d46:	6013      	str	r3, [r2, #0]
    	if(tab[position_y-2][position_x-1] == 2 && position_y%2==0)
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <Keyboard+0x448>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	1e9a      	subs	r2, r3, #2
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <Keyboard+0x44c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	492a      	ldr	r1, [pc, #168]	; (8001e00 <Keyboard+0x450>)
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d113      	bne.n	8001d8a <Keyboard+0x3da>
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <Keyboard+0x448>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10d      	bne.n	8001d8a <Keyboard+0x3da>
    	{
    		lcd_char(line,position_x,0x04);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <Keyboard+0x44c>)
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	b2d1      	uxtb	r1, r2
 8001d78:	2204      	movs	r2, #4
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fb0d 	bl	800139a <lcd_char>
    		HAL_Delay(500);
 8001d80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d84:	f000 ffd2 	bl	8002d2c <HAL_Delay>
 8001d88:	e025      	b.n	8001dd6 <Keyboard+0x426>
    	}
    	else if(tab[position_y][position_x-1] == 2 && position_y%2==1)
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <Keyboard+0x448>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <Keyboard+0x44c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	491a      	ldr	r1, [pc, #104]	; (8001e00 <Keyboard+0x450>)
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d116      	bne.n	8001dd0 <Keyboard+0x420>
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <Keyboard+0x448>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	bfb8      	it	lt
 8001dae:	425b      	neglt	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d10d      	bne.n	8001dd0 <Keyboard+0x420>
    	{
    		lcd_char(line,position_x,0x05);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <Keyboard+0x44c>)
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	b2d1      	uxtb	r1, r2
 8001dbe:	2205      	movs	r2, #5
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff faea 	bl	800139a <lcd_char>
    		HAL_Delay(500);
 8001dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dca:	f000 ffaf 	bl	8002d2c <HAL_Delay>
 8001dce:	e002      	b.n	8001dd6 <Keyboard+0x426>
    	}
    	else
    	{
    		Print_in_lcd();
 8001dd0:	f7ff fbc4 	bl	800155c <Print_in_lcd>
    	if(tab[position_y-2][position_x-1] == 2 && position_y%2==0)
 8001dd4:	e002      	b.n	8001ddc <Keyboard+0x42c>
 8001dd6:	e001      	b.n	8001ddc <Keyboard+0x42c>
    	}
    }
    else
    {
    	return 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <Keyboard+0x42e>
    }
	return 1;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	9999999a 	.word	0x9999999a
 8001dec:	3fc99999 	.word	0x3fc99999
 8001df0:	20000018 	.word	0x20000018
 8001df4:	20000010 	.word	0x20000010
 8001df8:	20000058 	.word	0x20000058
 8001dfc:	2000005c 	.word	0x2000005c
 8001e00:	20000350 	.word	0x20000350
 8001e04:	00000000 	.word	0x00000000

08001e08 <Wait_for_select>:

int game = 1;
// W MENU SPRAWDZAMY CZY WCISNIETO SELECT PRZY STARCIE GRY
int Wait_for_select()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
	float volt = Give_voltage();
 8001e0e:	f7ff fca3 	bl	8001758 <Give_voltage>
 8001e12:	ed87 0a01 	vstr	s0, [r7, #4]
	if(volt > VSelect && volt < 2.9) // SELECT
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fb96 	bl	8000548 <__aeabi_f2d>
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <Wait_for_select+0xb8>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fe79 	bl	8000b18 <__aeabi_dcmpgt>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d03c      	beq.n	8001ea6 <Wait_for_select+0x9e>
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7fe fb8b 	bl	8000548 <__aeabi_f2d>
 8001e32:	a321      	add	r3, pc, #132	; (adr r3, 8001eb8 <Wait_for_select+0xb0>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fe50 	bl	8000adc <__aeabi_dcmplt>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d031      	beq.n	8001ea6 <Wait_for_select+0x9e>
	{
		if(game==1)
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <Wait_for_select+0xbc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d114      	bne.n	8001e74 <Wait_for_select+0x6c>
		{
			lcd_clear();
 8001e4a:	f7ff fad5 	bl	80013f8 <lcd_clear>
			lcd_print(1, 1, "GAME 1 OF 2");
 8001e4e:	4a1e      	ldr	r2, [pc, #120]	; (8001ec8 <Wait_for_select+0xc0>)
 8001e50:	2101      	movs	r1, #1
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff fab8 	bl	80013c8 <lcd_print>
			lcd_print(2, 1, "P1 LCD - P2 UART");
 8001e58:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <Wait_for_select+0xc4>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	2002      	movs	r0, #2
 8001e5e:	f7ff fab3 	bl	80013c8 <lcd_print>
			printf("GAME 1 OF 2 \nP1 LCD - P2 UART \r\n");
 8001e62:	481b      	ldr	r0, [pc, #108]	; (8001ed0 <Wait_for_select+0xc8>)
 8001e64:	f005 fdd6 	bl	8007a14 <puts>
			HAL_Delay(1000);
 8001e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e6c:	f000 ff5e 	bl	8002d2c <HAL_Delay>
			return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e01b      	b.n	8001eac <Wait_for_select+0xa4>
		}
		else if(game==2)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <Wait_for_select+0xbc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d116      	bne.n	8001eaa <Wait_for_select+0xa2>
		{
			lcd_clear();
 8001e7c:	f7ff fabc 	bl	80013f8 <lcd_clear>
			lcd_print(1, 1, "GAME 2 OF 2");
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <Wait_for_select+0xcc>)
 8001e82:	2101      	movs	r1, #1
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7ff fa9f 	bl	80013c8 <lcd_print>
			lcd_print(2, 1, "P1 UART - P2 LCD");
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <Wait_for_select+0xd0>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f7ff fa9a 	bl	80013c8 <lcd_print>
			printf("GAME 2 OF 2 \nP1 UART - P2 LCD \r\n");
 8001e94:	4811      	ldr	r0, [pc, #68]	; (8001edc <Wait_for_select+0xd4>)
 8001e96:	f005 fdbd 	bl	8007a14 <puts>
			HAL_Delay(1000);
 8001e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e9e:	f000 ff45 	bl	8002d2c <HAL_Delay>
			return 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e002      	b.n	8001eac <Wait_for_select+0xa4>
		}
	}
	else
	{
		return 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <Wait_for_select+0xa4>
		if(game==1)
 8001eaa:	bf00      	nop
	}
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	33333333 	.word	0x33333333
 8001ebc:	40073333 	.word	0x40073333
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000060 	.word	0x20000060
 8001ec8:	0800a5b8 	.word	0x0800a5b8
 8001ecc:	0800a5c4 	.word	0x0800a5c4
 8001ed0:	0800a5d8 	.word	0x0800a5d8
 8001ed4:	0800a5f8 	.word	0x0800a5f8
 8001ed8:	0800a604 	.word	0x0800a604
 8001edc:	0800a618 	.word	0x0800a618

08001ee0 <LCD_player_move>:

// ODPOWIADA ZA LICZBE RUCHOW GRACZA NA EKRANIE LCD
void LCD_player_move()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	int Selected = Keyboard();
 8001ee6:	f7ff fd63 	bl	80019b0 <Keyboard>
 8001eea:	6078      	str	r0, [r7, #4]
	if(!round_zero)
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <LCD_player_move+0x54>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d118      	bne.n	8001f26 <LCD_player_move+0x46>
	{
		lcd_char(1,position_x,0x01);
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <LCD_player_move+0x58>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2201      	movs	r2, #1
 8001efc:	4619      	mov	r1, r3
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff fa4b 	bl	800139a <lcd_char>
		while(Selected < 3)
 8001f04:	e002      	b.n	8001f0c <LCD_player_move+0x2c>
		{
				Selected = Start_game_keyboard();
 8001f06:	f7ff fc6f 	bl	80017e8 <Start_game_keyboard>
 8001f0a:	6078      	str	r0, [r7, #4]
		while(Selected < 3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	ddf9      	ble.n	8001f06 <LCD_player_move+0x26>
		}
		round_zero=1;
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <LCD_player_move+0x54>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
		while(Selected <3)
		{
			Selected += Keyboard();
		}
	}
}
 8001f18:	e008      	b.n	8001f2c <LCD_player_move+0x4c>
			Selected += Keyboard();
 8001f1a:	f7ff fd49 	bl	80019b0 <Keyboard>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4413      	add	r3, r2
 8001f24:	607b      	str	r3, [r7, #4]
		while(Selected <3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	ddf6      	ble.n	8001f1a <LCD_player_move+0x3a>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000348 	.word	0x20000348
 8001f38:	2000005c 	.word	0x2000005c

08001f3c <Change_lcd>:

// WYPISUJE ZNAKI PO STRZALE NA EKRANIE LCD
void Change_lcd(int y, int x)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]

	int line = Check_line(y);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff faf8 	bl	800153c <Check_line>
 8001f4c:	60f8      	str	r0, [r7, #12]
	if(y%2==0)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d130      	bne.n	8001fba <Change_lcd+0x7e>
	{
		if(tab[y-2][x-1] == 2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1e9a      	subs	r2, r3, #2
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	4934      	ldr	r1, [pc, #208]	; (8002034 <Change_lcd+0xf8>)
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d108      	bne.n	8001f80 <Change_lcd+0x44>
		{
			lcd_char(line,x,0x06);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	b2d1      	uxtb	r1, r2
 8001f76:	2206      	movs	r2, #6
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fa0e 	bl	800139a <lcd_char>
 8001f7e:	e04a      	b.n	8002016 <Change_lcd+0xda>
		}
		else if(tab[y-2][x-1] == 1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	1e9a      	subs	r2, r3, #2
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	492a      	ldr	r1, [pc, #168]	; (8002034 <Change_lcd+0xf8>)
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <Change_lcd+0x6c>
		{
			lcd_char(line,x,0x05);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	b2d1      	uxtb	r1, r2
 8001f9e:	2205      	movs	r2, #5
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f9fa 	bl	800139a <lcd_char>
 8001fa6:	e036      	b.n	8002016 <Change_lcd+0xda>
		}
		else
		{
			lcd_char(line,x,0x02);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d1      	uxtb	r1, r2
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f9f1 	bl	800139a <lcd_char>
 8001fb8:	e02d      	b.n	8002016 <Change_lcd+0xda>
		}
	}
	else
	{
		if(tab[y][x-1] == 2){
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	491d      	ldr	r1, [pc, #116]	; (8002034 <Change_lcd+0xf8>)
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d108      	bne.n	8001fe0 <Change_lcd+0xa4>
			lcd_char(line,x,0x06);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	b2d1      	uxtb	r1, r2
 8001fd6:	2206      	movs	r2, #6
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f9de 	bl	800139a <lcd_char>
 8001fde:	e01a      	b.n	8002016 <Change_lcd+0xda>
		}
		else if(tab[y][x-1] == 1){
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	4913      	ldr	r1, [pc, #76]	; (8002034 <Change_lcd+0xf8>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	4413      	add	r3, r2
 8001fec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d108      	bne.n	8002006 <Change_lcd+0xca>
			lcd_char(line,x,0x04);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d1      	uxtb	r1, r2
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f9cb 	bl	800139a <lcd_char>
 8002004:	e007      	b.n	8002016 <Change_lcd+0xda>
		}
		else{
			lcd_char(line,x,0x03);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	b2d1      	uxtb	r1, r2
 800200e:	2203      	movs	r2, #3
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f9c2 	bl	800139a <lcd_char>
		}

	}
	tab[y-1][x-1]=2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3b01      	subs	r3, #1
 800201e:	4905      	ldr	r1, [pc, #20]	; (8002034 <Change_lcd+0xf8>)
 8002020:	0112      	lsls	r2, r2, #4
 8002022:	4413      	add	r3, r2
 8002024:	2202      	movs	r2, #2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000350 	.word	0x20000350

08002038 <Second_game>:
int result1; // ZAWIERIA LICZBE STRZALOW PLAYERA 1
int result2; // ZAWIERIA LICZBE STRZALOW PLAYERA 2

// INICJALIZIUJE DRUGA GRE NP. CZYSCI ZMIENNE
void Second_game()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	lcd_clear();
 800203c:	f7ff f9dc 	bl	80013f8 <lcd_clear>
	lcd_print(1,1,"PRESS SELECT");
 8002040:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <Second_game+0x90>)
 8002042:	2101      	movs	r1, #1
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff f9bf 	bl	80013c8 <lcd_print>
	lcd_print(2,1,"TO CONTINUE");
 800204a:	4a20      	ldr	r2, [pc, #128]	; (80020cc <Second_game+0x94>)
 800204c:	2101      	movs	r1, #1
 800204e:	2002      	movs	r0, #2
 8002050:	f7ff f9ba 	bl	80013c8 <lcd_print>
	printf("PRESS SELECT ON LCD TO CONTINUE \n");
 8002054:	481e      	ldr	r0, [pc, #120]	; (80020d0 <Second_game+0x98>)
 8002056:	f005 fcdd 	bl	8007a14 <puts>
	while (Wait_for_select())
 800205a:	e001      	b.n	8002060 <Second_game+0x28>
	Init_tab();
 800205c:	f7ff faf2 	bl	8001644 <Init_tab>
	while (Wait_for_select())
 8002060:	f7ff fed2 	bl	8001e08 <Wait_for_select>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f8      	bne.n	800205c <Second_game+0x24>
	lcd_clear();
 800206a:	f7ff f9c5 	bl	80013f8 <lcd_clear>
	printf("Player LCD place starting position of his ship \n");
 800206e:	4819      	ldr	r0, [pc, #100]	; (80020d4 <Second_game+0x9c>)
 8002070:	f005 fcd0 	bl	8007a14 <puts>
    lcd_char(1,1,0x01);
 8002074:	2201      	movs	r2, #1
 8002076:	2101      	movs	r1, #1
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff f98e 	bl	800139a <lcd_char>
	position_x=1;
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <Second_game+0xa0>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]
	position_y=1;
 8002084:	4b15      	ldr	r3, [pc, #84]	; (80020dc <Second_game+0xa4>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]
	round_zero=0;
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <Second_game+0xa8>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
	LCD_player_move();
 8002090:	f7ff ff26 	bl	8001ee0 <LCD_player_move>
	tab[position_y-1][position_x-1]=1;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <Second_game+0xa4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1e5a      	subs	r2, r3, #1
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <Second_game+0xa0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3b01      	subs	r3, #1
 80020a0:	4910      	ldr	r1, [pc, #64]	; (80020e4 <Second_game+0xac>)
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	4413      	add	r3, r2
 80020a6:	2201      	movs	r2, #1
 80020a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	printf("Ship placed! Now you can use 'shoot y x' to destroy the ship \n\n");
 80020ac:	480e      	ldr	r0, [pc, #56]	; (80020e8 <Second_game+0xb0>)
 80020ae:	f005 fcb1 	bl	8007a14 <puts>
	Print_tab();
 80020b2:	f7ff faed 	bl	8001690 <Print_tab>
    HAL_Delay(500);
 80020b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020ba:	f000 fe37 	bl	8002d2c <HAL_Delay>
    win=0;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <Second_game+0xb4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	0800a638 	.word	0x0800a638
 80020cc:	0800a648 	.word	0x0800a648
 80020d0:	0800a654 	.word	0x0800a654
 80020d4:	0800a678 	.word	0x0800a678
 80020d8:	2000005c 	.word	0x2000005c
 80020dc:	20000058 	.word	0x20000058
 80020e0:	20000348 	.word	0x20000348
 80020e4:	20000350 	.word	0x20000350
 80020e8:	0800a6a8 	.word	0x0800a6a8
 80020ec:	20000450 	.word	0x20000450

080020f0 <System_Interface>:
// DO UART
int System_Interface(const char *command)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	if(strstr(command, "shoot") == command)
 80020f8:	496b      	ldr	r1, [pc, #428]	; (80022a8 <System_Interface+0x1b8>)
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f005 fdc0 	bl	8007c80 <strstr>
 8002100:	4602      	mov	r2, r0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4293      	cmp	r3, r2
 8002106:	f040 80c2 	bne.w	800228e <System_Interface+0x19e>
	{
		uint32_t y, x;
	    if (sscanf(command, "shoot %d %d", &y, &x) == 2) // Sprawdza czy wczytano dwie liczby
 800210a:	f107 0318 	add.w	r3, r7, #24
 800210e:	f107 021c 	add.w	r2, r7, #28
 8002112:	4966      	ldr	r1, [pc, #408]	; (80022ac <System_Interface+0x1bc>)
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f005 fca5 	bl	8007a64 <siscanf>
 800211a:	4603      	mov	r3, r0
 800211c:	2b02      	cmp	r3, #2
 800211e:	f040 80b1 	bne.w	8002284 <System_Interface+0x194>
	    {
			printf("Fire! on position %d x %d \n", y, x);
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4619      	mov	r1, r3
 8002128:	4861      	ldr	r0, [pc, #388]	; (80022b0 <System_Interface+0x1c0>)
 800212a:	f005 fc05 	bl	8007938 <iprintf>
			if(y>4 || x>16)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d802      	bhi.n	800213a <System_Interface+0x4a>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d904      	bls.n	8002144 <System_Interface+0x54>
			{
				printf("> Out of the border!!! TRY AGAIN \n");
 800213a:	485e      	ldr	r0, [pc, #376]	; (80022b4 <System_Interface+0x1c4>)
 800213c:	f005 fc6a 	bl	8007a14 <puts>
				return 0;
 8002140:	2300      	movs	r3, #0
 8002142:	e0ad      	b.n	80022a0 <System_Interface+0x1b0>
			}
			else if(tab[y-1][x-1] == 2)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	3b01      	subs	r3, #1
 800214c:	495a      	ldr	r1, [pc, #360]	; (80022b8 <System_Interface+0x1c8>)
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	4413      	add	r3, r2
 8002152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d104      	bne.n	8002164 <System_Interface+0x74>
			{
				printf("> You just shooted there !!! TRY AGAIN \n");
 800215a:	4858      	ldr	r0, [pc, #352]	; (80022bc <System_Interface+0x1cc>)
 800215c:	f005 fc5a 	bl	8007a14 <puts>
				return 0;
 8002160:	2300      	movs	r3, #0
 8002162:	e09d      	b.n	80022a0 <System_Interface+0x1b0>
			}
    		shoot_counter++;
 8002164:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <System_Interface+0x1d0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	4a55      	ldr	r2, [pc, #340]	; (80022c0 <System_Interface+0x1d0>)
 800216c:	6013      	str	r3, [r2, #0]
			if(tab[y-1][x-1] == 1)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	3b01      	subs	r3, #1
 8002176:	4950      	ldr	r1, [pc, #320]	; (80022b8 <System_Interface+0x1c8>)
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	4413      	add	r3, r2
 800217c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d15f      	bne.n	8002244 <System_Interface+0x154>
			{
				win=1;
 8002184:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <System_Interface+0x1d4>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
				game++;
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <System_Interface+0x1d8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	4a4d      	ldr	r2, [pc, #308]	; (80022c8 <System_Interface+0x1d8>)
 8002192:	6013      	str	r3, [r2, #0]
				int jj=11;
 8002194:	230b      	movs	r3, #11
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
				for(int j = 1; j <= 7 ; j++)
 8002198:	2301      	movs	r3, #1
 800219a:	623b      	str	r3, [r7, #32]
 800219c:	e01b      	b.n	80021d6 <System_Interface+0xe6>
				{
					lcd_clear();
 800219e:	f7ff f92b 	bl	80013f8 <lcd_clear>
					lcd_print(1,j,"LOSE!");
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4a49      	ldr	r2, [pc, #292]	; (80022cc <System_Interface+0x1dc>)
 80021a8:	4619      	mov	r1, r3
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff f90c 	bl	80013c8 <lcd_print>
					lcd_print(2,jj--,"LOSE!");
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	1e5a      	subs	r2, r3, #1
 80021b4:	627a      	str	r2, [r7, #36]	; 0x24
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4a44      	ldr	r2, [pc, #272]	; (80022cc <System_Interface+0x1dc>)
 80021ba:	4619      	mov	r1, r3
 80021bc:	2002      	movs	r0, #2
 80021be:	f7ff f903 	bl	80013c8 <lcd_print>
					printf("Win! \n");
 80021c2:	4843      	ldr	r0, [pc, #268]	; (80022d0 <System_Interface+0x1e0>)
 80021c4:	f005 fc26 	bl	8007a14 <puts>
					HAL_Delay(300);
 80021c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021cc:	f000 fdae 	bl	8002d2c <HAL_Delay>
				for(int j = 1; j <= 7 ; j++)
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	3301      	adds	r3, #1
 80021d4:	623b      	str	r3, [r7, #32]
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	2b07      	cmp	r3, #7
 80021da:	dde0      	ble.n	800219e <System_Interface+0xae>
				}
				if (game<3)
 80021dc:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <System_Interface+0x1d8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	dc07      	bgt.n	80021f4 <System_Interface+0x104>
				{
					result1 = shoot_counter;
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <System_Interface+0x1d0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <System_Interface+0x1e4>)
 80021ea:	6013      	str	r3, [r2, #0]
					shoot_counter = 0;
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <System_Interface+0x1d0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e051      	b.n	8002298 <System_Interface+0x1a8>
				}
				else
				{
				    char results[16];
				    result2 = shoot_counter;
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <System_Interface+0x1d0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a37      	ldr	r2, [pc, #220]	; (80022d8 <System_Interface+0x1e8>)
 80021fa:	6013      	str	r3, [r2, #0]
				    sprintf(results, "P1: %d - P2: %d", result1, result2);
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <System_Interface+0x1e4>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <System_Interface+0x1e8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f107 0008 	add.w	r0, r7, #8
 8002208:	4934      	ldr	r1, [pc, #208]	; (80022dc <System_Interface+0x1ec>)
 800220a:	f005 fc0b 	bl	8007a24 <siprintf>
					printf("GAME OVER ! \n");
 800220e:	4834      	ldr	r0, [pc, #208]	; (80022e0 <System_Interface+0x1f0>)
 8002210:	f005 fc00 	bl	8007a14 <puts>
					printf(results);
 8002214:	f107 0308 	add.w	r3, r7, #8
 8002218:	4618      	mov	r0, r3
 800221a:	f005 fb8d 	bl	8007938 <iprintf>
					printf("\n");
 800221e:	200a      	movs	r0, #10
 8002220:	f005 fb9c 	bl	800795c <putchar>
					lcd_print(1,1,"GAME OVER !");
 8002224:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <System_Interface+0x1f4>)
 8002226:	2101      	movs	r1, #1
 8002228:	2001      	movs	r0, #1
 800222a:	f7ff f8cd 	bl	80013c8 <lcd_print>
					lcd_print(2,1,results);
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	461a      	mov	r2, r3
 8002234:	2101      	movs	r1, #1
 8002236:	2002      	movs	r0, #2
 8002238:	f7ff f8c6 	bl	80013c8 <lcd_print>
					HAL_Delay(999999999);
 800223c:	482a      	ldr	r0, [pc, #168]	; (80022e8 <System_Interface+0x1f8>)
 800223e:	f000 fd75 	bl	8002d2c <HAL_Delay>
 8002242:	e029      	b.n	8002298 <System_Interface+0x1a8>
				}
			}
			else
			{
				//Informuje osobe strzelajaco gdzie znajduje sie statek
				if(x>position_x)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	4a29      	ldr	r2, [pc, #164]	; (80022ec <System_Interface+0x1fc>)
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	4293      	cmp	r3, r2
 800224c:	d903      	bls.n	8002256 <System_Interface+0x166>
				{
					printf("\n ----------> Ship is on the left <---------- \n\n");
 800224e:	4828      	ldr	r0, [pc, #160]	; (80022f0 <System_Interface+0x200>)
 8002250:	f005 fbe0 	bl	8007a14 <puts>
 8002254:	e00b      	b.n	800226e <System_Interface+0x17e>
				}
				else if(x<position_x)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4a24      	ldr	r2, [pc, #144]	; (80022ec <System_Interface+0x1fc>)
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	4293      	cmp	r3, r2
 800225e:	d203      	bcs.n	8002268 <System_Interface+0x178>
				{
					printf("\n ----------> Ship is on the right <---------- \n\n");
 8002260:	4824      	ldr	r0, [pc, #144]	; (80022f4 <System_Interface+0x204>)
 8002262:	f005 fbd7 	bl	8007a14 <puts>
 8002266:	e002      	b.n	800226e <System_Interface+0x17e>
				}
				else
				{
					printf("\n ----------> Ship is on the same column <---------- \n\n");
 8002268:	4823      	ldr	r0, [pc, #140]	; (80022f8 <System_Interface+0x208>)
 800226a:	f005 fbd3 	bl	8007a14 <puts>
				}
				Change_lcd(y,x);
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	461a      	mov	r2, r3
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f7ff fe60 	bl	8001f3c <Change_lcd>
				Print_tab();
 800227c:	f7ff fa08 	bl	8001690 <Print_tab>
				return 1;
 8002280:	2301      	movs	r3, #1
 8002282:	e00d      	b.n	80022a0 <System_Interface+0x1b0>
			}
		}
	    else
	    {
	        printf("> Wrong arguments ! TRY AGAIN \n");
 8002284:	481d      	ldr	r0, [pc, #116]	; (80022fc <System_Interface+0x20c>)
 8002286:	f005 fbc5 	bl	8007a14 <puts>
		    return 0;
 800228a:	2300      	movs	r3, #0
 800228c:	e008      	b.n	80022a0 <System_Interface+0x1b0>
	    }
	}
	else
	{
		printf("> Wrong command ! TRY AGAIN \n");
 800228e:	481c      	ldr	r0, [pc, #112]	; (8002300 <System_Interface+0x210>)
 8002290:	f005 fbc0 	bl	8007a14 <puts>
	    return 0;
 8002294:	2300      	movs	r3, #0
 8002296:	e003      	b.n	80022a0 <System_Interface+0x1b0>
	}
    printf("\n");
 8002298:	200a      	movs	r0, #10
 800229a:	f005 fb5f 	bl	800795c <putchar>
    return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	0800a6e8 	.word	0x0800a6e8
 80022ac:	0800a6f0 	.word	0x0800a6f0
 80022b0:	0800a6fc 	.word	0x0800a6fc
 80022b4:	0800a718 	.word	0x0800a718
 80022b8:	20000350 	.word	0x20000350
 80022bc:	0800a73c 	.word	0x0800a73c
 80022c0:	20000454 	.word	0x20000454
 80022c4:	20000450 	.word	0x20000450
 80022c8:	20000060 	.word	0x20000060
 80022cc:	0800a764 	.word	0x0800a764
 80022d0:	0800a76c 	.word	0x0800a76c
 80022d4:	20000458 	.word	0x20000458
 80022d8:	2000045c 	.word	0x2000045c
 80022dc:	0800a774 	.word	0x0800a774
 80022e0:	0800a784 	.word	0x0800a784
 80022e4:	0800a794 	.word	0x0800a794
 80022e8:	3b9ac9ff 	.word	0x3b9ac9ff
 80022ec:	2000005c 	.word	0x2000005c
 80022f0:	0800a7a0 	.word	0x0800a7a0
 80022f4:	0800a7d0 	.word	0x0800a7d0
 80022f8:	0800a804 	.word	0x0800a804
 80022fc:	0800a83c 	.word	0x0800a83c
 8002300:	0800a85c 	.word	0x0800a85c

08002304 <Menu>:

//MENU DO GRY W USART/LCD
void Menu()
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	printf("\r\n\r\n");
 8002308:	4823      	ldr	r0, [pc, #140]	; (8002398 <Menu+0x94>)
 800230a:	f005 fb83 	bl	8007a14 <puts>
	printf(" _______  _______  _______  _______  ___   _  ___  \r\n");
 800230e:	4823      	ldr	r0, [pc, #140]	; (800239c <Menu+0x98>)
 8002310:	f005 fb80 	bl	8007a14 <puts>
	printf("|       ||       ||   _   ||       ||   | | ||   | \r\n");
 8002314:	4822      	ldr	r0, [pc, #136]	; (80023a0 <Menu+0x9c>)
 8002316:	f005 fb7d 	bl	8007a14 <puts>
	printf("|  _____||_     _||  | |  ||_     _||   |_| ||   | \r\n");
 800231a:	4822      	ldr	r0, [pc, #136]	; (80023a4 <Menu+0xa0>)
 800231c:	f005 fb7a 	bl	8007a14 <puts>
	printf("| |_____   |   |  |  |_|  |  |   |  |      _||   | \r\n");
 8002320:	4821      	ldr	r0, [pc, #132]	; (80023a8 <Menu+0xa4>)
 8002322:	f005 fb77 	bl	8007a14 <puts>
	printf("|_____  |  |   |  |       |  |   |  |     |_ |   | \r\n");
 8002326:	4821      	ldr	r0, [pc, #132]	; (80023ac <Menu+0xa8>)
 8002328:	f005 fb74 	bl	8007a14 <puts>
	printf(" _____| |  |   |  |   _   |  |   |  |    _  ||   | \r\n");
 800232c:	4820      	ldr	r0, [pc, #128]	; (80023b0 <Menu+0xac>)
 800232e:	f005 fb71 	bl	8007a14 <puts>
	printf("|_______|  |___|  |__| |__|  |___|  |___| |_||___| \r\n\r\n");
 8002332:	4820      	ldr	r0, [pc, #128]	; (80023b4 <Menu+0xb0>)
 8002334:	f005 fb6e 	bl	8007a14 <puts>
	lcd_print(1, 6, "STATKI");
 8002338:	4a1f      	ldr	r2, [pc, #124]	; (80023b8 <Menu+0xb4>)
 800233a:	2106      	movs	r1, #6
 800233c:	2001      	movs	r0, #1
 800233e:	f7ff f843 	bl	80013c8 <lcd_print>
	lcd_char(1,1,0x00);
 8002342:	2200      	movs	r2, #0
 8002344:	2101      	movs	r1, #1
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff f827 	bl	800139a <lcd_char>
	lcd_char(1,16,0x00);
 800234c:	2200      	movs	r2, #0
 800234e:	2110      	movs	r1, #16
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff f822 	bl	800139a <lcd_char>
	lcd_char(2,4,0x01);
 8002356:	2201      	movs	r2, #1
 8002358:	2104      	movs	r1, #4
 800235a:	2002      	movs	r0, #2
 800235c:	f7ff f81d 	bl	800139a <lcd_char>
	lcd_char(2,13,0x01);
 8002360:	2201      	movs	r2, #1
 8002362:	210d      	movs	r1, #13
 8002364:	2002      	movs	r0, #2
 8002366:	f7ff f818 	bl	800139a <lcd_char>
	lcd_char(2,7,0x00);
 800236a:	2200      	movs	r2, #0
 800236c:	2107      	movs	r1, #7
 800236e:	2002      	movs	r0, #2
 8002370:	f7ff f813 	bl	800139a <lcd_char>
	lcd_char(2,10,0x00);
 8002374:	2200      	movs	r2, #0
 8002376:	210a      	movs	r1, #10
 8002378:	2002      	movs	r0, #2
 800237a:	f7ff f80e 	bl	800139a <lcd_char>
	printf("Press SELECT on LCD to start the game\r\n\r\n");
 800237e:	480f      	ldr	r0, [pc, #60]	; (80023bc <Menu+0xb8>)
 8002380:	f005 fb48 	bl	8007a14 <puts>
	while(Wait_for_select());
 8002384:	bf00      	nop
 8002386:	f7ff fd3f 	bl	8001e08 <Wait_for_select>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1fa      	bne.n	8002386 <Menu+0x82>
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	0800a87c 	.word	0x0800a87c
 800239c:	0800a880 	.word	0x0800a880
 80023a0:	0800a8b8 	.word	0x0800a8b8
 80023a4:	0800a8f0 	.word	0x0800a8f0
 80023a8:	0800a928 	.word	0x0800a928
 80023ac:	0800a960 	.word	0x0800a960
 80023b0:	0800a998 	.word	0x0800a998
 80023b4:	0800a9d0 	.word	0x0800a9d0
 80023b8:	0800aa08 	.word	0x0800aa08
 80023bc:	0800aa10 	.word	0x0800aa10

080023c0 <Play_game>:
int rounds = 1;
char buffor[32];

// ROZPOCZYNA GRE
void Play_game()
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	  while(!win)
 80023c4:	e062      	b.n	800248c <Play_game+0xcc>
	  {
		  while(attempt<4)
		  {
			  if(win)
 80023c6:	4b35      	ldr	r3, [pc, #212]	; (800249c <Play_game+0xdc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d134      	bne.n	8002438 <Play_game+0x78>
			  {
				  break;
			  }
			  printf("\n -----------> Round - %d <---------- \n\n",rounds);
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <Play_game+0xe0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4833      	ldr	r0, [pc, #204]	; (80024a4 <Play_game+0xe4>)
 80023d6:	f005 faaf 	bl	8007938 <iprintf>
		  	  printf("Player UART guess where the ship is (3 shots)\n");
 80023da:	4833      	ldr	r0, [pc, #204]	; (80024a8 <Play_game+0xe8>)
 80023dc:	f005 fb1a 	bl	8007a14 <puts>
		  	  printf("Round %d Attempt %d\n",rounds,attempt);
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <Play_game+0xe0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a31      	ldr	r2, [pc, #196]	; (80024ac <Play_game+0xec>)
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	4831      	ldr	r0, [pc, #196]	; (80024b0 <Play_game+0xf0>)
 80023ec:	f005 faa4 	bl	8007938 <iprintf>
		  	  printf("> ");
 80023f0:	4830      	ldr	r0, [pc, #192]	; (80024b4 <Play_game+0xf4>)
 80023f2:	f005 faa1 	bl	8007938 <iprintf>
		  	  fflush(stdin);
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <Play_game+0xf8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 f9c5 	bl	800778c <fflush>
		  	  fflush(stdout);
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <Play_game+0xf8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4618      	mov	r0, r3
 800240a:	f005 f9bf 	bl	800778c <fflush>
		  	  if ( _read(buffor, 32) > 0)
 800240e:	2120      	movs	r1, #32
 8002410:	482a      	ldr	r0, [pc, #168]	; (80024bc <Play_game+0xfc>)
 8002412:	f7ff f833 	bl	800147c <_read>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	dd08      	ble.n	800242e <Play_game+0x6e>
		  	  {
		  		  attempt+=System_Interface(buffor);
 800241c:	4827      	ldr	r0, [pc, #156]	; (80024bc <Play_game+0xfc>)
 800241e:	f7ff fe67 	bl	80020f0 <System_Interface>
 8002422:	4602      	mov	r2, r0
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <Play_game+0xec>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4413      	add	r3, r2
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <Play_game+0xec>)
 800242c:	6013      	str	r3, [r2, #0]
		  while(attempt<4)
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <Play_game+0xec>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b03      	cmp	r3, #3
 8002434:	ddc7      	ble.n	80023c6 <Play_game+0x6>
 8002436:	e000      	b.n	800243a <Play_game+0x7a>
				  break;
 8002438:	bf00      	nop
		  	  }
		  }
		  if (!win) //
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <Play_game+0xdc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d124      	bne.n	800248c <Play_game+0xcc>
		  {
			  tab[position_y-1][position_x-1]=0;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <Play_game+0x100>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	1e5a      	subs	r2, r3, #1
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <Play_game+0x104>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	491e      	ldr	r1, [pc, #120]	; (80024c8 <Play_game+0x108>)
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	4413      	add	r3, r2
 8002454:	2200      	movs	r2, #0
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  	  printf("Player LCD place new position of his ship \n");
 800245a:	481c      	ldr	r0, [pc, #112]	; (80024cc <Play_game+0x10c>)
 800245c:	f005 fada 	bl	8007a14 <puts>
		  	  LCD_player_move();
 8002460:	f7ff fd3e 	bl	8001ee0 <LCD_player_move>
		  	  tab[position_y-1][position_x-1]=1;
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <Play_game+0x100>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <Play_game+0x104>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3b01      	subs	r3, #1
 8002470:	4915      	ldr	r1, [pc, #84]	; (80024c8 <Play_game+0x108>)
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	4413      	add	r3, r2
 8002476:	2201      	movs	r2, #1
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  	  attempt = 1;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <Play_game+0xec>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]
		  	  rounds++;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <Play_game+0xe0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <Play_game+0xe0>)
 800248a:	6013      	str	r3, [r2, #0]
	  while(!win)
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <Play_game+0xdc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0cc      	beq.n	800242e <Play_game+0x6e>
		  }
	  }
}
 8002494:	bf00      	nop
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000450 	.word	0x20000450
 80024a0:	20000068 	.word	0x20000068
 80024a4:	0800aa3c 	.word	0x0800aa3c
 80024a8:	0800aa68 	.word	0x0800aa68
 80024ac:	20000064 	.word	0x20000064
 80024b0:	0800aa98 	.word	0x0800aa98
 80024b4:	0800aab0 	.word	0x0800aab0
 80024b8:	200000d0 	.word	0x200000d0
 80024bc:	20000460 	.word	0x20000460
 80024c0:	20000058 	.word	0x20000058
 80024c4:	2000005c 	.word	0x2000005c
 80024c8:	20000350 	.word	0x20000350
 80024cc:	0800aab4 	.word	0x0800aab4

080024d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d4:	f000 fbb5 	bl	8002c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024d8:	f000 f854 	bl	8002584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024dc:	f000 f93e 	bl	800275c <MX_GPIO_Init>
  MX_ADC1_Init();
 80024e0:	f000 f896 	bl	8002610 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80024e4:	f000 f90a 	bl	80026fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 80024e8:	2208      	movs	r2, #8
 80024ea:	2100      	movs	r1, #0
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fef4 	bl	80012da <lcd_init>
  lcd_clear();
 80024f2:	f7fe ff81 	bl	80013f8 <lcd_clear>
  //MENU
  Create_char(0,customChar,7);
 80024f6:	2207      	movs	r2, #7
 80024f8:	491a      	ldr	r1, [pc, #104]	; (8002564 <main+0x94>)
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7fe ffe6 	bl	80014cc <Create_char>
  Init_tab();
 8002500:	f7ff f8a0 	bl	8001644 <Init_tab>
  Menu();
 8002504:	f7ff fefe 	bl	8002304 <Menu>
  lcd_clear();
 8002508:	f7fe ff76 	bl	80013f8 <lcd_clear>

  //RUNDA 0
  printf("Player LCD place starting position of his ship\r\n");
 800250c:	4816      	ldr	r0, [pc, #88]	; (8002568 <main+0x98>)
 800250e:	f005 fa81 	bl	8007a14 <puts>
  Create_char(0,customChar,7);
 8002512:	2207      	movs	r2, #7
 8002514:	4913      	ldr	r1, [pc, #76]	; (8002564 <main+0x94>)
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe ffd8 	bl	80014cc <Create_char>
  LCD_player_move();
 800251c:	f7ff fce0 	bl	8001ee0 <LCD_player_move>
  printf("Ship placed! Now you can use 'shoot y x' to destroy the ship\r\n");
 8002520:	4812      	ldr	r0, [pc, #72]	; (800256c <main+0x9c>)
 8002522:	f005 fa77 	bl	8007a14 <puts>
  tab[position_y-1][position_x-1]=1;
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <main+0xa0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <main+0xa4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3b01      	subs	r3, #1
 8002532:	4911      	ldr	r1, [pc, #68]	; (8002578 <main+0xa8>)
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	4413      	add	r3, r2
 8002538:	2201      	movs	r2, #1
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  Print_tab();
 800253e:	f7ff f8a7 	bl	8001690 <Print_tab>
  HAL_Delay(500);
 8002542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002546:	f000 fbf1 	bl	8002d2c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Play_game();
 800254a:	f7ff ff39 	bl	80023c0 <Play_game>
  attempt = 1;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <main+0xac>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  rounds = 1;
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <main+0xb0>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
  Second_game();
 800255a:	f7ff fd6d 	bl	8002038 <Second_game>
  Play_game();
 800255e:	f7ff ff2f 	bl	80023c0 <Play_game>
  while (1)
 8002562:	e7fe      	b.n	8002562 <main+0x92>
 8002564:	20000020 	.word	0x20000020
 8002568:	0800aae0 	.word	0x0800aae0
 800256c:	0800ab10 	.word	0x0800ab10
 8002570:	20000058 	.word	0x20000058
 8002574:	2000005c 	.word	0x2000005c
 8002578:	20000350 	.word	0x20000350
 800257c:	20000064 	.word	0x20000064
 8002580:	20000068 	.word	0x20000068

08002584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b096      	sub	sp, #88	; 0x58
 8002588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	2244      	movs	r2, #68	; 0x44
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f005 fb6c 	bl	8007c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002598:	463b      	mov	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80025a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025aa:	f002 fa59 	bl	8004a60 <HAL_PWREx_ControlVoltageScaling>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80025b4:	f000 f94a 	bl	800284c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80025b8:	2310      	movs	r3, #16
 80025ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80025bc:	2301      	movs	r3, #1
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80025c4:	2360      	movs	r3, #96	; 0x60
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fa9b 	bl	8004b0c <HAL_RCC_OscConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80025dc:	f000 f936 	bl	800284c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e0:	230f      	movs	r3, #15
 80025e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f002 fe63 	bl	80052c4 <HAL_RCC_ClockConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002604:	f000 f922 	bl	800284c <Error_Handler>
  }
}
 8002608:	bf00      	nop
 800260a:	3758      	adds	r7, #88	; 0x58
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
 8002630:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002634:	4a2f      	ldr	r2, [pc, #188]	; (80026f4 <MX_ADC1_Init+0xe4>)
 8002636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <MX_ADC1_Init+0xe0>)
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <MX_ADC1_Init+0xe0>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002652:	2204      	movs	r2, #4
 8002654:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002658:	2200      	movs	r2, #0
 800265a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <MX_ADC1_Init+0xe0>)
 800265e:	2200      	movs	r2, #0
 8002660:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002664:	2201      	movs	r2, #1
 8002666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <MX_ADC1_Init+0xe0>)
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002678:	2200      	movs	r2, #0
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_ADC1_Init+0xe0>)
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <MX_ADC1_Init+0xe0>)
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002692:	4817      	ldr	r0, [pc, #92]	; (80026f0 <MX_ADC1_Init+0xe0>)
 8002694:	f000 fda0 	bl	80031d8 <HAL_ADC_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800269e:	f000 f8d5 	bl	800284c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80026a6:	f107 031c 	add.w	r3, r7, #28
 80026aa:	4619      	mov	r1, r3
 80026ac:	4810      	ldr	r0, [pc, #64]	; (80026f0 <MX_ADC1_Init+0xe0>)
 80026ae:	f001 fe71 	bl	8004394 <HAL_ADCEx_MultiModeConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80026b8:	f000 f8c8 	bl	800284c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_ADC1_Init+0xe8>)
 80026be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026c0:	2306      	movs	r3, #6
 80026c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026c8:	237f      	movs	r3, #127	; 0x7f
 80026ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026cc:	2304      	movs	r3, #4
 80026ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_ADC1_Init+0xe0>)
 80026da:	f001 f8a1 	bl	8003820 <HAL_ADC_ConfigChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80026e4:	f000 f8b2 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	2000025c 	.word	0x2000025c
 80026f4:	50040000 	.word	0x50040000
 80026f8:	14f00020 	.word	0x14f00020

080026fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <MX_USART2_UART_Init+0x58>)
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <MX_USART2_UART_Init+0x5c>)
 8002704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <MX_USART2_UART_Init+0x58>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART2_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <MX_USART2_UART_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART2_UART_Init+0x58>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART2_UART_Init+0x58>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART2_UART_Init+0x58>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART2_UART_Init+0x58>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_USART2_UART_Init+0x58>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART2_UART_Init+0x58>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_USART2_UART_Init+0x58>)
 8002740:	f003 fca0 	bl	8006084 <HAL_UART_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800274a:	f000 f87f 	bl	800284c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200002c0 	.word	0x200002c0
 8002758:	40004400 	.word	0x40004400

0800275c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002762:	f107 030c 	add.w	r3, r7, #12
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	4b33      	ldr	r3, [pc, #204]	; (8002840 <MX_GPIO_Init+0xe4>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4a32      	ldr	r2, [pc, #200]	; (8002840 <MX_GPIO_Init+0xe4>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277e:	4b30      	ldr	r3, [pc, #192]	; (8002840 <MX_GPIO_Init+0xe4>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <MX_GPIO_Init+0xe4>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278e:	4a2c      	ldr	r2, [pc, #176]	; (8002840 <MX_GPIO_Init+0xe4>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <MX_GPIO_Init+0xe4>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <MX_GPIO_Init+0xe4>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	4a26      	ldr	r2, [pc, #152]	; (8002840 <MX_GPIO_Init+0xe4>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <MX_GPIO_Init+0xe4>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 80027ba:	2200      	movs	r2, #0
 80027bc:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80027c0:	4820      	ldr	r0, [pc, #128]	; (8002844 <MX_GPIO_Init+0xe8>)
 80027c2:	f002 f927 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	481f      	ldr	r0, [pc, #124]	; (8002848 <MX_GPIO_Init+0xec>)
 80027cc:	f002 f922 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80027d0:	2200      	movs	r2, #0
 80027d2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80027d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027da:	f002 f91b 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 80027de:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80027e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e4:	2301      	movs	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	4619      	mov	r1, r3
 80027f6:	4813      	ldr	r0, [pc, #76]	; (8002844 <MX_GPIO_Init+0xe8>)
 80027f8:	f001 ff62 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002800:	2301      	movs	r3, #1
 8002802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	4619      	mov	r1, r3
 8002812:	480d      	ldr	r0, [pc, #52]	; (8002848 <MX_GPIO_Init+0xec>)
 8002814:	f001 ff54 	bl	80046c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8002818:	f44f 7340 	mov.w	r3, #768	; 0x300
 800281c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281e:	2301      	movs	r3, #1
 8002820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	4619      	mov	r1, r3
 8002830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002834:	f001 ff44 	bl	80046c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002838:	bf00      	nop
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	48000400 	.word	0x48000400
 8002848:	48000800 	.word	0x48000800

0800284c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002850:	b672      	cpsid	i
}
 8002852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002854:	e7fe      	b.n	8002854 <Error_Handler+0x8>
	...

08002858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_MspInit+0x44>)
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <HAL_MspInit+0x44>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6613      	str	r3, [r2, #96]	; 0x60
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <HAL_MspInit+0x44>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_MspInit+0x44>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_MspInit+0x44>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002880:	6593      	str	r3, [r2, #88]	; 0x58
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_MspInit+0x44>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000

080028a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b0ac      	sub	sp, #176	; 0xb0
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2288      	movs	r2, #136	; 0x88
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f005 f9d5 	bl	8007c70 <memset>
  if(hadc->Instance==ADC1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a27      	ldr	r2, [pc, #156]	; (8002968 <HAL_ADC_MspInit+0xc8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d147      	bne.n	8002960 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80028de:	2301      	movs	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80028e6:	2310      	movs	r3, #16
 80028e8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80028ea:	2307      	movs	r3, #7
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028ee:	2302      	movs	r3, #2
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80028f2:	2302      	movs	r3, #2
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80028f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4618      	mov	r0, r3
 8002902:	f002 ff03 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800290c:	f7ff ff9e 	bl	800284c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_ADC_MspInit+0xcc>)
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_ADC_MspInit+0xcc>)
 8002916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_ADC_MspInit+0xcc>)
 800291e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_ADC_MspInit+0xcc>)
 800292a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292c:	4a0f      	ldr	r2, [pc, #60]	; (800296c <HAL_ADC_MspInit+0xcc>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_ADC_MspInit+0xcc>)
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002940:	2301      	movs	r3, #1
 8002942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002946:	230b      	movs	r3, #11
 8002948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002956:	4619      	mov	r1, r3
 8002958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800295c:	f001 feb0 	bl	80046c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002960:	bf00      	nop
 8002962:	37b0      	adds	r7, #176	; 0xb0
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	50040000 	.word	0x50040000
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0ac      	sub	sp, #176	; 0xb0
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2288      	movs	r2, #136	; 0x88
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f005 f96d 	bl	8007c70 <memset>
  if(huart->Instance==USART2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a21      	ldr	r2, [pc, #132]	; (8002a20 <HAL_UART_MspInit+0xb0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d13b      	bne.n	8002a18 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029a0:	2302      	movs	r3, #2
 80029a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 fead 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029b8:	f7ff ff48 	bl	800284c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_UART_MspInit+0xb4>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <HAL_UART_MspInit+0xb4>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
 80029c8:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_UART_MspInit+0xb4>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_UART_MspInit+0xb4>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_UART_MspInit+0xb4>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_UART_MspInit+0xb4>)
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ec:	230c      	movs	r3, #12
 80029ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a04:	2307      	movs	r3, #7
 8002a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a14:	f001 fe54 	bl	80046c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a18:	bf00      	nop
 8002a1a:	37b0      	adds	r7, #176	; 0xb0
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40004400 	.word	0x40004400
 8002a24:	40021000 	.word	0x40021000

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <NMI_Handler+0x4>

08002a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a32:	e7fe      	b.n	8002a32 <HardFault_Handler+0x4>

08002a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a38:	e7fe      	b.n	8002a38 <MemManage_Handler+0x4>

08002a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3e:	e7fe      	b.n	8002a3e <BusFault_Handler+0x4>

08002a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a44:	e7fe      	b.n	8002a44 <UsageFault_Handler+0x4>

08002a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a74:	f000 f93a 	bl	8002cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return 1;
 8002a80:	2301      	movs	r3, #1
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_kill>:

int _kill(int pid, int sig)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a96:	f005 f953 	bl	8007d40 <__errno>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2216      	movs	r2, #22
 8002a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_exit>:

void _exit (int status)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ffe7 	bl	8002a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002abe:	e7fe      	b.n	8002abe <_exit+0x12>

08002ac0 <_write>:

  return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e009      	b.n	8002ae6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	60ba      	str	r2, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fc96 	bl	800140c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	dbf1      	blt.n	8002ad2 <_write+0x12>
  }
  return len;
 8002aee:	687b      	ldr	r3, [r7, #4]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_close>:

int _close(int file)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b20:	605a      	str	r2, [r3, #4]
  return 0;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_isatty>:

int _isatty(int file)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b38:	2301      	movs	r3, #1
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <_sbrk+0x5c>)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <_sbrk+0x60>)
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <_sbrk+0x64>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <_sbrk+0x68>)
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d207      	bcs.n	8002ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b90:	f005 f8d6 	bl	8007d40 <__errno>
 8002b94:	4603      	mov	r3, r0
 8002b96:	220c      	movs	r2, #12
 8002b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e009      	b.n	8002bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <_sbrk+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <_sbrk+0x64>)
 8002bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20018000 	.word	0x20018000
 8002bc0:	00000400 	.word	0x00000400
 8002bc4:	20000480 	.word	0x20000480
 8002bc8:	200005d8 	.word	0x200005d8

08002bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <SystemInit+0x20>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <SystemInit+0x20>)
 8002bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bf4:	f7ff ffea 	bl	8002bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf8:	480c      	ldr	r0, [pc, #48]	; (8002c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002bfa:	490d      	ldr	r1, [pc, #52]	; (8002c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <LoopForever+0xe>)
  movs r3, #0
 8002bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c00:	e002      	b.n	8002c08 <LoopCopyDataInit>

08002c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c06:	3304      	adds	r3, #4

08002c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c0c:	d3f9      	bcc.n	8002c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c10:	4c0a      	ldr	r4, [pc, #40]	; (8002c3c <LoopForever+0x16>)
  movs r3, #0
 8002c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c14:	e001      	b.n	8002c1a <LoopFillZerobss>

08002c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c18:	3204      	adds	r2, #4

08002c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c1c:	d3fb      	bcc.n	8002c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c1e:	f005 f895 	bl	8007d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c22:	f7ff fc55 	bl	80024d0 <main>

08002c26 <LoopForever>:

LoopForever:
    b LoopForever
 8002c26:	e7fe      	b.n	8002c26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c30:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8002c34:	0800af40 	.word	0x0800af40
  ldr r2, =_sbss
 8002c38:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002c3c:	200005d4 	.word	0x200005d4

08002c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c40:	e7fe      	b.n	8002c40 <ADC1_2_IRQHandler>

08002c42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f001 fd03 	bl	8004658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c52:	200f      	movs	r0, #15
 8002c54:	f000 f80e 	bl	8002c74 <HAL_InitTick>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	71fb      	strb	r3, [r7, #7]
 8002c62:	e001      	b.n	8002c68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c64:	f7ff fdf8 	bl	8002858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c68:	79fb      	ldrb	r3, [r7, #7]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_InitTick+0x6c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d023      	beq.n	8002cd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HAL_InitTick+0x70>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_InitTick+0x6c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4619      	mov	r1, r3
 8002c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 fd01 	bl	80046a6 <HAL_SYSTICK_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d809      	bhi.n	8002cc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	f001 fcd9 	bl	800466e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_InitTick+0x74>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e007      	b.n	8002cd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e004      	b.n	8002cd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
 8002cce:	e001      	b.n	8002cd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000074 	.word	0x20000074
 8002ce4:	2000006c 	.word	0x2000006c
 8002ce8:	20000070 	.word	0x20000070

08002cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_IncTick+0x20>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_IncTick+0x24>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <HAL_IncTick+0x24>)
 8002cfe:	6013      	str	r3, [r2, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000074 	.word	0x20000074
 8002d10:	20000484 	.word	0x20000484

08002d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return uwTick;
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_GetTick+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000484 	.word	0x20000484

08002d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff ffee 	bl	8002d14 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d005      	beq.n	8002d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_Delay+0x44>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d52:	bf00      	nop
 8002d54:	f7ff ffde 	bl	8002d14 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d8f7      	bhi.n	8002d54 <HAL_Delay+0x28>
  {
  }
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000074 	.word	0x20000074

08002d74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3360      	adds	r3, #96	; 0x60
 8002dee:	461a      	mov	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <LL_ADC_SetOffset+0x44>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	03fff000 	.word	0x03fff000

08002e24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3360      	adds	r3, #96	; 0x60
 8002e32:	461a      	mov	r2, r3
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3360      	adds	r3, #96	; 0x60
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3330      	adds	r3, #48	; 0x30
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	4413      	add	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	211f      	movs	r1, #31
 8002ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0e9b      	lsrs	r3, r3, #26
 8002ee4:	f003 011f 	and.w	r1, r3, #31
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3314      	adds	r3, #20
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	0e5b      	lsrs	r3, r3, #25
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	4413      	add	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	0d1b      	lsrs	r3, r3, #20
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2107      	movs	r1, #7
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	401a      	ands	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	0d1b      	lsrs	r3, r3, #20
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f74:	43db      	mvns	r3, r3
 8002f76:	401a      	ands	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0318 	and.w	r3, r3, #24
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f80:	40d9      	lsrs	r1, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	400b      	ands	r3, r1
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	0007ffff 	.word	0x0007ffff

08002fa4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6093      	str	r3, [r2, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003014:	d101      	bne.n	800301a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003038:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800303c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003064:	d101      	bne.n	800306a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030b4:	f043 0202 	orr.w	r2, r3, #2
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <LL_ADC_IsEnabled+0x18>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <LL_ADC_IsEnabled+0x1a>
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d101      	bne.n	8003106 <LL_ADC_IsDisableOngoing+0x18>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <LL_ADC_IsDisableOngoing+0x1a>
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800314c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003150:	f043 0210 	orr.w	r2, r3, #16
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d101      	bne.n	800317c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800319a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d101      	bne.n	80031ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e130      	b.n	8003454 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff fb4d 	bl	80028a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fef1 	bl	8003000 <LL_ADC_IsDeepPowerDownEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fed7 	bl	8002fdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff ff0c 	bl	8003050 <LL_ADC_IsInternalRegulatorEnabled>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fef0 	bl	8003028 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003248:	4b84      	ldr	r3, [pc, #528]	; (800345c <HAL_ADC_Init+0x284>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	099b      	lsrs	r3, r3, #6
 800324e:	4a84      	ldr	r2, [pc, #528]	; (8003460 <HAL_ADC_Init+0x288>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800325c:	e002      	b.n	8003264 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3b01      	subs	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f9      	bne.n	800325e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff feee 	bl	8003050 <LL_ADC_IsInternalRegulatorEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff62 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 80032a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f040 80c9 	bne.w	8003442 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 80c5 	bne.w	8003442 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032c0:	f043 0202 	orr.w	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fefb 	bl	80030c8 <LL_ADC_IsEnabled>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d115      	bne.n	8003304 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d8:	4862      	ldr	r0, [pc, #392]	; (8003464 <HAL_ADC_Init+0x28c>)
 80032da:	f7ff fef5 	bl	80030c8 <LL_ADC_IsEnabled>
 80032de:	4604      	mov	r4, r0
 80032e0:	4861      	ldr	r0, [pc, #388]	; (8003468 <HAL_ADC_Init+0x290>)
 80032e2:	f7ff fef1 	bl	80030c8 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	431c      	orrs	r4, r3
 80032ea:	4860      	ldr	r0, [pc, #384]	; (800346c <HAL_ADC_Init+0x294>)
 80032ec:	f7ff feec 	bl	80030c8 <LL_ADC_IsEnabled>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4323      	orrs	r3, r4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4619      	mov	r1, r3
 80032fe:	485c      	ldr	r0, [pc, #368]	; (8003470 <HAL_ADC_Init+0x298>)
 8003300:	f7ff fd38 	bl	8002d74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7e5b      	ldrb	r3, [r3, #25]
 8003308:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800330e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003314:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800331a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003322:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d106      	bne.n	8003340 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	3b01      	subs	r3, #1
 8003338:	045b      	lsls	r3, r3, #17
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	4b44      	ldr	r3, [pc, #272]	; (8003474 <HAL_ADC_Init+0x29c>)
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	69b9      	ldr	r1, [r7, #24]
 800336c:	430b      	orrs	r3, r1
 800336e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff1c 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 800337a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d13d      	bne.n	80033fe <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d13a      	bne.n	80033fe <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800338c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003394:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033a4:	f023 0302 	bic.w	r3, r3, #2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	69b9      	ldr	r1, [r7, #24]
 80033ae:	430b      	orrs	r3, r1
 80033b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d118      	bne.n	80033ee <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033c6:	f023 0304 	bic.w	r3, r3, #4
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033d2:	4311      	orrs	r1, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033d8:	4311      	orrs	r1, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033de:	430a      	orrs	r2, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	611a      	str	r2, [r3, #16]
 80033ec:	e007      	b.n	80033fe <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10c      	bne.n	8003420 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f023 010f 	bic.w	r1, r3, #15
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	1e5a      	subs	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
 800341e:	e007      	b.n	8003430 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 020f 	bic.w	r2, r2, #15
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f023 0303 	bic.w	r3, r3, #3
 8003438:	f043 0201 	orr.w	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
 8003440:	e007      	b.n	8003452 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003446:	f043 0210 	orr.w	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003452:	7ffb      	ldrb	r3, [r7, #31]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3724      	adds	r7, #36	; 0x24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd90      	pop	{r4, r7, pc}
 800345c:	2000006c 	.word	0x2000006c
 8003460:	053e2d63 	.word	0x053e2d63
 8003464:	50040000 	.word	0x50040000
 8003468:	50040100 	.word	0x50040100
 800346c:	50040200 	.word	0x50040200
 8003470:	50040300 	.word	0x50040300
 8003474:	fff0c007 	.word	0xfff0c007

08003478 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003480:	4857      	ldr	r0, [pc, #348]	; (80035e0 <HAL_ADC_Start+0x168>)
 8003482:	f7ff fd8f 	bl	8002fa4 <LL_ADC_GetMultimode>
 8003486:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fe69 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	f040 809c 	bne.w	80035d2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_Start+0x30>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e097      	b.n	80035d8 <HAL_ADC_Start+0x160>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fe63 	bl	800417c <ADC_Enable>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 8083 	bne.w	80035c8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a42      	ldr	r2, [pc, #264]	; (80035e4 <HAL_ADC_Start+0x16c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d002      	beq.n	80034e6 <HAL_ADC_Start+0x6e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	e000      	b.n	80034e8 <HAL_ADC_Start+0x70>
 80034e6:	4b40      	ldr	r3, [pc, #256]	; (80035e8 <HAL_ADC_Start+0x170>)
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d002      	beq.n	80034f6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350e:	d106      	bne.n	800351e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f023 0206 	bic.w	r2, r3, #6
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	659a      	str	r2, [r3, #88]	; 0x58
 800351c:	e002      	b.n	8003524 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	221c      	movs	r2, #28
 800352a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <HAL_ADC_Start+0x16c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d002      	beq.n	8003544 <HAL_ADC_Start+0xcc>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	e000      	b.n	8003546 <HAL_ADC_Start+0xce>
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_ADC_Start+0x170>)
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	4293      	cmp	r3, r2
 800354c:	d008      	beq.n	8003560 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b05      	cmp	r3, #5
 8003558:	d002      	beq.n	8003560 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b09      	cmp	r3, #9
 800355e:	d114      	bne.n	800358a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003576:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fdc6 	bl	8003114 <LL_ADC_REG_StartConversion>
 8003588:	e025      	b.n	80035d6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <HAL_ADC_Start+0x16c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d002      	beq.n	80035a6 <HAL_ADC_Start+0x12e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	e000      	b.n	80035a8 <HAL_ADC_Start+0x130>
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_ADC_Start+0x170>)
 80035a8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00f      	beq.n	80035d6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
 80035c6:	e006      	b.n	80035d6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035d0:	e001      	b.n	80035d6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	50040300 	.word	0x50040300
 80035e4:	50040100 	.word	0x50040100
 80035e8:	50040000 	.word	0x50040000

080035ec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Stop+0x16>
 80035fe:	2302      	movs	r3, #2
 8003600:	e023      	b.n	800364a <HAL_ADC_Stop+0x5e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800360a:	2103      	movs	r1, #3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fcf9 	bl	8004004 <ADC_ConversionStop>
 8003612:	4603      	mov	r3, r0
 8003614:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d111      	bne.n	8003640 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fe33 	bl	8004288 <ADC_Disable>
 8003622:	4603      	mov	r3, r0
 8003624:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003648:	7bfb      	ldrb	r3, [r7, #15]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800365e:	4866      	ldr	r0, [pc, #408]	; (80037f8 <HAL_ADC_PollForConversion+0x1a4>)
 8003660:	f7ff fca0 	bl	8002fa4 <LL_ADC_GetMultimode>
 8003664:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d102      	bne.n	8003674 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800366e:	2308      	movs	r3, #8
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e02a      	b.n	80036ca <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d002      	beq.n	8003686 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b09      	cmp	r3, #9
 8003684:	d111      	bne.n	80036aa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0a4      	b.n	80037ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80036a4:	2304      	movs	r3, #4
 80036a6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80036a8:	e00f      	b.n	80036ca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036aa:	4853      	ldr	r0, [pc, #332]	; (80037f8 <HAL_ADC_PollForConversion+0x1a4>)
 80036ac:	f7ff fc88 	bl	8002fc0 <LL_ADC_GetMultiDMATransfer>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e093      	b.n	80037ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80036c6:	2304      	movs	r3, #4
 80036c8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80036ca:	f7ff fb23 	bl	8002d14 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036d0:	e021      	b.n	8003716 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d01d      	beq.n	8003716 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036da:	f7ff fb1b 	bl	8002d14 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <HAL_ADC_PollForConversion+0x9c>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d112      	bne.n	8003716 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0204 	orr.w	r2, r3, #4
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e06b      	b.n	80037ee <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4013      	ands	r3, r2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0d6      	beq.n	80036d2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fba6 	bl	8002e86 <LL_ADC_REG_IsTriggerSourceSWStart>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01c      	beq.n	800377a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7e5b      	ldrb	r3, [r3, #25]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d118      	bne.n	800377a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b08      	cmp	r3, #8
 8003754:	d111      	bne.n	800377a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <HAL_ADC_PollForConversion+0x1a8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d002      	beq.n	800378a <HAL_ADC_PollForConversion+0x136>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	e000      	b.n	800378c <HAL_ADC_PollForConversion+0x138>
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_ADC_PollForConversion+0x1ac>)
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	4293      	cmp	r3, r2
 8003792:	d008      	beq.n	80037a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b05      	cmp	r3, #5
 800379e:	d002      	beq.n	80037a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	d104      	bne.n	80037b0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	e00c      	b.n	80037ca <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a11      	ldr	r2, [pc, #68]	; (80037fc <HAL_ADC_PollForConversion+0x1a8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d002      	beq.n	80037c0 <HAL_ADC_PollForConversion+0x16c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	e000      	b.n	80037c2 <HAL_ADC_PollForConversion+0x16e>
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_ADC_PollForConversion+0x1ac>)
 80037c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d104      	bne.n	80037da <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2208      	movs	r2, #8
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e008      	b.n	80037ec <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	220c      	movs	r2, #12
 80037ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	50040300 	.word	0x50040300
 80037fc:	50040100 	.word	0x50040100
 8003800:	50040000 	.word	0x50040000

08003804 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b0b6      	sub	sp, #216	; 0xd8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003830:	2300      	movs	r3, #0
 8003832:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x22>
 800383e:	2302      	movs	r3, #2
 8003840:	e3c9      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x7b6>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fc88 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 83aa 	bne.w	8003fb0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d824      	bhi.n	80038b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	3b02      	subs	r3, #2
 8003872:	2b03      	cmp	r3, #3
 8003874:	d81b      	bhi.n	80038ae <HAL_ADC_ConfigChannel+0x8e>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_ADC_ConfigChannel+0x5c>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	0800388d 	.word	0x0800388d
 8003880:	08003895 	.word	0x08003895
 8003884:	0800389d 	.word	0x0800389d
 8003888:	080038a5 	.word	0x080038a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800388c:	230c      	movs	r3, #12
 800388e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003892:	e010      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003894:	2312      	movs	r3, #18
 8003896:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800389a:	e00c      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800389c:	2318      	movs	r3, #24
 800389e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80038a2:	e008      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80038a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80038ac:	e003      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80038ae:	2306      	movs	r3, #6
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80038b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80038c4:	f7ff faf2 	bl	8002eac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fc49 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 80038d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fc69 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 80038e0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 81a4 	bne.w	8003c36 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 819f 	bne.w	8003c36 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6819      	ldr	r1, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	461a      	mov	r2, r3
 8003906:	f7ff fafd 	bl	8002f04 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	08db      	lsrs	r3, r3, #3
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d00a      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6919      	ldr	r1, [r3, #16]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800393c:	f7ff fa4e 	bl	8002ddc <LL_ADC_SetOffset>
 8003940:	e179      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fa6b 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <HAL_ADC_ConfigChannel+0x14e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fa60 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003964:	4603      	mov	r3, r0
 8003966:	0e9b      	lsrs	r3, r3, #26
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	e01e      	b.n	80039ac <HAL_ADC_ConfigChannel+0x18c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fa55 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 800397a:	4603      	mov	r3, r0
 800397c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800398c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e004      	b.n	80039aa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80039a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x1a4>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0e9b      	lsrs	r3, r3, #26
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	e018      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x1d6>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80039d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80039e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e004      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80039ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d106      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fa24 	bl	8002e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fa08 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x214>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff f9fd 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	0e9b      	lsrs	r3, r3, #26
 8003a2e:	f003 021f 	and.w	r2, r3, #31
 8003a32:	e01e      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x252>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff f9f2 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003a62:	2320      	movs	r3, #32
 8003a64:	e004      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x26a>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0e9b      	lsrs	r3, r3, #26
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	e018      	b.n	8003abc <HAL_ADC_ConfigChannel+0x29c>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003aa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003aae:	2320      	movs	r3, #32
 8003ab0:	e004      	b.n	8003abc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ab6:	fab3 f383 	clz	r3, r3
 8003aba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d106      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff f9c1 	bl	8002e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f9a5 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x2da>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f99a 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003af0:	4603      	mov	r3, r0
 8003af2:	0e9b      	lsrs	r3, r3, #26
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	e01e      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x318>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2102      	movs	r1, #2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff f98f 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	e004      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x330>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	f003 031f 	and.w	r3, r3, #31
 8003b4e:	e014      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x35a>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003b6c:	2320      	movs	r3, #32
 8003b6e:	e004      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003b70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d106      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2102      	movs	r1, #2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff f962 	bl	8002e50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2103      	movs	r1, #3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f946 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x398>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2103      	movs	r1, #3
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff f93b 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	0e9b      	lsrs	r3, r3, #26
 8003bb2:	f003 021f 	and.w	r2, r3, #31
 8003bb6:	e017      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x3c8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2103      	movs	r1, #3
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff f930 	bl	8002e24 <LL_ADC_GetOffsetChannel>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003bda:	2320      	movs	r3, #32
 8003bdc:	e003      	b.n	8003be6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x3e0>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	0e9b      	lsrs	r3, r3, #26
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	e011      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x404>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c10:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003c18:	2320      	movs	r3, #32
 8003c1a:	e003      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d106      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2103      	movs	r1, #3
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff f90d 	bl	8002e50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fa44 	bl	80030c8 <LL_ADC_IsEnabled>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f040 8140 	bne.w	8003ec8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f7ff f981 	bl	8002f5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4a8f      	ldr	r2, [pc, #572]	; (8003e9c <HAL_ADC_ConfigChannel+0x67c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	f040 8131 	bne.w	8003ec8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10b      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x46e>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	0e9b      	lsrs	r3, r3, #26
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f003 031f 	and.w	r3, r3, #31
 8003c82:	2b09      	cmp	r3, #9
 8003c84:	bf94      	ite	ls
 8003c86:	2301      	movls	r3, #1
 8003c88:	2300      	movhi	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e019      	b.n	8003cc2 <HAL_ADC_ConfigChannel+0x4a2>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c96:	fa93 f3a3 	rbit	r3, r3
 8003c9a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003ca6:	2320      	movs	r3, #32
 8003ca8:	e003      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	f003 031f 	and.w	r3, r3, #31
 8003cb8:	2b09      	cmp	r3, #9
 8003cba:	bf94      	ite	ls
 8003cbc:	2301      	movls	r3, #1
 8003cbe:	2300      	movhi	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d079      	beq.n	8003dba <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d107      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x4c2>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	0e9b      	lsrs	r3, r3, #26
 8003cd8:	3301      	adds	r3, #1
 8003cda:	069b      	lsls	r3, r3, #26
 8003cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ce0:	e015      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x4ee>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	e003      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3301      	adds	r3, #1
 8003d08:	069b      	lsls	r3, r3, #26
 8003d0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x50e>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	0e9b      	lsrs	r3, r3, #26
 8003d20:	3301      	adds	r3, #1
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	e017      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x53e>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003d46:	2320      	movs	r3, #32
 8003d48:	e003      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4c:	fab3 f383 	clz	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	ea42 0103 	orr.w	r1, r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x564>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0e9b      	lsrs	r3, r3, #26
 8003d74:	3301      	adds	r3, #1
 8003d76:	f003 021f 	and.w	r2, r3, #31
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4413      	add	r3, r2
 8003d80:	051b      	lsls	r3, r3, #20
 8003d82:	e018      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x596>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	e003      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	f003 021f 	and.w	r2, r3, #31
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003db6:	430b      	orrs	r3, r1
 8003db8:	e081      	b.n	8003ebe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d107      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x5b6>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	0e9b      	lsrs	r3, r3, #26
 8003dcc:	3301      	adds	r3, #1
 8003dce:	069b      	lsls	r3, r3, #26
 8003dd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dd4:	e015      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x5e2>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003dee:	2320      	movs	r3, #32
 8003df0:	e003      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	fab3 f383 	clz	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	069b      	lsls	r3, r3, #26
 8003dfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x602>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	0e9b      	lsrs	r3, r3, #26
 8003e14:	3301      	adds	r3, #1
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	e017      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x632>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	fa93 f3a3 	rbit	r3, r3
 8003e2e:	61bb      	str	r3, [r7, #24]
  return result;
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003e3a:	2320      	movs	r3, #32
 8003e3c:	e003      	b.n	8003e46 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	fab3 f383 	clz	r3, r3
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	ea42 0103 	orr.w	r1, r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10d      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x65e>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	0e9b      	lsrs	r3, r3, #26
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f003 021f 	and.w	r2, r3, #31
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	051b      	lsls	r3, r3, #20
 8003e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	e01e      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x69c>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	60fb      	str	r3, [r7, #12]
  return result;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003e96:	2320      	movs	r3, #32
 8003e98:	e006      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x688>
 8003e9a:	bf00      	nop
 8003e9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f003 021f 	and.w	r2, r3, #31
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3b1e      	subs	r3, #30
 8003eb6:	051b      	lsls	r3, r3, #20
 8003eb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ebc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f7ff f81e 	bl	8002f04 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b44      	ldr	r3, [pc, #272]	; (8003fe0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d07a      	beq.n	8003fca <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ed4:	4843      	ldr	r0, [pc, #268]	; (8003fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ed6:	f7fe ff73 	bl	8002dc0 <LL_ADC_GetCommonPathInternalCh>
 8003eda:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a41      	ldr	r2, [pc, #260]	; (8003fe8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d12c      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ee8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d126      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3c      	ldr	r2, [pc, #240]	; (8003fec <HAL_ADC_ConfigChannel+0x7cc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_ADC_ConfigChannel+0x6e8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a3b      	ldr	r2, [pc, #236]	; (8003ff0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d15d      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f10:	4619      	mov	r1, r3
 8003f12:	4834      	ldr	r0, [pc, #208]	; (8003fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f14:	f7fe ff41 	bl	8002d9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f18:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	099b      	lsrs	r3, r3, #6
 8003f1e:	4a36      	ldr	r2, [pc, #216]	; (8003ff8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	099b      	lsrs	r3, r3, #6
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	4613      	mov	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f32:	e002      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f9      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f40:	e040      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2d      	ldr	r2, [pc, #180]	; (8003ffc <HAL_ADC_ConfigChannel+0x7dc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d118      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d112      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a23      	ldr	r2, [pc, #140]	; (8003fec <HAL_ADC_ConfigChannel+0x7cc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x74c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a22      	ldr	r2, [pc, #136]	; (8003ff0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d12d      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f74:	4619      	mov	r1, r3
 8003f76:	481b      	ldr	r0, [pc, #108]	; (8003fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f78:	f7fe ff0f 	bl	8002d9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f7c:	e024      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1f      	ldr	r2, [pc, #124]	; (8004000 <HAL_ADC_ConfigChannel+0x7e0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d120      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11a      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <HAL_ADC_ConfigChannel+0x7cc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d115      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	480e      	ldr	r0, [pc, #56]	; (8003fe4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003faa:	f7fe fef6 	bl	8002d9a <LL_ADC_SetCommonPathInternalCh>
 8003fae:	e00c      	b.n	8003fca <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003fc2:	e002      	b.n	8003fca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fc8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fd2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	37d8      	adds	r7, #216	; 0xd8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	80080000 	.word	0x80080000
 8003fe4:	50040300 	.word	0x50040300
 8003fe8:	c7520000 	.word	0xc7520000
 8003fec:	50040000 	.word	0x50040000
 8003ff0:	50040200 	.word	0x50040200
 8003ff4:	2000006c 	.word	0x2000006c
 8003ff8:	053e2d63 	.word	0x053e2d63
 8003ffc:	cb840000 	.word	0xcb840000
 8004000:	80000001 	.word	0x80000001

08004004 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff f8a2 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 8004020:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f8c3 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 800402c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d103      	bne.n	800403c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8098 	beq.w	800416c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d02a      	beq.n	80040a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7e5b      	ldrb	r3, [r3, #25]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d126      	bne.n	80040a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	7e1b      	ldrb	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d122      	bne.n	80040a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800405a:	2301      	movs	r3, #1
 800405c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800405e:	e014      	b.n	800408a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4a45      	ldr	r2, [pc, #276]	; (8004178 <ADC_ConversionStop+0x174>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d90d      	bls.n	8004084 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f043 0210 	orr.w	r2, r3, #16
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f043 0201 	orr.w	r2, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e074      	b.n	800416e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d1e3      	bne.n	8004060 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2240      	movs	r2, #64	; 0x40
 800409e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d014      	beq.n	80040d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f85a 	bl	8003164 <LL_ADC_REG_IsConversionOngoing>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff f817 	bl	80030ee <LL_ADC_IsDisableOngoing>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff f836 	bl	800313c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d014      	beq.n	8004100 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff f869 	bl	80031b2 <LL_ADC_INJ_IsConversionOngoing>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe ffff 	bl	80030ee <LL_ADC_IsDisableOngoing>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff f845 	bl	800318a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d005      	beq.n	8004112 <ADC_ConversionStop+0x10e>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d105      	bne.n	8004118 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800410c:	230c      	movs	r3, #12
 800410e:	617b      	str	r3, [r7, #20]
        break;
 8004110:	e005      	b.n	800411e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004112:	2308      	movs	r3, #8
 8004114:	617b      	str	r3, [r7, #20]
        break;
 8004116:	e002      	b.n	800411e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004118:	2304      	movs	r3, #4
 800411a:	617b      	str	r3, [r7, #20]
        break;
 800411c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800411e:	f7fe fdf9 	bl	8002d14 <HAL_GetTick>
 8004122:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004124:	e01b      	b.n	800415e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004126:	f7fe fdf5 	bl	8002d14 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b05      	cmp	r3, #5
 8004132:	d914      	bls.n	800415e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	4013      	ands	r3, r2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	f043 0201 	orr.w	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e007      	b.n	800416e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1dc      	bne.n	8004126 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	a33fffff 	.word	0xa33fffff

0800417c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe ff9b 	bl	80030c8 <LL_ADC_IsEnabled>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d169      	bne.n	800426c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <ADC_Enable+0xfc>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f043 0210 	orr.w	r2, r3, #16
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e055      	b.n	800426e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe ff56 	bl	8003078 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80041cc:	482b      	ldr	r0, [pc, #172]	; (800427c <ADC_Enable+0x100>)
 80041ce:	f7fe fdf7 	bl	8002dc0 <LL_ADC_GetCommonPathInternalCh>
 80041d2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80041d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041dc:	4b28      	ldr	r3, [pc, #160]	; (8004280 <ADC_Enable+0x104>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	4a28      	ldr	r2, [pc, #160]	; (8004284 <ADC_Enable+0x108>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	4613      	mov	r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041f6:	e002      	b.n	80041fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f9      	bne.n	80041f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004204:	f7fe fd86 	bl	8002d14 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800420a:	e028      	b.n	800425e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe ff59 	bl	80030c8 <LL_ADC_IsEnabled>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d104      	bne.n	8004226 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe ff29 	bl	8003078 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004226:	f7fe fd75 	bl	8002d14 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d914      	bls.n	800425e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b01      	cmp	r3, #1
 8004240:	d00d      	beq.n	800425e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f043 0210 	orr.w	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e007      	b.n	800426e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d1cf      	bne.n	800420c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	8000003f 	.word	0x8000003f
 800427c:	50040300 	.word	0x50040300
 8004280:	2000006c 	.word	0x2000006c
 8004284:	053e2d63 	.word	0x053e2d63

08004288 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe ff2a 	bl	80030ee <LL_ADC_IsDisableOngoing>
 800429a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fe ff11 	bl	80030c8 <LL_ADC_IsEnabled>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d047      	beq.n	800433c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d144      	bne.n	800433c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030d 	and.w	r3, r3, #13
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10c      	bne.n	80042da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe feeb 	bl	80030a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2203      	movs	r2, #3
 80042d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042d2:	f7fe fd1f 	bl	8002d14 <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042d8:	e029      	b.n	800432e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042de:	f043 0210 	orr.w	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	f043 0201 	orr.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e023      	b.n	800433e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042f6:	f7fe fd0d 	bl	8002d14 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d914      	bls.n	800432e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	f043 0210 	orr.w	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	f043 0201 	orr.w	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e007      	b.n	800433e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1dc      	bne.n	80042f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <LL_ADC_IsEnabled>:
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <LL_ADC_IsEnabled+0x18>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <LL_ADC_IsEnabled+0x1a>
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_ADC_REG_IsConversionOngoing>:
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d101      	bne.n	8004384 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b09f      	sub	sp, #124	; 0x7c
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e093      	b.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80043ba:	2300      	movs	r3, #0
 80043bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80043be:	2300      	movs	r3, #0
 80043c0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a47      	ldr	r2, [pc, #284]	; (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d102      	bne.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043cc:	4b46      	ldr	r3, [pc, #280]	; (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80043ce:	60bb      	str	r3, [r7, #8]
 80043d0:	e001      	b.n	80043d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10b      	bne.n	80043f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f043 0220 	orr.w	r2, r3, #32
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e072      	b.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff ffb8 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 80043fc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff ffb2 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d154      	bne.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800440e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004410:	2b00      	cmp	r3, #0
 8004412:	d151      	bne.n	80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004414:	4b35      	ldr	r3, [pc, #212]	; (80044ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004416:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d02c      	beq.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004432:	035b      	lsls	r3, r3, #13
 8004434:	430b      	orrs	r3, r1
 8004436:	431a      	orrs	r2, r3
 8004438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800443c:	4829      	ldr	r0, [pc, #164]	; (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800443e:	f7ff ff82 	bl	8004346 <LL_ADC_IsEnabled>
 8004442:	4604      	mov	r4, r0
 8004444:	4828      	ldr	r0, [pc, #160]	; (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004446:	f7ff ff7e 	bl	8004346 <LL_ADC_IsEnabled>
 800444a:	4603      	mov	r3, r0
 800444c:	431c      	orrs	r4, r3
 800444e:	4828      	ldr	r0, [pc, #160]	; (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004450:	f7ff ff79 	bl	8004346 <LL_ADC_IsEnabled>
 8004454:	4603      	mov	r3, r0
 8004456:	4323      	orrs	r3, r4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d137      	bne.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800445c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004464:	f023 030f 	bic.w	r3, r3, #15
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	6811      	ldr	r1, [r2, #0]
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	6892      	ldr	r2, [r2, #8]
 8004470:	430a      	orrs	r2, r1
 8004472:	431a      	orrs	r2, r3
 8004474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004476:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004478:	e028      	b.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800447a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004486:	4817      	ldr	r0, [pc, #92]	; (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004488:	f7ff ff5d 	bl	8004346 <LL_ADC_IsEnabled>
 800448c:	4604      	mov	r4, r0
 800448e:	4816      	ldr	r0, [pc, #88]	; (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004490:	f7ff ff59 	bl	8004346 <LL_ADC_IsEnabled>
 8004494:	4603      	mov	r3, r0
 8004496:	431c      	orrs	r4, r3
 8004498:	4815      	ldr	r0, [pc, #84]	; (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800449a:	f7ff ff54 	bl	8004346 <LL_ADC_IsEnabled>
 800449e:	4603      	mov	r3, r0
 80044a0:	4323      	orrs	r3, r4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d112      	bne.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044ae:	f023 030f 	bic.w	r3, r3, #15
 80044b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044b6:	e009      	b.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80044ca:	e000      	b.n	80044ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80044da:	4618      	mov	r0, r3
 80044dc:	377c      	adds	r7, #124	; 0x7c
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd90      	pop	{r4, r7, pc}
 80044e2:	bf00      	nop
 80044e4:	50040000 	.word	0x50040000
 80044e8:	50040100 	.word	0x50040100
 80044ec:	50040300 	.word	0x50040300
 80044f0:	50040200 	.word	0x50040200

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	db0a      	blt.n	8004582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	490c      	ldr	r1, [pc, #48]	; (80045a4 <__NVIC_SetPriority+0x4c>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	0112      	lsls	r2, r2, #4
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	440b      	add	r3, r1
 800457c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004580:	e00a      	b.n	8004598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	4908      	ldr	r1, [pc, #32]	; (80045a8 <__NVIC_SetPriority+0x50>)
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3b04      	subs	r3, #4
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	440b      	add	r3, r1
 8004596:	761a      	strb	r2, [r3, #24]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000e100 	.word	0xe000e100
 80045a8:	e000ed00 	.word	0xe000ed00

080045ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	; 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f1c3 0307 	rsb	r3, r3, #7
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	bf28      	it	cs
 80045ca:	2304      	movcs	r3, #4
 80045cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d902      	bls.n	80045dc <NVIC_EncodePriority+0x30>
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3b03      	subs	r3, #3
 80045da:	e000      	b.n	80045de <NVIC_EncodePriority+0x32>
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e0:	f04f 32ff 	mov.w	r2, #4294967295
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ea:	43da      	mvns	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	401a      	ands	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f4:	f04f 31ff 	mov.w	r1, #4294967295
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	43d9      	mvns	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004604:	4313      	orrs	r3, r2
         );
}
 8004606:	4618      	mov	r0, r3
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004624:	d301      	bcc.n	800462a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004626:	2301      	movs	r3, #1
 8004628:	e00f      	b.n	800464a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <SysTick_Config+0x40>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004632:	210f      	movs	r1, #15
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	f7ff ff8e 	bl	8004558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <SysTick_Config+0x40>)
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004642:	4b04      	ldr	r3, [pc, #16]	; (8004654 <SysTick_Config+0x40>)
 8004644:	2207      	movs	r2, #7
 8004646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	e000e010 	.word	0xe000e010

08004658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff47 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004680:	f7ff ff5c 	bl	800453c <__NVIC_GetPriorityGrouping>
 8004684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6978      	ldr	r0, [r7, #20]
 800468c:	f7ff ff8e 	bl	80045ac <NVIC_EncodePriority>
 8004690:	4602      	mov	r2, r0
 8004692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff5d 	bl	8004558 <__NVIC_SetPriority>
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff ffb0 	bl	8004614 <SysTick_Config>
 80046b4:	4603      	mov	r3, r0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ce:	e17f      	b.n	80049d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	2101      	movs	r1, #1
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	4013      	ands	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8171 	beq.w	80049ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0303 	and.w	r3, r3, #3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d005      	beq.n	8004700 <HAL_GPIO_Init+0x40>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d130      	bne.n	8004762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	2203      	movs	r2, #3
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004736:	2201      	movs	r2, #1
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	f003 0201 	and.w	r2, r3, #1
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b03      	cmp	r3, #3
 800476c:	d118      	bne.n	80047a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004774:	2201      	movs	r2, #1
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4013      	ands	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	f003 0201 	and.w	r2, r3, #1
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d017      	beq.n	80047dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	2203      	movs	r2, #3
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4013      	ands	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d123      	bne.n	8004830 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	08da      	lsrs	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3208      	adds	r2, #8
 80047f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	220f      	movs	r2, #15
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	08da      	lsrs	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3208      	adds	r2, #8
 800482a:	6939      	ldr	r1, [r7, #16]
 800482c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	2203      	movs	r2, #3
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4013      	ands	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 0203 	and.w	r2, r3, #3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80ac 	beq.w	80049ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004872:	4b5f      	ldr	r3, [pc, #380]	; (80049f0 <HAL_GPIO_Init+0x330>)
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	4a5e      	ldr	r2, [pc, #376]	; (80049f0 <HAL_GPIO_Init+0x330>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6613      	str	r3, [r2, #96]	; 0x60
 800487e:	4b5c      	ldr	r3, [pc, #368]	; (80049f0 <HAL_GPIO_Init+0x330>)
 8004880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800488a:	4a5a      	ldr	r2, [pc, #360]	; (80049f4 <HAL_GPIO_Init+0x334>)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	3302      	adds	r3, #2
 8004892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004896:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	220f      	movs	r2, #15
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048b4:	d025      	beq.n	8004902 <HAL_GPIO_Init+0x242>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4f      	ldr	r2, [pc, #316]	; (80049f8 <HAL_GPIO_Init+0x338>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01f      	beq.n	80048fe <HAL_GPIO_Init+0x23e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4e      	ldr	r2, [pc, #312]	; (80049fc <HAL_GPIO_Init+0x33c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d019      	beq.n	80048fa <HAL_GPIO_Init+0x23a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a4d      	ldr	r2, [pc, #308]	; (8004a00 <HAL_GPIO_Init+0x340>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_GPIO_Init+0x236>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a4c      	ldr	r2, [pc, #304]	; (8004a04 <HAL_GPIO_Init+0x344>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00d      	beq.n	80048f2 <HAL_GPIO_Init+0x232>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a4b      	ldr	r2, [pc, #300]	; (8004a08 <HAL_GPIO_Init+0x348>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <HAL_GPIO_Init+0x22e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a4a      	ldr	r2, [pc, #296]	; (8004a0c <HAL_GPIO_Init+0x34c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_GPIO_Init+0x22a>
 80048e6:	2306      	movs	r3, #6
 80048e8:	e00c      	b.n	8004904 <HAL_GPIO_Init+0x244>
 80048ea:	2307      	movs	r3, #7
 80048ec:	e00a      	b.n	8004904 <HAL_GPIO_Init+0x244>
 80048ee:	2305      	movs	r3, #5
 80048f0:	e008      	b.n	8004904 <HAL_GPIO_Init+0x244>
 80048f2:	2304      	movs	r3, #4
 80048f4:	e006      	b.n	8004904 <HAL_GPIO_Init+0x244>
 80048f6:	2303      	movs	r3, #3
 80048f8:	e004      	b.n	8004904 <HAL_GPIO_Init+0x244>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e002      	b.n	8004904 <HAL_GPIO_Init+0x244>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_GPIO_Init+0x244>
 8004902:	2300      	movs	r3, #0
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	f002 0203 	and.w	r2, r2, #3
 800490a:	0092      	lsls	r2, r2, #2
 800490c:	4093      	lsls	r3, r2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004914:	4937      	ldr	r1, [pc, #220]	; (80049f4 <HAL_GPIO_Init+0x334>)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	3302      	adds	r3, #2
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004922:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <HAL_GPIO_Init+0x350>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004946:	4a32      	ldr	r2, [pc, #200]	; (8004a10 <HAL_GPIO_Init+0x350>)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800494c:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <HAL_GPIO_Init+0x350>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	43db      	mvns	r3, r3
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4013      	ands	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <HAL_GPIO_Init+0x350>)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004976:	4b26      	ldr	r3, [pc, #152]	; (8004a10 <HAL_GPIO_Init+0x350>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	43db      	mvns	r3, r3
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4013      	ands	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800499a:	4a1d      	ldr	r2, [pc, #116]	; (8004a10 <HAL_GPIO_Init+0x350>)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80049a0:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_GPIO_Init+0x350>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049c4:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <HAL_GPIO_Init+0x350>)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	3301      	adds	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f47f ae78 	bne.w	80046d0 <HAL_GPIO_Init+0x10>
  }
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40010000 	.word	0x40010000
 80049f8:	48000400 	.word	0x48000400
 80049fc:	48000800 	.word	0x48000800
 8004a00:	48000c00 	.word	0x48000c00
 8004a04:	48001000 	.word	0x48001000
 8004a08:	48001400 	.word	0x48001400
 8004a0c:	48001800 	.word	0x48001800
 8004a10:	40010400 	.word	0x40010400

08004a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
 8004a20:	4613      	mov	r3, r2
 8004a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a24:	787b      	ldrb	r3, [r7, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a30:	e002      	b.n	8004a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40007000 	.word	0x40007000

08004a60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6e:	d130      	bne.n	8004ad2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a70:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a7c:	d038      	beq.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a86:	4a1e      	ldr	r2, [pc, #120]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2232      	movs	r2, #50	; 0x32
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
 8004a98:	4a1b      	ldr	r2, [pc, #108]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0c9b      	lsrs	r3, r3, #18
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aa4:	e002      	b.n	8004aac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aac:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab8:	d102      	bne.n	8004ac0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f2      	bne.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004acc:	d110      	bne.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e00f      	b.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ade:	d007      	beq.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ae8:	4a05      	ldr	r2, [pc, #20]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40007000 	.word	0x40007000
 8004b04:	2000006c 	.word	0x2000006c
 8004b08:	431bde83 	.word	0x431bde83

08004b0c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e3ca      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1e:	4b97      	ldr	r3, [pc, #604]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b28:	4b94      	ldr	r3, [pc, #592]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80e4 	beq.w	8004d08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_RCC_OscConfig+0x4a>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	f040 808b 	bne.w	8004c64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 8087 	bne.w	8004c64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b56:	4b89      	ldr	r3, [pc, #548]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_RCC_OscConfig+0x62>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e3a2      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1a      	ldr	r2, [r3, #32]
 8004b72:	4b82      	ldr	r3, [pc, #520]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <HAL_RCC_OscConfig+0x7c>
 8004b7e:	4b7f      	ldr	r3, [pc, #508]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b86:	e005      	b.n	8004b94 <HAL_RCC_OscConfig+0x88>
 8004b88:	4b7c      	ldr	r3, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8e:	091b      	lsrs	r3, r3, #4
 8004b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d223      	bcs.n	8004be0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fd55 	bl	800564c <RCC_SetFlashLatencyFromMSIRange>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e383      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bac:	4b73      	ldr	r3, [pc, #460]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a72      	ldr	r2, [pc, #456]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004bb2:	f043 0308 	orr.w	r3, r3, #8
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	496d      	ldr	r1, [pc, #436]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bca:	4b6c      	ldr	r3, [pc, #432]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	4968      	ldr	r1, [pc, #416]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
 8004bde:	e025      	b.n	8004c2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be0:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a65      	ldr	r2, [pc, #404]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004be6:	f043 0308 	orr.w	r3, r3, #8
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b63      	ldr	r3, [pc, #396]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	4960      	ldr	r1, [pc, #384]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bfe:	4b5f      	ldr	r3, [pc, #380]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	495b      	ldr	r1, [pc, #364]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fd15 	bl	800564c <RCC_SetFlashLatencyFromMSIRange>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e343      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c2c:	f000 fc4a 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	4950      	ldr	r1, [pc, #320]	; (8004d80 <HAL_RCC_OscConfig+0x274>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
 8004c48:	4a4e      	ldr	r2, [pc, #312]	; (8004d84 <HAL_RCC_OscConfig+0x278>)
 8004c4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c4c:	4b4e      	ldr	r3, [pc, #312]	; (8004d88 <HAL_RCC_OscConfig+0x27c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fe f80f 	bl	8002c74 <HAL_InitTick>
 8004c56:	4603      	mov	r3, r0
 8004c58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d052      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	e327      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d032      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c6c:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a42      	ldr	r2, [pc, #264]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c78:	f7fe f84c 	bl	8002d14 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c80:	f7fe f848 	bl	8002d14 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e310      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c92:	4b3a      	ldr	r3, [pc, #232]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c9e:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a36      	ldr	r2, [pc, #216]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004ca4:	f043 0308 	orr.w	r3, r3, #8
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4931      	ldr	r1, [pc, #196]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cbc:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	492c      	ldr	r1, [pc, #176]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
 8004cd0:	e01a      	b.n	8004d08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a29      	ldr	r2, [pc, #164]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cde:	f7fe f819 	bl	8002d14 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce6:	f7fe f815 	bl	8002d14 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e2dd      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cf8:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1f0      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x1da>
 8004d04:	e000      	b.n	8004d08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d074      	beq.n	8004dfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d005      	beq.n	8004d26 <HAL_RCC_OscConfig+0x21a>
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d10e      	bne.n	8004d3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d10b      	bne.n	8004d3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d064      	beq.n	8004dfc <HAL_RCC_OscConfig+0x2f0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d160      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e2ba      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d46:	d106      	bne.n	8004d56 <HAL_RCC_OscConfig+0x24a>
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a0b      	ldr	r2, [pc, #44]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	e026      	b.n	8004da4 <HAL_RCC_OscConfig+0x298>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d5e:	d115      	bne.n	8004d8c <HAL_RCC_OscConfig+0x280>
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a02      	ldr	r2, [pc, #8]	; (8004d7c <HAL_RCC_OscConfig+0x270>)
 8004d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	e014      	b.n	8004da4 <HAL_RCC_OscConfig+0x298>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	0800ab5c 	.word	0x0800ab5c
 8004d84:	2000006c 	.word	0x2000006c
 8004d88:	20000070 	.word	0x20000070
 8004d8c:	4ba0      	ldr	r3, [pc, #640]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a9f      	ldr	r2, [pc, #636]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	4b9d      	ldr	r3, [pc, #628]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a9c      	ldr	r2, [pc, #624]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d013      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fd ffb2 	bl	8002d14 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db4:	f7fd ffae 	bl	8002d14 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	; 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e276      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dc6:	4b92      	ldr	r3, [pc, #584]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCC_OscConfig+0x2a8>
 8004dd2:	e014      	b.n	8004dfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fd ff9e 	bl	8002d14 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ddc:	f7fd ff9a 	bl	8002d14 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b64      	cmp	r3, #100	; 0x64
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e262      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dee:	4b88      	ldr	r3, [pc, #544]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x2d0>
 8004dfa:	e000      	b.n	8004dfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d060      	beq.n	8004ecc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_OscConfig+0x310>
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d119      	bne.n	8004e4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d116      	bne.n	8004e4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e1c:	4b7c      	ldr	r3, [pc, #496]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_OscConfig+0x328>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e23f      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e34:	4b76      	ldr	r3, [pc, #472]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	061b      	lsls	r3, r3, #24
 8004e42:	4973      	ldr	r1, [pc, #460]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e48:	e040      	b.n	8004ecc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d023      	beq.n	8004e9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e52:	4b6f      	ldr	r3, [pc, #444]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6e      	ldr	r2, [pc, #440]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fd ff59 	bl	8002d14 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e66:	f7fd ff55 	bl	8002d14 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e21d      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e78:	4b65      	ldr	r3, [pc, #404]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e84:	4b62      	ldr	r3, [pc, #392]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	061b      	lsls	r3, r3, #24
 8004e92:	495f      	ldr	r1, [pc, #380]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
 8004e98:	e018      	b.n	8004ecc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9a:	4b5d      	ldr	r3, [pc, #372]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a5c      	ldr	r2, [pc, #368]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fd ff35 	bl	8002d14 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eae:	f7fd ff31 	bl	8002d14 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e1f9      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ec0:	4b53      	ldr	r3, [pc, #332]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d03c      	beq.n	8004f52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01c      	beq.n	8004f1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee0:	4b4b      	ldr	r3, [pc, #300]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee6:	4a4a      	ldr	r2, [pc, #296]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fd ff10 	bl	8002d14 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef8:	f7fd ff0c 	bl	8002d14 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1d4      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f0a:	4b41      	ldr	r3, [pc, #260]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ef      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x3ec>
 8004f18:	e01b      	b.n	8004f52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f1a:	4b3d      	ldr	r3, [pc, #244]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f20:	4a3b      	ldr	r2, [pc, #236]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fd fef3 	bl	8002d14 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f32:	f7fd feef 	bl	8002d14 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e1b7      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f44:	4b32      	ldr	r3, [pc, #200]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1ef      	bne.n	8004f32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80a6 	beq.w	80050ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f64:	4b2a      	ldr	r3, [pc, #168]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10d      	bne.n	8004f8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f70:	4b27      	ldr	r3, [pc, #156]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8c:	4b21      	ldr	r3, [pc, #132]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d118      	bne.n	8004fca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f98:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa4:	f7fd feb6 	bl	8002d14 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fac:	f7fd feb2 	bl	8002d14 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e17a      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fbe:	4b15      	ldr	r3, [pc, #84]	; (8005014 <HAL_RCC_OscConfig+0x508>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d108      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x4d8>
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd8:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fe2:	e029      	b.n	8005038 <HAL_RCC_OscConfig+0x52c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b05      	cmp	r3, #5
 8004fea:	d115      	bne.n	8005018 <HAL_RCC_OscConfig+0x50c>
 8004fec:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff2:	4a07      	ldr	r2, [pc, #28]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	4a03      	ldr	r2, [pc, #12]	; (8005010 <HAL_RCC_OscConfig+0x504>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800500c:	e014      	b.n	8005038 <HAL_RCC_OscConfig+0x52c>
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000
 8005014:	40007000 	.word	0x40007000
 8005018:	4b9c      	ldr	r3, [pc, #624]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	4a9b      	ldr	r2, [pc, #620]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005028:	4b98      	ldr	r3, [pc, #608]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	4a97      	ldr	r2, [pc, #604]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005030:	f023 0304 	bic.w	r3, r3, #4
 8005034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d016      	beq.n	800506e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fd fe68 	bl	8002d14 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005046:	e00a      	b.n	800505e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005048:	f7fd fe64 	bl	8002d14 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e12a      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505e:	4b8b      	ldr	r3, [pc, #556]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ed      	beq.n	8005048 <HAL_RCC_OscConfig+0x53c>
 800506c:	e015      	b.n	800509a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506e:	f7fd fe51 	bl	8002d14 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005074:	e00a      	b.n	800508c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005076:	f7fd fe4d 	bl	8002d14 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e113      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800508c:	4b7f      	ldr	r3, [pc, #508]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1ed      	bne.n	8005076 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800509a:	7ffb      	ldrb	r3, [r7, #31]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d105      	bne.n	80050ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a0:	4b7a      	ldr	r3, [pc, #488]	; (800528c <HAL_RCC_OscConfig+0x780>)
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	4a79      	ldr	r2, [pc, #484]	; (800528c <HAL_RCC_OscConfig+0x780>)
 80050a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80fe 	beq.w	80052b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	f040 80d0 	bne.w	8005260 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050c0:	4b72      	ldr	r3, [pc, #456]	; (800528c <HAL_RCC_OscConfig+0x780>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 0203 	and.w	r2, r3, #3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d130      	bne.n	8005136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	3b01      	subs	r3, #1
 80050e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d127      	bne.n	8005136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d11f      	bne.n	8005136 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005100:	2a07      	cmp	r2, #7
 8005102:	bf14      	ite	ne
 8005104:	2201      	movne	r2, #1
 8005106:	2200      	moveq	r2, #0
 8005108:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800510a:	4293      	cmp	r3, r2
 800510c:	d113      	bne.n	8005136 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	3b01      	subs	r3, #1
 800511c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d109      	bne.n	8005136 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	3b01      	subs	r3, #1
 8005130:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d06e      	beq.n	8005214 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b0c      	cmp	r3, #12
 800513a:	d069      	beq.n	8005210 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800513c:	4b53      	ldr	r3, [pc, #332]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005148:	4b50      	ldr	r3, [pc, #320]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0ad      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005158:	4b4c      	ldr	r3, [pc, #304]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a4b      	ldr	r2, [pc, #300]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800515e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005162:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005164:	f7fd fdd6 	bl	8002d14 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fd fdd2 	bl	8002d14 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e09a      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800517e:	4b43      	ldr	r3, [pc, #268]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800518a:	4b40      	ldr	r3, [pc, #256]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	4b40      	ldr	r3, [pc, #256]	; (8005290 <HAL_RCC_OscConfig+0x784>)
 8005190:	4013      	ands	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800519a:	3a01      	subs	r2, #1
 800519c:	0112      	lsls	r2, r2, #4
 800519e:	4311      	orrs	r1, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051a4:	0212      	lsls	r2, r2, #8
 80051a6:	4311      	orrs	r1, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051ac:	0852      	lsrs	r2, r2, #1
 80051ae:	3a01      	subs	r2, #1
 80051b0:	0552      	lsls	r2, r2, #21
 80051b2:	4311      	orrs	r1, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051b8:	0852      	lsrs	r2, r2, #1
 80051ba:	3a01      	subs	r2, #1
 80051bc:	0652      	lsls	r2, r2, #25
 80051be:	4311      	orrs	r1, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051c4:	0912      	lsrs	r2, r2, #4
 80051c6:	0452      	lsls	r2, r2, #17
 80051c8:	430a      	orrs	r2, r1
 80051ca:	4930      	ldr	r1, [pc, #192]	; (800528c <HAL_RCC_OscConfig+0x780>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051d0:	4b2e      	ldr	r3, [pc, #184]	; (800528c <HAL_RCC_OscConfig+0x780>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a2d      	ldr	r2, [pc, #180]	; (800528c <HAL_RCC_OscConfig+0x780>)
 80051d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <HAL_RCC_OscConfig+0x780>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a2a      	ldr	r2, [pc, #168]	; (800528c <HAL_RCC_OscConfig+0x780>)
 80051e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051e8:	f7fd fd94 	bl	8002d14 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fd fd90 	bl	8002d14 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e058      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005202:	4b22      	ldr	r3, [pc, #136]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800520e:	e050      	b.n	80052b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e04f      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005214:	4b1d      	ldr	r3, [pc, #116]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d148      	bne.n	80052b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005220:	4b1a      	ldr	r3, [pc, #104]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a19      	ldr	r2, [pc, #100]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800522a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800522c:	4b17      	ldr	r3, [pc, #92]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005236:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005238:	f7fd fd6c 	bl	8002d14 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005240:	f7fd fd68 	bl	8002d14 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e030      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005252:	4b0e      	ldr	r3, [pc, #56]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0f0      	beq.n	8005240 <HAL_RCC_OscConfig+0x734>
 800525e:	e028      	b.n	80052b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d023      	beq.n	80052ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <HAL_RCC_OscConfig+0x780>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a08      	ldr	r2, [pc, #32]	; (800528c <HAL_RCC_OscConfig+0x780>)
 800526c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fd fd4f 	bl	8002d14 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005278:	e00c      	b.n	8005294 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527a:	f7fd fd4b 	bl	8002d14 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d905      	bls.n	8005294 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e013      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
 800528c:	40021000 	.word	0x40021000
 8005290:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005294:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_OscConfig+0x7b0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1ec      	bne.n	800527a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCC_OscConfig+0x7b0>)
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	4905      	ldr	r1, [pc, #20]	; (80052bc <HAL_RCC_OscConfig+0x7b0>)
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCC_OscConfig+0x7b4>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	60cb      	str	r3, [r1, #12]
 80052ac:	e001      	b.n	80052b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40021000 	.word	0x40021000
 80052c0:	feeefffc 	.word	0xfeeefffc

080052c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0e7      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d8:	4b75      	ldr	r3, [pc, #468]	; (80054b0 <HAL_RCC_ClockConfig+0x1ec>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d910      	bls.n	8005308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e6:	4b72      	ldr	r3, [pc, #456]	; (80054b0 <HAL_RCC_ClockConfig+0x1ec>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 0207 	bic.w	r2, r3, #7
 80052ee:	4970      	ldr	r1, [pc, #448]	; (80054b0 <HAL_RCC_ClockConfig+0x1ec>)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b6e      	ldr	r3, [pc, #440]	; (80054b0 <HAL_RCC_ClockConfig+0x1ec>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d001      	beq.n	8005308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0cf      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d010      	beq.n	8005336 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	4b66      	ldr	r3, [pc, #408]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005320:	429a      	cmp	r2, r3
 8005322:	d908      	bls.n	8005336 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005324:	4b63      	ldr	r3, [pc, #396]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4960      	ldr	r1, [pc, #384]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d04c      	beq.n	80053dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d107      	bne.n	800535a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800534a:	4b5a      	ldr	r3, [pc, #360]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d121      	bne.n	800539a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e0a6      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005362:	4b54      	ldr	r3, [pc, #336]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d115      	bne.n	800539a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e09a      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800537a:	4b4e      	ldr	r3, [pc, #312]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e08e      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800538a:	4b4a      	ldr	r3, [pc, #296]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e086      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800539a:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4943      	ldr	r1, [pc, #268]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ac:	f7fd fcb2 	bl	8002d14 <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b4:	f7fd fcae 	bl	8002d14 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e06e      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	4b3a      	ldr	r3, [pc, #232]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 020c 	and.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	429a      	cmp	r2, r3
 80053da:	d1eb      	bne.n	80053b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d010      	beq.n	800540a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d208      	bcs.n	800540a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b2e      	ldr	r3, [pc, #184]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	492b      	ldr	r1, [pc, #172]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800540a:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <HAL_RCC_ClockConfig+0x1ec>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d210      	bcs.n	800543a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005418:	4b25      	ldr	r3, [pc, #148]	; (80054b0 <HAL_RCC_ClockConfig+0x1ec>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f023 0207 	bic.w	r2, r3, #7
 8005420:	4923      	ldr	r1, [pc, #140]	; (80054b0 <HAL_RCC_ClockConfig+0x1ec>)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	4313      	orrs	r3, r2
 8005426:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005428:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <HAL_RCC_ClockConfig+0x1ec>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d001      	beq.n	800543a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e036      	b.n	80054a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005446:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	4918      	ldr	r1, [pc, #96]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4910      	ldr	r1, [pc, #64]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005478:	f000 f824 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	490b      	ldr	r1, [pc, #44]	; (80054b8 <HAL_RCC_ClockConfig+0x1f4>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
 8005494:	4a09      	ldr	r2, [pc, #36]	; (80054bc <HAL_RCC_ClockConfig+0x1f8>)
 8005496:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_ClockConfig+0x1fc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f7fd fbe9 	bl	8002c74 <HAL_InitTick>
 80054a2:	4603      	mov	r3, r0
 80054a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80054a6:	7afb      	ldrb	r3, [r7, #11]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40022000 	.word	0x40022000
 80054b4:	40021000 	.word	0x40021000
 80054b8:	0800ab5c 	.word	0x0800ab5c
 80054bc:	2000006c 	.word	0x2000006c
 80054c0:	20000070 	.word	0x20000070

080054c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b089      	sub	sp, #36	; 0x24
 80054c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	2300      	movs	r3, #0
 80054d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d2:	4b3e      	ldr	r3, [pc, #248]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054dc:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x34>
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b0c      	cmp	r3, #12
 80054f0:	d121      	bne.n	8005536 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d11e      	bne.n	8005536 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054f8:	4b34      	ldr	r3, [pc, #208]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b00      	cmp	r3, #0
 8005502:	d107      	bne.n	8005514 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005504:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	e005      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005514:	4b2d      	ldr	r3, [pc, #180]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005520:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005528:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10d      	bne.n	800554c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005534:	e00a      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	2b04      	cmp	r3, #4
 800553a:	d102      	bne.n	8005542 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800553c:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	e004      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d101      	bne.n	800554c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005548:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800554a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b0c      	cmp	r3, #12
 8005550:	d134      	bne.n	80055bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005552:	4b1e      	ldr	r3, [pc, #120]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d003      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0xa6>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d003      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0xac>
 8005568:	e005      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800556c:	617b      	str	r3, [r7, #20]
      break;
 800556e:	e005      	b.n	800557c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005570:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005572:	617b      	str	r3, [r7, #20]
      break;
 8005574:	e002      	b.n	800557c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	617b      	str	r3, [r7, #20]
      break;
 800557a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800557c:	4b13      	ldr	r3, [pc, #76]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	3301      	adds	r3, #1
 8005588:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800558a:	4b10      	ldr	r3, [pc, #64]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	0a1b      	lsrs	r3, r3, #8
 8005590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	fb03 f202 	mul.w	r2, r3, r2
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <HAL_RCC_GetSysClockFreq+0x108>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	0e5b      	lsrs	r3, r3, #25
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	3301      	adds	r3, #1
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055bc:	69bb      	ldr	r3, [r7, #24]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3724      	adds	r7, #36	; 0x24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40021000 	.word	0x40021000
 80055d0:	0800ab74 	.word	0x0800ab74
 80055d4:	00f42400 	.word	0x00f42400
 80055d8:	007a1200 	.word	0x007a1200

080055dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055e0:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055e2:	681b      	ldr	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	2000006c 	.word	0x2000006c

080055f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055f8:	f7ff fff0 	bl	80055dc <HAL_RCC_GetHCLKFreq>
 80055fc:	4602      	mov	r2, r0
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	4904      	ldr	r1, [pc, #16]	; (800561c <HAL_RCC_GetPCLK1Freq+0x28>)
 800560a:	5ccb      	ldrb	r3, [r1, r3]
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005614:	4618      	mov	r0, r3
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	0800ab6c 	.word	0x0800ab6c

08005620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005624:	f7ff ffda 	bl	80055dc <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0adb      	lsrs	r3, r3, #11
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4904      	ldr	r1, [pc, #16]	; (8005648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40021000 	.word	0x40021000
 8005648:	0800ab6c 	.word	0x0800ab6c

0800564c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005658:	4b2a      	ldr	r3, [pc, #168]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800565a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005664:	f7ff f9ee 	bl	8004a44 <HAL_PWREx_GetVoltageRange>
 8005668:	6178      	str	r0, [r7, #20]
 800566a:	e014      	b.n	8005696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800566e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005670:	4a24      	ldr	r2, [pc, #144]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005676:	6593      	str	r3, [r2, #88]	; 0x58
 8005678:	4b22      	ldr	r3, [pc, #136]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005684:	f7ff f9de 	bl	8004a44 <HAL_PWREx_GetVoltageRange>
 8005688:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569c:	d10b      	bne.n	80056b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b80      	cmp	r3, #128	; 0x80
 80056a2:	d919      	bls.n	80056d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2ba0      	cmp	r3, #160	; 0xa0
 80056a8:	d902      	bls.n	80056b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056aa:	2302      	movs	r3, #2
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	e013      	b.n	80056d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056b0:	2301      	movs	r3, #1
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	e010      	b.n	80056d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b80      	cmp	r3, #128	; 0x80
 80056ba:	d902      	bls.n	80056c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056bc:	2303      	movs	r3, #3
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	e00a      	b.n	80056d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d102      	bne.n	80056ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056c8:	2302      	movs	r3, #2
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	e004      	b.n	80056d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d101      	bne.n	80056d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056d4:	2301      	movs	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f023 0207 	bic.w	r2, r3, #7
 80056e0:	4909      	ldr	r1, [pc, #36]	; (8005708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056e8:	4b07      	ldr	r3, [pc, #28]	; (8005708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d001      	beq.n	80056fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40021000 	.word	0x40021000
 8005708:	40022000 	.word	0x40022000

0800570c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005714:	2300      	movs	r3, #0
 8005716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005718:	2300      	movs	r3, #0
 800571a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005724:	2b00      	cmp	r3, #0
 8005726:	d041      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005730:	d02a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005732:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005736:	d824      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800573c:	d008      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800573e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005742:	d81e      	bhi.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574c:	d010      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800574e:	e018      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005750:	4b86      	ldr	r3, [pc, #536]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a85      	ldr	r2, [pc, #532]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800575c:	e015      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fabb 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800576e:	e00c      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3320      	adds	r3, #32
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fba6 	bl	8005ec8 <RCCEx_PLLSAI2_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005780:	e003      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	74fb      	strb	r3, [r7, #19]
      break;
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005790:	4b76      	ldr	r3, [pc, #472]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800579e:	4973      	ldr	r1, [pc, #460]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057a6:	e001      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d041      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057c0:	d02a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057c6:	d824      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057cc:	d008      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057d2:	d81e      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00a      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80057d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057dc:	d010      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057de:	e018      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057e0:	4b62      	ldr	r3, [pc, #392]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a61      	ldr	r2, [pc, #388]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057ec:	e015      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2100      	movs	r1, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fa73 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 80057fa:	4603      	mov	r3, r0
 80057fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057fe:	e00c      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3320      	adds	r3, #32
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fb5e 	bl	8005ec8 <RCCEx_PLLSAI2_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005810:	e003      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	74fb      	strb	r3, [r7, #19]
      break;
 8005816:	e000      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005820:	4b52      	ldr	r3, [pc, #328]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800582e:	494f      	ldr	r1, [pc, #316]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005836:	e001      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a0 	beq.w	800598a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800584a:	2300      	movs	r3, #0
 800584c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00d      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005864:	4b41      	ldr	r3, [pc, #260]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	4a40      	ldr	r2, [pc, #256]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586e:	6593      	str	r3, [r2, #88]	; 0x58
 8005870:	4b3e      	ldr	r3, [pc, #248]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587c:	2301      	movs	r3, #1
 800587e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005880:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a3a      	ldr	r2, [pc, #232]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800588c:	f7fd fa42 	bl	8002d14 <HAL_GetTick>
 8005890:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005892:	e009      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005894:	f7fd fa3e 	bl	8002d14 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d902      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	74fb      	strb	r3, [r7, #19]
        break;
 80058a6:	e005      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058a8:	4b31      	ldr	r3, [pc, #196]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ef      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d15c      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058ba:	4b2c      	ldr	r3, [pc, #176]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01f      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d019      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058d8:	4b24      	ldr	r3, [pc, #144]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058e4:	4b21      	ldr	r3, [pc, #132]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	4a20      	ldr	r2, [pc, #128]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058f4:	4b1d      	ldr	r3, [pc, #116]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	4a1c      	ldr	r2, [pc, #112]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005904:	4a19      	ldr	r2, [pc, #100]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fd f9fd 	bl	8002d14 <HAL_GetTick>
 800591a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800591c:	e00b      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591e:	f7fd f9f9 	bl	8002d14 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f241 3288 	movw	r2, #5000	; 0x1388
 800592c:	4293      	cmp	r3, r2
 800592e:	d902      	bls.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	74fb      	strb	r3, [r7, #19]
            break;
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005936:	4b0d      	ldr	r3, [pc, #52]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0ec      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10c      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800594a:	4b08      	ldr	r3, [pc, #32]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595a:	4904      	ldr	r1, [pc, #16]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005962:	e009      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005964:	7cfb      	ldrb	r3, [r7, #19]
 8005966:	74bb      	strb	r3, [r7, #18]
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
 8005970:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005978:	7c7b      	ldrb	r3, [r7, #17]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597e:	4b9e      	ldr	r3, [pc, #632]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	4a9d      	ldr	r2, [pc, #628]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005988:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005996:	4b98      	ldr	r3, [pc, #608]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f023 0203 	bic.w	r2, r3, #3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	4994      	ldr	r1, [pc, #592]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059b8:	4b8f      	ldr	r3, [pc, #572]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f023 020c 	bic.w	r2, r3, #12
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	498c      	ldr	r1, [pc, #560]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059da:	4b87      	ldr	r3, [pc, #540]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	4983      	ldr	r1, [pc, #524]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059fc:	4b7e      	ldr	r3, [pc, #504]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	497b      	ldr	r1, [pc, #492]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a1e:	4b76      	ldr	r3, [pc, #472]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2c:	4972      	ldr	r1, [pc, #456]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a40:	4b6d      	ldr	r3, [pc, #436]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	496a      	ldr	r1, [pc, #424]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a62:	4b65      	ldr	r3, [pc, #404]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	4961      	ldr	r1, [pc, #388]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a84:	4b5c      	ldr	r3, [pc, #368]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a92:	4959      	ldr	r1, [pc, #356]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aa6:	4b54      	ldr	r3, [pc, #336]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	4950      	ldr	r1, [pc, #320]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	4948      	ldr	r1, [pc, #288]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005aea:	4b43      	ldr	r3, [pc, #268]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af8:	493f      	ldr	r1, [pc, #252]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d028      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b0c:	4b3a      	ldr	r3, [pc, #232]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1a:	4937      	ldr	r1, [pc, #220]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2a:	d106      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b2c:	4b32      	ldr	r3, [pc, #200]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a31      	ldr	r2, [pc, #196]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b36:	60d3      	str	r3, [r2, #12]
 8005b38:	e011      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b42:	d10c      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	2101      	movs	r1, #1
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f8c8 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b5a:	7cfb      	ldrb	r3, [r7, #19]
 8005b5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d028      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b6a:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	491f      	ldr	r1, [pc, #124]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b88:	d106      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b94:	60d3      	str	r3, [r2, #12]
 8005b96:	e011      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 f899 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005bb8:	7cfb      	ldrb	r3, [r7, #19]
 8005bba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d02b      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd6:	4908      	ldr	r1, [pc, #32]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be6:	d109      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a02      	ldr	r2, [pc, #8]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf2:	60d3      	str	r3, [r2, #12]
 8005bf4:	e014      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 f867 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d02f      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c2c:	4b2b      	ldr	r3, [pc, #172]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3a:	4928      	ldr	r1, [pc, #160]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c4a:	d10d      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	2102      	movs	r1, #2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f844 	bl	8005ce0 <RCCEx_PLLSAI1_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c5c:	7cfb      	ldrb	r3, [r7, #19]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d014      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c62:	7cfb      	ldrb	r3, [r7, #19]
 8005c64:	74bb      	strb	r3, [r7, #18]
 8005c66:	e011      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c70:	d10c      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3320      	adds	r3, #32
 8005c76:	2102      	movs	r1, #2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f925 	bl	8005ec8 <RCCEx_PLLSAI2_Config>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c82:	7cfb      	ldrb	r3, [r7, #19]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c88:	7cfb      	ldrb	r3, [r7, #19]
 8005c8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c98:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca6:	490d      	ldr	r1, [pc, #52]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cba:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cca:	4904      	ldr	r1, [pc, #16]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005cd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40021000 	.word	0x40021000

08005ce0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cee:	4b75      	ldr	r3, [pc, #468]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d018      	beq.n	8005d2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cfa:	4b72      	ldr	r3, [pc, #456]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0203 	and.w	r2, r3, #3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d10d      	bne.n	8005d26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d12:	4b6c      	ldr	r3, [pc, #432]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
       ||
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d047      	beq.n	8005db6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
 8005d2a:	e044      	b.n	8005db6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d018      	beq.n	8005d66 <RCCEx_PLLSAI1_Config+0x86>
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d825      	bhi.n	8005d84 <RCCEx_PLLSAI1_Config+0xa4>
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d002      	beq.n	8005d42 <RCCEx_PLLSAI1_Config+0x62>
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d009      	beq.n	8005d54 <RCCEx_PLLSAI1_Config+0x74>
 8005d40:	e020      	b.n	8005d84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d42:	4b60      	ldr	r3, [pc, #384]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11d      	bne.n	8005d8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d52:	e01a      	b.n	8005d8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d54:	4b5b      	ldr	r3, [pc, #364]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d116      	bne.n	8005d8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d64:	e013      	b.n	8005d8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d66:	4b57      	ldr	r3, [pc, #348]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d72:	4b54      	ldr	r3, [pc, #336]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d109      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d82:	e006      	b.n	8005d92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e004      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e002      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10d      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d9a:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6819      	ldr	r1, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	430b      	orrs	r3, r1
 8005db0:	4944      	ldr	r1, [pc, #272]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d17d      	bne.n	8005eb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005dbc:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a40      	ldr	r2, [pc, #256]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc8:	f7fc ffa4 	bl	8002d14 <HAL_GetTick>
 8005dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dce:	e009      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dd0:	f7fc ffa0 	bl	8002d14 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d902      	bls.n	8005de4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	73fb      	strb	r3, [r7, #15]
        break;
 8005de2:	e005      	b.n	8005df0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005de4:	4b37      	ldr	r3, [pc, #220]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ef      	bne.n	8005dd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d160      	bne.n	8005eb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d111      	bne.n	8005e20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dfc:	4b31      	ldr	r3, [pc, #196]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6892      	ldr	r2, [r2, #8]
 8005e0c:	0211      	lsls	r1, r2, #8
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68d2      	ldr	r2, [r2, #12]
 8005e12:	0912      	lsrs	r2, r2, #4
 8005e14:	0452      	lsls	r2, r2, #17
 8005e16:	430a      	orrs	r2, r1
 8005e18:	492a      	ldr	r1, [pc, #168]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	610b      	str	r3, [r1, #16]
 8005e1e:	e027      	b.n	8005e70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d112      	bne.n	8005e4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e26:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6892      	ldr	r2, [r2, #8]
 8005e36:	0211      	lsls	r1, r2, #8
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6912      	ldr	r2, [r2, #16]
 8005e3c:	0852      	lsrs	r2, r2, #1
 8005e3e:	3a01      	subs	r2, #1
 8005e40:	0552      	lsls	r2, r2, #21
 8005e42:	430a      	orrs	r2, r1
 8005e44:	491f      	ldr	r1, [pc, #124]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	610b      	str	r3, [r1, #16]
 8005e4a:	e011      	b.n	8005e70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6892      	ldr	r2, [r2, #8]
 8005e5c:	0211      	lsls	r1, r2, #8
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6952      	ldr	r2, [r2, #20]
 8005e62:	0852      	lsrs	r2, r2, #1
 8005e64:	3a01      	subs	r2, #1
 8005e66:	0652      	lsls	r2, r2, #25
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	4916      	ldr	r1, [pc, #88]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a13      	ldr	r2, [pc, #76]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fc ff4a 	bl	8002d14 <HAL_GetTick>
 8005e80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e82:	e009      	b.n	8005e98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e84:	f7fc ff46 	bl	8002d14 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d902      	bls.n	8005e98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	73fb      	strb	r3, [r7, #15]
          break;
 8005e96:	e005      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0ef      	beq.n	8005e84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	4904      	ldr	r1, [pc, #16]	; (8005ec4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40021000 	.word	0x40021000

08005ec8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ed6:	4b6a      	ldr	r3, [pc, #424]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d018      	beq.n	8005f14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ee2:	4b67      	ldr	r3, [pc, #412]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0203 	and.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d10d      	bne.n	8005f0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005efa:	4b61      	ldr	r3, [pc, #388]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	091b      	lsrs	r3, r3, #4
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
       ||
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d047      	beq.n	8005f9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	73fb      	strb	r3, [r7, #15]
 8005f12:	e044      	b.n	8005f9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d018      	beq.n	8005f4e <RCCEx_PLLSAI2_Config+0x86>
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d825      	bhi.n	8005f6c <RCCEx_PLLSAI2_Config+0xa4>
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d002      	beq.n	8005f2a <RCCEx_PLLSAI2_Config+0x62>
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d009      	beq.n	8005f3c <RCCEx_PLLSAI2_Config+0x74>
 8005f28:	e020      	b.n	8005f6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f2a:	4b55      	ldr	r3, [pc, #340]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11d      	bne.n	8005f72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f3a:	e01a      	b.n	8005f72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f3c:	4b50      	ldr	r3, [pc, #320]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d116      	bne.n	8005f76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f4c:	e013      	b.n	8005f76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f4e:	4b4c      	ldr	r3, [pc, #304]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10f      	bne.n	8005f7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f5a:	4b49      	ldr	r3, [pc, #292]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f6a:	e006      	b.n	8005f7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f70:	e004      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f82:	4b3f      	ldr	r3, [pc, #252]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	430b      	orrs	r3, r1
 8005f98:	4939      	ldr	r1, [pc, #228]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d167      	bne.n	8006074 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fa4:	4b36      	ldr	r3, [pc, #216]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a35      	ldr	r2, [pc, #212]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb0:	f7fc feb0 	bl	8002d14 <HAL_GetTick>
 8005fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fb6:	e009      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fb8:	f7fc feac 	bl	8002d14 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d902      	bls.n	8005fcc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8005fca:	e005      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fcc:	4b2c      	ldr	r3, [pc, #176]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1ef      	bne.n	8005fb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d14a      	bne.n	8006074 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d111      	bne.n	8006008 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fe4:	4b26      	ldr	r3, [pc, #152]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6892      	ldr	r2, [r2, #8]
 8005ff4:	0211      	lsls	r1, r2, #8
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68d2      	ldr	r2, [r2, #12]
 8005ffa:	0912      	lsrs	r2, r2, #4
 8005ffc:	0452      	lsls	r2, r2, #17
 8005ffe:	430a      	orrs	r2, r1
 8006000:	491f      	ldr	r1, [pc, #124]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006002:	4313      	orrs	r3, r2
 8006004:	614b      	str	r3, [r1, #20]
 8006006:	e011      	b.n	800602c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006008:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006010:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6892      	ldr	r2, [r2, #8]
 8006018:	0211      	lsls	r1, r2, #8
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6912      	ldr	r2, [r2, #16]
 800601e:	0852      	lsrs	r2, r2, #1
 8006020:	3a01      	subs	r2, #1
 8006022:	0652      	lsls	r2, r2, #25
 8006024:	430a      	orrs	r2, r1
 8006026:	4916      	ldr	r1, [pc, #88]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006028:	4313      	orrs	r3, r2
 800602a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800602c:	4b14      	ldr	r3, [pc, #80]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a13      	ldr	r2, [pc, #76]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006036:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006038:	f7fc fe6c 	bl	8002d14 <HAL_GetTick>
 800603c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800603e:	e009      	b.n	8006054 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006040:	f7fc fe68 	bl	8002d14 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d902      	bls.n	8006054 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	73fb      	strb	r3, [r7, #15]
          break;
 8006052:	e005      	b.n	8006060 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0ef      	beq.n	8006040 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006068:	695a      	ldr	r2, [r3, #20]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4904      	ldr	r1, [pc, #16]	; (8006080 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006070:	4313      	orrs	r3, r2
 8006072:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000

08006084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e040      	b.n	8006118 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fc fc62 	bl	8002970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2224      	movs	r2, #36	; 0x24
 80060b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fc34 	bl	8006938 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f979 	bl	80063c8 <UART_SetConfig>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e01b      	b.n	8006118 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fcb3 	bl	8006a7c <UART_CheckIdleState>
 8006116:	4603      	mov	r3, r0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006134:	2b20      	cmp	r3, #32
 8006136:	d178      	bne.n	800622a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_UART_Transmit+0x24>
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e071      	b.n	800622c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2221      	movs	r2, #33	; 0x21
 8006154:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006156:	f7fc fddd 	bl	8002d14 <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006174:	d108      	bne.n	8006188 <HAL_UART_Transmit+0x68>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e003      	b.n	8006190 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800618c:	2300      	movs	r3, #0
 800618e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006190:	e030      	b.n	80061f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2200      	movs	r2, #0
 800619a:	2180      	movs	r1, #128	; 0x80
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fd15 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e03c      	b.n	800622c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10b      	bne.n	80061d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	881a      	ldrh	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c4:	b292      	uxth	r2, r2
 80061c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	3302      	adds	r3, #2
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	e008      	b.n	80061e2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	b292      	uxth	r2, r2
 80061da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	3301      	adds	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1c8      	bne.n	8006192 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2200      	movs	r2, #0
 8006208:	2140      	movs	r1, #64	; 0x40
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fcde 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e005      	b.n	800622c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	e000      	b.n	800622c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800622a:	2302      	movs	r3, #2
  }
}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08a      	sub	sp, #40	; 0x28
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	4613      	mov	r3, r2
 8006242:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800624a:	2b20      	cmp	r3, #32
 800624c:	f040 80b6 	bne.w	80063bc <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_UART_Receive+0x28>
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0ae      	b.n	80063be <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2222      	movs	r2, #34	; 0x22
 800626c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006276:	f7fc fd4d 	bl	8002d14 <HAL_GetTick>
 800627a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006294:	d10e      	bne.n	80062b4 <HAL_UART_Receive+0x80>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <HAL_UART_Receive+0x76>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80062a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062a8:	e02d      	b.n	8006306 <HAL_UART_Receive+0xd2>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	22ff      	movs	r2, #255	; 0xff
 80062ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062b2:	e028      	b.n	8006306 <HAL_UART_Receive+0xd2>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10d      	bne.n	80062d8 <HAL_UART_Receive+0xa4>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_UART_Receive+0x9a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	22ff      	movs	r2, #255	; 0xff
 80062c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062cc:	e01b      	b.n	8006306 <HAL_UART_Receive+0xd2>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	227f      	movs	r2, #127	; 0x7f
 80062d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062d6:	e016      	b.n	8006306 <HAL_UART_Receive+0xd2>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062e0:	d10d      	bne.n	80062fe <HAL_UART_Receive+0xca>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d104      	bne.n	80062f4 <HAL_UART_Receive+0xc0>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	227f      	movs	r2, #127	; 0x7f
 80062ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062f2:	e008      	b.n	8006306 <HAL_UART_Receive+0xd2>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	223f      	movs	r2, #63	; 0x3f
 80062f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062fc:	e003      	b.n	8006306 <HAL_UART_Receive+0xd2>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800630c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006316:	d108      	bne.n	800632a <HAL_UART_Receive+0xf6>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	e003      	b.n	8006332 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006332:	e037      	b.n	80063a4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2200      	movs	r2, #0
 800633c:	2120      	movs	r1, #32
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fc44 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e033      	b.n	80063be <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10c      	bne.n	8006376 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006362:	b29a      	uxth	r2, r3
 8006364:	8a7b      	ldrh	r3, [r7, #18]
 8006366:	4013      	ands	r3, r2
 8006368:	b29a      	uxth	r2, r3
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	3302      	adds	r3, #2
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	e00d      	b.n	8006392 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800637c:	b29b      	uxth	r3, r3
 800637e:	b2da      	uxtb	r2, r3
 8006380:	8a7b      	ldrh	r3, [r7, #18]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	4013      	ands	r3, r2
 8006386:	b2da      	uxtb	r2, r3
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	3301      	adds	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1c1      	bne.n	8006334 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063cc:	b08a      	sub	sp, #40	; 0x28
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4ba4      	ldr	r3, [pc, #656]	; (8006688 <UART_SetConfig+0x2c0>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006400:	430b      	orrs	r3, r1
 8006402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a99      	ldr	r2, [pc, #612]	; (800668c <UART_SetConfig+0x2c4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006430:	4313      	orrs	r3, r2
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a90      	ldr	r2, [pc, #576]	; (8006690 <UART_SetConfig+0x2c8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d126      	bne.n	80064a0 <UART_SetConfig+0xd8>
 8006452:	4b90      	ldr	r3, [pc, #576]	; (8006694 <UART_SetConfig+0x2cc>)
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	2b03      	cmp	r3, #3
 800645e:	d81b      	bhi.n	8006498 <UART_SetConfig+0xd0>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <UART_SetConfig+0xa0>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	08006479 	.word	0x08006479
 800646c:	08006489 	.word	0x08006489
 8006470:	08006481 	.word	0x08006481
 8006474:	08006491 	.word	0x08006491
 8006478:	2301      	movs	r3, #1
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800647e:	e116      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006480:	2302      	movs	r3, #2
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006486:	e112      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800648e:	e10e      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006496:	e10a      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800649e:	e106      	b.n	80066ae <UART_SetConfig+0x2e6>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a7c      	ldr	r2, [pc, #496]	; (8006698 <UART_SetConfig+0x2d0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d138      	bne.n	800651c <UART_SetConfig+0x154>
 80064aa:	4b7a      	ldr	r3, [pc, #488]	; (8006694 <UART_SetConfig+0x2cc>)
 80064ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b0:	f003 030c 	and.w	r3, r3, #12
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	d82d      	bhi.n	8006514 <UART_SetConfig+0x14c>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <UART_SetConfig+0xf8>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064f5 	.word	0x080064f5
 80064c4:	08006515 	.word	0x08006515
 80064c8:	08006515 	.word	0x08006515
 80064cc:	08006515 	.word	0x08006515
 80064d0:	08006505 	.word	0x08006505
 80064d4:	08006515 	.word	0x08006515
 80064d8:	08006515 	.word	0x08006515
 80064dc:	08006515 	.word	0x08006515
 80064e0:	080064fd 	.word	0x080064fd
 80064e4:	08006515 	.word	0x08006515
 80064e8:	08006515 	.word	0x08006515
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800650d 	.word	0x0800650d
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064fa:	e0d8      	b.n	80066ae <UART_SetConfig+0x2e6>
 80064fc:	2302      	movs	r3, #2
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006502:	e0d4      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006504:	2304      	movs	r3, #4
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650a:	e0d0      	b.n	80066ae <UART_SetConfig+0x2e6>
 800650c:	2308      	movs	r3, #8
 800650e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006512:	e0cc      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006514:	2310      	movs	r3, #16
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651a:	e0c8      	b.n	80066ae <UART_SetConfig+0x2e6>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a5e      	ldr	r2, [pc, #376]	; (800669c <UART_SetConfig+0x2d4>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d125      	bne.n	8006572 <UART_SetConfig+0x1aa>
 8006526:	4b5b      	ldr	r3, [pc, #364]	; (8006694 <UART_SetConfig+0x2cc>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006530:	2b30      	cmp	r3, #48	; 0x30
 8006532:	d016      	beq.n	8006562 <UART_SetConfig+0x19a>
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d818      	bhi.n	800656a <UART_SetConfig+0x1a2>
 8006538:	2b20      	cmp	r3, #32
 800653a:	d00a      	beq.n	8006552 <UART_SetConfig+0x18a>
 800653c:	2b20      	cmp	r3, #32
 800653e:	d814      	bhi.n	800656a <UART_SetConfig+0x1a2>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <UART_SetConfig+0x182>
 8006544:	2b10      	cmp	r3, #16
 8006546:	d008      	beq.n	800655a <UART_SetConfig+0x192>
 8006548:	e00f      	b.n	800656a <UART_SetConfig+0x1a2>
 800654a:	2300      	movs	r3, #0
 800654c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006550:	e0ad      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006552:	2302      	movs	r3, #2
 8006554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006558:	e0a9      	b.n	80066ae <UART_SetConfig+0x2e6>
 800655a:	2304      	movs	r3, #4
 800655c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006560:	e0a5      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006562:	2308      	movs	r3, #8
 8006564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006568:	e0a1      	b.n	80066ae <UART_SetConfig+0x2e6>
 800656a:	2310      	movs	r3, #16
 800656c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006570:	e09d      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a4a      	ldr	r2, [pc, #296]	; (80066a0 <UART_SetConfig+0x2d8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d125      	bne.n	80065c8 <UART_SetConfig+0x200>
 800657c:	4b45      	ldr	r3, [pc, #276]	; (8006694 <UART_SetConfig+0x2cc>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006582:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006586:	2bc0      	cmp	r3, #192	; 0xc0
 8006588:	d016      	beq.n	80065b8 <UART_SetConfig+0x1f0>
 800658a:	2bc0      	cmp	r3, #192	; 0xc0
 800658c:	d818      	bhi.n	80065c0 <UART_SetConfig+0x1f8>
 800658e:	2b80      	cmp	r3, #128	; 0x80
 8006590:	d00a      	beq.n	80065a8 <UART_SetConfig+0x1e0>
 8006592:	2b80      	cmp	r3, #128	; 0x80
 8006594:	d814      	bhi.n	80065c0 <UART_SetConfig+0x1f8>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <UART_SetConfig+0x1d8>
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d008      	beq.n	80065b0 <UART_SetConfig+0x1e8>
 800659e:	e00f      	b.n	80065c0 <UART_SetConfig+0x1f8>
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065a6:	e082      	b.n	80066ae <UART_SetConfig+0x2e6>
 80065a8:	2302      	movs	r3, #2
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ae:	e07e      	b.n	80066ae <UART_SetConfig+0x2e6>
 80065b0:	2304      	movs	r3, #4
 80065b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b6:	e07a      	b.n	80066ae <UART_SetConfig+0x2e6>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065be:	e076      	b.n	80066ae <UART_SetConfig+0x2e6>
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c6:	e072      	b.n	80066ae <UART_SetConfig+0x2e6>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a35      	ldr	r2, [pc, #212]	; (80066a4 <UART_SetConfig+0x2dc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d12a      	bne.n	8006628 <UART_SetConfig+0x260>
 80065d2:	4b30      	ldr	r3, [pc, #192]	; (8006694 <UART_SetConfig+0x2cc>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e0:	d01a      	beq.n	8006618 <UART_SetConfig+0x250>
 80065e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e6:	d81b      	bhi.n	8006620 <UART_SetConfig+0x258>
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d00c      	beq.n	8006608 <UART_SetConfig+0x240>
 80065ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f2:	d815      	bhi.n	8006620 <UART_SetConfig+0x258>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <UART_SetConfig+0x238>
 80065f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fc:	d008      	beq.n	8006610 <UART_SetConfig+0x248>
 80065fe:	e00f      	b.n	8006620 <UART_SetConfig+0x258>
 8006600:	2300      	movs	r3, #0
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006606:	e052      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006608:	2302      	movs	r3, #2
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660e:	e04e      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006610:	2304      	movs	r3, #4
 8006612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006616:	e04a      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006618:	2308      	movs	r3, #8
 800661a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661e:	e046      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006620:	2310      	movs	r3, #16
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006626:	e042      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a17      	ldr	r2, [pc, #92]	; (800668c <UART_SetConfig+0x2c4>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d13a      	bne.n	80066a8 <UART_SetConfig+0x2e0>
 8006632:	4b18      	ldr	r3, [pc, #96]	; (8006694 <UART_SetConfig+0x2cc>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800663c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006640:	d01a      	beq.n	8006678 <UART_SetConfig+0x2b0>
 8006642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006646:	d81b      	bhi.n	8006680 <UART_SetConfig+0x2b8>
 8006648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664c:	d00c      	beq.n	8006668 <UART_SetConfig+0x2a0>
 800664e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006652:	d815      	bhi.n	8006680 <UART_SetConfig+0x2b8>
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <UART_SetConfig+0x298>
 8006658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665c:	d008      	beq.n	8006670 <UART_SetConfig+0x2a8>
 800665e:	e00f      	b.n	8006680 <UART_SetConfig+0x2b8>
 8006660:	2300      	movs	r3, #0
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	e022      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006668:	2302      	movs	r3, #2
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666e:	e01e      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006670:	2304      	movs	r3, #4
 8006672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006676:	e01a      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006678:	2308      	movs	r3, #8
 800667a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800667e:	e016      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006680:	2310      	movs	r3, #16
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006686:	e012      	b.n	80066ae <UART_SetConfig+0x2e6>
 8006688:	efff69f3 	.word	0xefff69f3
 800668c:	40008000 	.word	0x40008000
 8006690:	40013800 	.word	0x40013800
 8006694:	40021000 	.word	0x40021000
 8006698:	40004400 	.word	0x40004400
 800669c:	40004800 	.word	0x40004800
 80066a0:	40004c00 	.word	0x40004c00
 80066a4:	40005000 	.word	0x40005000
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a9f      	ldr	r2, [pc, #636]	; (8006930 <UART_SetConfig+0x568>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d17a      	bne.n	80067ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d824      	bhi.n	800670a <UART_SetConfig+0x342>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0x300>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	0800670b 	.word	0x0800670b
 80066d8:	080066fb 	.word	0x080066fb
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	0800670b 	.word	0x0800670b
 80066e4:	0800670b 	.word	0x0800670b
 80066e8:	08006703 	.word	0x08006703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ec:	f7fe ff82 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 80066f0:	61f8      	str	r0, [r7, #28]
        break;
 80066f2:	e010      	b.n	8006716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f4:	4b8f      	ldr	r3, [pc, #572]	; (8006934 <UART_SetConfig+0x56c>)
 80066f6:	61fb      	str	r3, [r7, #28]
        break;
 80066f8:	e00d      	b.n	8006716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fe fee3 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 80066fe:	61f8      	str	r0, [r7, #28]
        break;
 8006700:	e009      	b.n	8006716 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006706:	61fb      	str	r3, [r7, #28]
        break;
 8006708:	e005      	b.n	8006716 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006714:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80fb 	beq.w	8006914 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	4413      	add	r3, r2
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	429a      	cmp	r2, r3
 800672c:	d305      	bcc.n	800673a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	429a      	cmp	r2, r3
 8006738:	d903      	bls.n	8006742 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006740:	e0e8      	b.n	8006914 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	2200      	movs	r2, #0
 8006746:	461c      	mov	r4, r3
 8006748:	4615      	mov	r5, r2
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	022b      	lsls	r3, r5, #8
 8006754:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006758:	0222      	lsls	r2, r4, #8
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	6849      	ldr	r1, [r1, #4]
 800675e:	0849      	lsrs	r1, r1, #1
 8006760:	2000      	movs	r0, #0
 8006762:	4688      	mov	r8, r1
 8006764:	4681      	mov	r9, r0
 8006766:	eb12 0a08 	adds.w	sl, r2, r8
 800676a:	eb43 0b09 	adc.w	fp, r3, r9
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800677c:	4650      	mov	r0, sl
 800677e:	4659      	mov	r1, fp
 8006780:	f7fa fa62 	bl	8000c48 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4613      	mov	r3, r2
 800678a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006792:	d308      	bcc.n	80067a6 <UART_SetConfig+0x3de>
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679a:	d204      	bcs.n	80067a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	60da      	str	r2, [r3, #12]
 80067a4:	e0b6      	b.n	8006914 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067ac:	e0b2      	b.n	8006914 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b6:	d15e      	bne.n	8006876 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d828      	bhi.n	8006812 <UART_SetConfig+0x44a>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <UART_SetConfig+0x400>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067ed 	.word	0x080067ed
 80067cc:	080067f5 	.word	0x080067f5
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	08006813 	.word	0x08006813
 80067d8:	08006803 	.word	0x08006803
 80067dc:	08006813 	.word	0x08006813
 80067e0:	08006813 	.word	0x08006813
 80067e4:	08006813 	.word	0x08006813
 80067e8:	0800680b 	.word	0x0800680b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ec:	f7fe ff02 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 80067f0:	61f8      	str	r0, [r7, #28]
        break;
 80067f2:	e014      	b.n	800681e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f4:	f7fe ff14 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 80067f8:	61f8      	str	r0, [r7, #28]
        break;
 80067fa:	e010      	b.n	800681e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067fc:	4b4d      	ldr	r3, [pc, #308]	; (8006934 <UART_SetConfig+0x56c>)
 80067fe:	61fb      	str	r3, [r7, #28]
        break;
 8006800:	e00d      	b.n	800681e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006802:	f7fe fe5f 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 8006806:	61f8      	str	r0, [r7, #28]
        break;
 8006808:	e009      	b.n	800681e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800680e:	61fb      	str	r3, [r7, #28]
        break;
 8006810:	e005      	b.n	800681e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800681c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d077      	beq.n	8006914 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	005a      	lsls	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	441a      	add	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	2b0f      	cmp	r3, #15
 800683e:	d916      	bls.n	800686e <UART_SetConfig+0x4a6>
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006846:	d212      	bcs.n	800686e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f023 030f 	bic.w	r3, r3, #15
 8006850:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	b29b      	uxth	r3, r3
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	b29a      	uxth	r2, r3
 800685e:	8afb      	ldrh	r3, [r7, #22]
 8006860:	4313      	orrs	r3, r2
 8006862:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	8afa      	ldrh	r2, [r7, #22]
 800686a:	60da      	str	r2, [r3, #12]
 800686c:	e052      	b.n	8006914 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006874:	e04e      	b.n	8006914 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800687a:	2b08      	cmp	r3, #8
 800687c:	d827      	bhi.n	80068ce <UART_SetConfig+0x506>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0x4bc>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068b1 	.word	0x080068b1
 800688c:	080068b9 	.word	0x080068b9
 8006890:	080068cf 	.word	0x080068cf
 8006894:	080068bf 	.word	0x080068bf
 8006898:	080068cf 	.word	0x080068cf
 800689c:	080068cf 	.word	0x080068cf
 80068a0:	080068cf 	.word	0x080068cf
 80068a4:	080068c7 	.word	0x080068c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a8:	f7fe fea4 	bl	80055f4 <HAL_RCC_GetPCLK1Freq>
 80068ac:	61f8      	str	r0, [r7, #28]
        break;
 80068ae:	e014      	b.n	80068da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068b0:	f7fe feb6 	bl	8005620 <HAL_RCC_GetPCLK2Freq>
 80068b4:	61f8      	str	r0, [r7, #28]
        break;
 80068b6:	e010      	b.n	80068da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b8:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <UART_SetConfig+0x56c>)
 80068ba:	61fb      	str	r3, [r7, #28]
        break;
 80068bc:	e00d      	b.n	80068da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068be:	f7fe fe01 	bl	80054c4 <HAL_RCC_GetSysClockFreq>
 80068c2:	61f8      	str	r0, [r7, #28]
        break;
 80068c4:	e009      	b.n	80068da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ca:	61fb      	str	r3, [r7, #28]
        break;
 80068cc:	e005      	b.n	80068da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068d8:	bf00      	nop
    }

    if (pclk != 0U)
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d019      	beq.n	8006914 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	085a      	lsrs	r2, r3, #1
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	441a      	add	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	d909      	bls.n	800690e <UART_SetConfig+0x546>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006900:	d205      	bcs.n	800690e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60da      	str	r2, [r3, #12]
 800690c:	e002      	b.n	8006914 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006920:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006924:	4618      	mov	r0, r3
 8006926:	3728      	adds	r7, #40	; 0x28
 8006928:	46bd      	mov	sp, r7
 800692a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800692e:	bf00      	nop
 8006930:	40008000 	.word	0x40008000
 8006934:	00f42400 	.word	0x00f42400

08006938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	430a      	orrs	r2, r1
 8006982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	f003 0320 	and.w	r3, r3, #32
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01a      	beq.n	8006a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a36:	d10a      	bne.n	8006a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b098      	sub	sp, #96	; 0x60
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a8c:	f7fc f942 	bl	8002d14 <HAL_GetTick>
 8006a90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d12e      	bne.n	8006afe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f88c 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d021      	beq.n	8006afe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ace:	653b      	str	r3, [r7, #80]	; 0x50
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8006ada:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e6      	bne.n	8006aba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e062      	b.n	8006bc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d149      	bne.n	8006ba0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b14:	2200      	movs	r2, #0
 8006b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f856 	bl	8006bcc <UART_WaitOnFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d03c      	beq.n	8006ba0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	623b      	str	r3, [r7, #32]
   return(result);
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
 8006b46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e6      	bne.n	8006b26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0301 	bic.w	r3, r3, #1
 8006b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b78:	61fa      	str	r2, [r7, #28]
 8006b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	617b      	str	r3, [r7, #20]
   return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e011      	b.n	8006bc4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3758      	adds	r7, #88	; 0x58
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bdc:	e049      	b.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d045      	beq.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be6:	f7fc f895 	bl	8002d14 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d302      	bcc.n	8006bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e048      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d031      	beq.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d110      	bne.n	8006c3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2208      	movs	r2, #8
 8006c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f838 	bl	8006c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e029      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4c:	d111      	bne.n	8006c72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f81e 	bl	8006c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00f      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	bf0c      	ite	eq
 8006c82:	2301      	moveq	r3, #1
 8006c84:	2300      	movne	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	461a      	mov	r2, r3
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d0a6      	beq.n	8006bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b095      	sub	sp, #84	; 0x54
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e6      	bne.n	8006ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3308      	adds	r3, #8
 8006cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e5      	bne.n	8006cd4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d118      	bne.n	8006d42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	e853 3f00 	ldrex	r3, [r3]
 8006d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f023 0310 	bic.w	r3, r3, #16
 8006d24:	647b      	str	r3, [r7, #68]	; 0x44
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d32:	6979      	ldr	r1, [r7, #20]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	e841 2300 	strex	r3, r2, [r1]
 8006d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1e6      	bne.n	8006d10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d56:	bf00      	nop
 8006d58:	3754      	adds	r7, #84	; 0x54
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <__cvt>:
 8006d62:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d66:	ec55 4b10 	vmov	r4, r5, d0
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	460e      	mov	r6, r1
 8006d6e:	4619      	mov	r1, r3
 8006d70:	462b      	mov	r3, r5
 8006d72:	bfbb      	ittet	lt
 8006d74:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d78:	461d      	movlt	r5, r3
 8006d7a:	2300      	movge	r3, #0
 8006d7c:	232d      	movlt	r3, #45	; 0x2d
 8006d7e:	700b      	strb	r3, [r1, #0]
 8006d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d86:	4691      	mov	r9, r2
 8006d88:	f023 0820 	bic.w	r8, r3, #32
 8006d8c:	bfbc      	itt	lt
 8006d8e:	4622      	movlt	r2, r4
 8006d90:	4614      	movlt	r4, r2
 8006d92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d96:	d005      	beq.n	8006da4 <__cvt+0x42>
 8006d98:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d9c:	d100      	bne.n	8006da0 <__cvt+0x3e>
 8006d9e:	3601      	adds	r6, #1
 8006da0:	2102      	movs	r1, #2
 8006da2:	e000      	b.n	8006da6 <__cvt+0x44>
 8006da4:	2103      	movs	r1, #3
 8006da6:	ab03      	add	r3, sp, #12
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	ab02      	add	r3, sp, #8
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	ec45 4b10 	vmov	d0, r4, r5
 8006db2:	4653      	mov	r3, sl
 8006db4:	4632      	mov	r2, r6
 8006db6:	f001 f87b 	bl	8007eb0 <_dtoa_r>
 8006dba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	d102      	bne.n	8006dc8 <__cvt+0x66>
 8006dc2:	f019 0f01 	tst.w	r9, #1
 8006dc6:	d022      	beq.n	8006e0e <__cvt+0xac>
 8006dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dcc:	eb07 0906 	add.w	r9, r7, r6
 8006dd0:	d110      	bne.n	8006df4 <__cvt+0x92>
 8006dd2:	783b      	ldrb	r3, [r7, #0]
 8006dd4:	2b30      	cmp	r3, #48	; 0x30
 8006dd6:	d10a      	bne.n	8006dee <__cvt+0x8c>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7f9 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8006de4:	b918      	cbnz	r0, 8006dee <__cvt+0x8c>
 8006de6:	f1c6 0601 	rsb	r6, r6, #1
 8006dea:	f8ca 6000 	str.w	r6, [sl]
 8006dee:	f8da 3000 	ldr.w	r3, [sl]
 8006df2:	4499      	add	r9, r3
 8006df4:	2200      	movs	r2, #0
 8006df6:	2300      	movs	r3, #0
 8006df8:	4620      	mov	r0, r4
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	f7f9 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e00:	b108      	cbz	r0, 8006e06 <__cvt+0xa4>
 8006e02:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e06:	2230      	movs	r2, #48	; 0x30
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	454b      	cmp	r3, r9
 8006e0c:	d307      	bcc.n	8006e1e <__cvt+0xbc>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e12:	1bdb      	subs	r3, r3, r7
 8006e14:	4638      	mov	r0, r7
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	b004      	add	sp, #16
 8006e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	9103      	str	r1, [sp, #12]
 8006e22:	701a      	strb	r2, [r3, #0]
 8006e24:	e7f0      	b.n	8006e08 <__cvt+0xa6>

08006e26 <__exponent>:
 8006e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2900      	cmp	r1, #0
 8006e2c:	bfb8      	it	lt
 8006e2e:	4249      	neglt	r1, r1
 8006e30:	f803 2b02 	strb.w	r2, [r3], #2
 8006e34:	bfb4      	ite	lt
 8006e36:	222d      	movlt	r2, #45	; 0x2d
 8006e38:	222b      	movge	r2, #43	; 0x2b
 8006e3a:	2909      	cmp	r1, #9
 8006e3c:	7042      	strb	r2, [r0, #1]
 8006e3e:	dd2a      	ble.n	8006e96 <__exponent+0x70>
 8006e40:	f10d 0207 	add.w	r2, sp, #7
 8006e44:	4617      	mov	r7, r2
 8006e46:	260a      	movs	r6, #10
 8006e48:	4694      	mov	ip, r2
 8006e4a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e4e:	fb06 1415 	mls	r4, r6, r5, r1
 8006e52:	3430      	adds	r4, #48	; 0x30
 8006e54:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e58:	460c      	mov	r4, r1
 8006e5a:	2c63      	cmp	r4, #99	; 0x63
 8006e5c:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e60:	4629      	mov	r1, r5
 8006e62:	dcf1      	bgt.n	8006e48 <__exponent+0x22>
 8006e64:	3130      	adds	r1, #48	; 0x30
 8006e66:	f1ac 0402 	sub.w	r4, ip, #2
 8006e6a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e6e:	1c41      	adds	r1, r0, #1
 8006e70:	4622      	mov	r2, r4
 8006e72:	42ba      	cmp	r2, r7
 8006e74:	d30a      	bcc.n	8006e8c <__exponent+0x66>
 8006e76:	f10d 0209 	add.w	r2, sp, #9
 8006e7a:	eba2 020c 	sub.w	r2, r2, ip
 8006e7e:	42bc      	cmp	r4, r7
 8006e80:	bf88      	it	hi
 8006e82:	2200      	movhi	r2, #0
 8006e84:	4413      	add	r3, r2
 8006e86:	1a18      	subs	r0, r3, r0
 8006e88:	b003      	add	sp, #12
 8006e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e8c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e90:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006e94:	e7ed      	b.n	8006e72 <__exponent+0x4c>
 8006e96:	2330      	movs	r3, #48	; 0x30
 8006e98:	3130      	adds	r1, #48	; 0x30
 8006e9a:	7083      	strb	r3, [r0, #2]
 8006e9c:	70c1      	strb	r1, [r0, #3]
 8006e9e:	1d03      	adds	r3, r0, #4
 8006ea0:	e7f1      	b.n	8006e86 <__exponent+0x60>
	...

08006ea4 <_printf_float>:
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	ed2d 8b02 	vpush	{d8}
 8006eac:	b08d      	sub	sp, #52	; 0x34
 8006eae:	460c      	mov	r4, r1
 8006eb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006eb4:	4616      	mov	r6, r2
 8006eb6:	461f      	mov	r7, r3
 8006eb8:	4605      	mov	r5, r0
 8006eba:	f000 fef7 	bl	8007cac <_localeconv_r>
 8006ebe:	f8d0 a000 	ldr.w	sl, [r0]
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	f7f9 f9d4 	bl	8000270 <strlen>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	930a      	str	r3, [sp, #40]	; 0x28
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	9305      	str	r3, [sp, #20]
 8006ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ed8:	3307      	adds	r3, #7
 8006eda:	f023 0307 	bic.w	r3, r3, #7
 8006ede:	f103 0208 	add.w	r2, r3, #8
 8006ee2:	f8c8 2000 	str.w	r2, [r8]
 8006ee6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ef4:	ee08 0a10 	vmov	s16, r0
 8006ef8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f00:	4b9e      	ldr	r3, [pc, #632]	; (800717c <_printf_float+0x2d8>)
 8006f02:	f04f 32ff 	mov.w	r2, #4294967295
 8006f06:	f7f9 fe11 	bl	8000b2c <__aeabi_dcmpun>
 8006f0a:	bb88      	cbnz	r0, 8006f70 <_printf_float+0xcc>
 8006f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f10:	4b9a      	ldr	r3, [pc, #616]	; (800717c <_printf_float+0x2d8>)
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295
 8006f16:	f7f9 fdeb 	bl	8000af0 <__aeabi_dcmple>
 8006f1a:	bb48      	cbnz	r0, 8006f70 <_printf_float+0xcc>
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2300      	movs	r3, #0
 8006f20:	4640      	mov	r0, r8
 8006f22:	4649      	mov	r1, r9
 8006f24:	f7f9 fdda 	bl	8000adc <__aeabi_dcmplt>
 8006f28:	b110      	cbz	r0, 8006f30 <_printf_float+0x8c>
 8006f2a:	232d      	movs	r3, #45	; 0x2d
 8006f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f30:	4a93      	ldr	r2, [pc, #588]	; (8007180 <_printf_float+0x2dc>)
 8006f32:	4b94      	ldr	r3, [pc, #592]	; (8007184 <_printf_float+0x2e0>)
 8006f34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f38:	bf94      	ite	ls
 8006f3a:	4690      	movls	r8, r2
 8006f3c:	4698      	movhi	r8, r3
 8006f3e:	2303      	movs	r3, #3
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	9b05      	ldr	r3, [sp, #20]
 8006f44:	f023 0304 	bic.w	r3, r3, #4
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	f04f 0900 	mov.w	r9, #0
 8006f4e:	9700      	str	r7, [sp, #0]
 8006f50:	4633      	mov	r3, r6
 8006f52:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f54:	4621      	mov	r1, r4
 8006f56:	4628      	mov	r0, r5
 8006f58:	f000 f9da 	bl	8007310 <_printf_common>
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f040 8090 	bne.w	8007082 <_printf_float+0x1de>
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295
 8006f66:	b00d      	add	sp, #52	; 0x34
 8006f68:	ecbd 8b02 	vpop	{d8}
 8006f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	4640      	mov	r0, r8
 8006f76:	4649      	mov	r1, r9
 8006f78:	f7f9 fdd8 	bl	8000b2c <__aeabi_dcmpun>
 8006f7c:	b140      	cbz	r0, 8006f90 <_printf_float+0xec>
 8006f7e:	464b      	mov	r3, r9
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bfbc      	itt	lt
 8006f84:	232d      	movlt	r3, #45	; 0x2d
 8006f86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f8a:	4a7f      	ldr	r2, [pc, #508]	; (8007188 <_printf_float+0x2e4>)
 8006f8c:	4b7f      	ldr	r3, [pc, #508]	; (800718c <_printf_float+0x2e8>)
 8006f8e:	e7d1      	b.n	8006f34 <_printf_float+0x90>
 8006f90:	6863      	ldr	r3, [r4, #4]
 8006f92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f96:	9206      	str	r2, [sp, #24]
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	d13f      	bne.n	800701c <_printf_float+0x178>
 8006f9c:	2306      	movs	r3, #6
 8006f9e:	6063      	str	r3, [r4, #4]
 8006fa0:	9b05      	ldr	r3, [sp, #20]
 8006fa2:	6861      	ldr	r1, [r4, #4]
 8006fa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fa8:	2300      	movs	r3, #0
 8006faa:	9303      	str	r3, [sp, #12]
 8006fac:	ab0a      	add	r3, sp, #40	; 0x28
 8006fae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fb2:	ab09      	add	r3, sp, #36	; 0x24
 8006fb4:	ec49 8b10 	vmov	d0, r8, r9
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	6022      	str	r2, [r4, #0]
 8006fbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f7ff fece 	bl	8006d62 <__cvt>
 8006fc6:	9b06      	ldr	r3, [sp, #24]
 8006fc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fca:	2b47      	cmp	r3, #71	; 0x47
 8006fcc:	4680      	mov	r8, r0
 8006fce:	d108      	bne.n	8006fe2 <_printf_float+0x13e>
 8006fd0:	1cc8      	adds	r0, r1, #3
 8006fd2:	db02      	blt.n	8006fda <_printf_float+0x136>
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	4299      	cmp	r1, r3
 8006fd8:	dd41      	ble.n	800705e <_printf_float+0x1ba>
 8006fda:	f1ab 0302 	sub.w	r3, fp, #2
 8006fde:	fa5f fb83 	uxtb.w	fp, r3
 8006fe2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fe6:	d820      	bhi.n	800702a <_printf_float+0x186>
 8006fe8:	3901      	subs	r1, #1
 8006fea:	465a      	mov	r2, fp
 8006fec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ff0:	9109      	str	r1, [sp, #36]	; 0x24
 8006ff2:	f7ff ff18 	bl	8006e26 <__exponent>
 8006ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ff8:	1813      	adds	r3, r2, r0
 8006ffa:	2a01      	cmp	r2, #1
 8006ffc:	4681      	mov	r9, r0
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	dc02      	bgt.n	8007008 <_printf_float+0x164>
 8007002:	6822      	ldr	r2, [r4, #0]
 8007004:	07d2      	lsls	r2, r2, #31
 8007006:	d501      	bpl.n	800700c <_printf_float+0x168>
 8007008:	3301      	adds	r3, #1
 800700a:	6123      	str	r3, [r4, #16]
 800700c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007010:	2b00      	cmp	r3, #0
 8007012:	d09c      	beq.n	8006f4e <_printf_float+0xaa>
 8007014:	232d      	movs	r3, #45	; 0x2d
 8007016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800701a:	e798      	b.n	8006f4e <_printf_float+0xaa>
 800701c:	9a06      	ldr	r2, [sp, #24]
 800701e:	2a47      	cmp	r2, #71	; 0x47
 8007020:	d1be      	bne.n	8006fa0 <_printf_float+0xfc>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1bc      	bne.n	8006fa0 <_printf_float+0xfc>
 8007026:	2301      	movs	r3, #1
 8007028:	e7b9      	b.n	8006f9e <_printf_float+0xfa>
 800702a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800702e:	d118      	bne.n	8007062 <_printf_float+0x1be>
 8007030:	2900      	cmp	r1, #0
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	dd0b      	ble.n	800704e <_printf_float+0x1aa>
 8007036:	6121      	str	r1, [r4, #16]
 8007038:	b913      	cbnz	r3, 8007040 <_printf_float+0x19c>
 800703a:	6822      	ldr	r2, [r4, #0]
 800703c:	07d0      	lsls	r0, r2, #31
 800703e:	d502      	bpl.n	8007046 <_printf_float+0x1a2>
 8007040:	3301      	adds	r3, #1
 8007042:	440b      	add	r3, r1
 8007044:	6123      	str	r3, [r4, #16]
 8007046:	65a1      	str	r1, [r4, #88]	; 0x58
 8007048:	f04f 0900 	mov.w	r9, #0
 800704c:	e7de      	b.n	800700c <_printf_float+0x168>
 800704e:	b913      	cbnz	r3, 8007056 <_printf_float+0x1b2>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	07d2      	lsls	r2, r2, #31
 8007054:	d501      	bpl.n	800705a <_printf_float+0x1b6>
 8007056:	3302      	adds	r3, #2
 8007058:	e7f4      	b.n	8007044 <_printf_float+0x1a0>
 800705a:	2301      	movs	r3, #1
 800705c:	e7f2      	b.n	8007044 <_printf_float+0x1a0>
 800705e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007064:	4299      	cmp	r1, r3
 8007066:	db05      	blt.n	8007074 <_printf_float+0x1d0>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	6121      	str	r1, [r4, #16]
 800706c:	07d8      	lsls	r0, r3, #31
 800706e:	d5ea      	bpl.n	8007046 <_printf_float+0x1a2>
 8007070:	1c4b      	adds	r3, r1, #1
 8007072:	e7e7      	b.n	8007044 <_printf_float+0x1a0>
 8007074:	2900      	cmp	r1, #0
 8007076:	bfd4      	ite	le
 8007078:	f1c1 0202 	rsble	r2, r1, #2
 800707c:	2201      	movgt	r2, #1
 800707e:	4413      	add	r3, r2
 8007080:	e7e0      	b.n	8007044 <_printf_float+0x1a0>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	055a      	lsls	r2, r3, #21
 8007086:	d407      	bmi.n	8007098 <_printf_float+0x1f4>
 8007088:	6923      	ldr	r3, [r4, #16]
 800708a:	4642      	mov	r2, r8
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	d12c      	bne.n	80070f0 <_printf_float+0x24c>
 8007096:	e764      	b.n	8006f62 <_printf_float+0xbe>
 8007098:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800709c:	f240 80e0 	bls.w	8007260 <_printf_float+0x3bc>
 80070a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070a4:	2200      	movs	r2, #0
 80070a6:	2300      	movs	r3, #0
 80070a8:	f7f9 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d034      	beq.n	800711a <_printf_float+0x276>
 80070b0:	4a37      	ldr	r2, [pc, #220]	; (8007190 <_printf_float+0x2ec>)
 80070b2:	2301      	movs	r3, #1
 80070b4:	4631      	mov	r1, r6
 80070b6:	4628      	mov	r0, r5
 80070b8:	47b8      	blx	r7
 80070ba:	3001      	adds	r0, #1
 80070bc:	f43f af51 	beq.w	8006f62 <_printf_float+0xbe>
 80070c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c4:	429a      	cmp	r2, r3
 80070c6:	db02      	blt.n	80070ce <_printf_float+0x22a>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	07d8      	lsls	r0, r3, #31
 80070cc:	d510      	bpl.n	80070f0 <_printf_float+0x24c>
 80070ce:	ee18 3a10 	vmov	r3, s16
 80070d2:	4652      	mov	r2, sl
 80070d4:	4631      	mov	r1, r6
 80070d6:	4628      	mov	r0, r5
 80070d8:	47b8      	blx	r7
 80070da:	3001      	adds	r0, #1
 80070dc:	f43f af41 	beq.w	8006f62 <_printf_float+0xbe>
 80070e0:	f04f 0800 	mov.w	r8, #0
 80070e4:	f104 091a 	add.w	r9, r4, #26
 80070e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ea:	3b01      	subs	r3, #1
 80070ec:	4543      	cmp	r3, r8
 80070ee:	dc09      	bgt.n	8007104 <_printf_float+0x260>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	079b      	lsls	r3, r3, #30
 80070f4:	f100 8107 	bmi.w	8007306 <_printf_float+0x462>
 80070f8:	68e0      	ldr	r0, [r4, #12]
 80070fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070fc:	4298      	cmp	r0, r3
 80070fe:	bfb8      	it	lt
 8007100:	4618      	movlt	r0, r3
 8007102:	e730      	b.n	8006f66 <_printf_float+0xc2>
 8007104:	2301      	movs	r3, #1
 8007106:	464a      	mov	r2, r9
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	f43f af27 	beq.w	8006f62 <_printf_float+0xbe>
 8007114:	f108 0801 	add.w	r8, r8, #1
 8007118:	e7e6      	b.n	80070e8 <_printf_float+0x244>
 800711a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800711c:	2b00      	cmp	r3, #0
 800711e:	dc39      	bgt.n	8007194 <_printf_float+0x2f0>
 8007120:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <_printf_float+0x2ec>)
 8007122:	2301      	movs	r3, #1
 8007124:	4631      	mov	r1, r6
 8007126:	4628      	mov	r0, r5
 8007128:	47b8      	blx	r7
 800712a:	3001      	adds	r0, #1
 800712c:	f43f af19 	beq.w	8006f62 <_printf_float+0xbe>
 8007130:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007134:	4313      	orrs	r3, r2
 8007136:	d102      	bne.n	800713e <_printf_float+0x29a>
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	07d9      	lsls	r1, r3, #31
 800713c:	d5d8      	bpl.n	80070f0 <_printf_float+0x24c>
 800713e:	ee18 3a10 	vmov	r3, s16
 8007142:	4652      	mov	r2, sl
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f af09 	beq.w	8006f62 <_printf_float+0xbe>
 8007150:	f04f 0900 	mov.w	r9, #0
 8007154:	f104 0a1a 	add.w	sl, r4, #26
 8007158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715a:	425b      	negs	r3, r3
 800715c:	454b      	cmp	r3, r9
 800715e:	dc01      	bgt.n	8007164 <_printf_float+0x2c0>
 8007160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007162:	e792      	b.n	800708a <_printf_float+0x1e6>
 8007164:	2301      	movs	r3, #1
 8007166:	4652      	mov	r2, sl
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	f43f aef7 	beq.w	8006f62 <_printf_float+0xbe>
 8007174:	f109 0901 	add.w	r9, r9, #1
 8007178:	e7ee      	b.n	8007158 <_printf_float+0x2b4>
 800717a:	bf00      	nop
 800717c:	7fefffff 	.word	0x7fefffff
 8007180:	0800aba4 	.word	0x0800aba4
 8007184:	0800aba8 	.word	0x0800aba8
 8007188:	0800abac 	.word	0x0800abac
 800718c:	0800abb0 	.word	0x0800abb0
 8007190:	0800ade3 	.word	0x0800ade3
 8007194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007198:	429a      	cmp	r2, r3
 800719a:	bfa8      	it	ge
 800719c:	461a      	movge	r2, r3
 800719e:	2a00      	cmp	r2, #0
 80071a0:	4691      	mov	r9, r2
 80071a2:	dc37      	bgt.n	8007214 <_printf_float+0x370>
 80071a4:	f04f 0b00 	mov.w	fp, #0
 80071a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ac:	f104 021a 	add.w	r2, r4, #26
 80071b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	eba3 0309 	sub.w	r3, r3, r9
 80071b8:	455b      	cmp	r3, fp
 80071ba:	dc33      	bgt.n	8007224 <_printf_float+0x380>
 80071bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071c0:	429a      	cmp	r2, r3
 80071c2:	db3b      	blt.n	800723c <_printf_float+0x398>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	07da      	lsls	r2, r3, #31
 80071c8:	d438      	bmi.n	800723c <_printf_float+0x398>
 80071ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071ce:	eba2 0903 	sub.w	r9, r2, r3
 80071d2:	9b05      	ldr	r3, [sp, #20]
 80071d4:	1ad2      	subs	r2, r2, r3
 80071d6:	4591      	cmp	r9, r2
 80071d8:	bfa8      	it	ge
 80071da:	4691      	movge	r9, r2
 80071dc:	f1b9 0f00 	cmp.w	r9, #0
 80071e0:	dc35      	bgt.n	800724e <_printf_float+0x3aa>
 80071e2:	f04f 0800 	mov.w	r8, #0
 80071e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ea:	f104 0a1a 	add.w	sl, r4, #26
 80071ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071f2:	1a9b      	subs	r3, r3, r2
 80071f4:	eba3 0309 	sub.w	r3, r3, r9
 80071f8:	4543      	cmp	r3, r8
 80071fa:	f77f af79 	ble.w	80070f0 <_printf_float+0x24c>
 80071fe:	2301      	movs	r3, #1
 8007200:	4652      	mov	r2, sl
 8007202:	4631      	mov	r1, r6
 8007204:	4628      	mov	r0, r5
 8007206:	47b8      	blx	r7
 8007208:	3001      	adds	r0, #1
 800720a:	f43f aeaa 	beq.w	8006f62 <_printf_float+0xbe>
 800720e:	f108 0801 	add.w	r8, r8, #1
 8007212:	e7ec      	b.n	80071ee <_printf_float+0x34a>
 8007214:	4613      	mov	r3, r2
 8007216:	4631      	mov	r1, r6
 8007218:	4642      	mov	r2, r8
 800721a:	4628      	mov	r0, r5
 800721c:	47b8      	blx	r7
 800721e:	3001      	adds	r0, #1
 8007220:	d1c0      	bne.n	80071a4 <_printf_float+0x300>
 8007222:	e69e      	b.n	8006f62 <_printf_float+0xbe>
 8007224:	2301      	movs	r3, #1
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	9205      	str	r2, [sp, #20]
 800722c:	47b8      	blx	r7
 800722e:	3001      	adds	r0, #1
 8007230:	f43f ae97 	beq.w	8006f62 <_printf_float+0xbe>
 8007234:	9a05      	ldr	r2, [sp, #20]
 8007236:	f10b 0b01 	add.w	fp, fp, #1
 800723a:	e7b9      	b.n	80071b0 <_printf_float+0x30c>
 800723c:	ee18 3a10 	vmov	r3, s16
 8007240:	4652      	mov	r2, sl
 8007242:	4631      	mov	r1, r6
 8007244:	4628      	mov	r0, r5
 8007246:	47b8      	blx	r7
 8007248:	3001      	adds	r0, #1
 800724a:	d1be      	bne.n	80071ca <_printf_float+0x326>
 800724c:	e689      	b.n	8006f62 <_printf_float+0xbe>
 800724e:	9a05      	ldr	r2, [sp, #20]
 8007250:	464b      	mov	r3, r9
 8007252:	4442      	add	r2, r8
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	d1c1      	bne.n	80071e2 <_printf_float+0x33e>
 800725e:	e680      	b.n	8006f62 <_printf_float+0xbe>
 8007260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007262:	2a01      	cmp	r2, #1
 8007264:	dc01      	bgt.n	800726a <_printf_float+0x3c6>
 8007266:	07db      	lsls	r3, r3, #31
 8007268:	d53a      	bpl.n	80072e0 <_printf_float+0x43c>
 800726a:	2301      	movs	r3, #1
 800726c:	4642      	mov	r2, r8
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	f43f ae74 	beq.w	8006f62 <_printf_float+0xbe>
 800727a:	ee18 3a10 	vmov	r3, s16
 800727e:	4652      	mov	r2, sl
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f ae6b 	beq.w	8006f62 <_printf_float+0xbe>
 800728c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007290:	2200      	movs	r2, #0
 8007292:	2300      	movs	r3, #0
 8007294:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007298:	f7f9 fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800729c:	b9d8      	cbnz	r0, 80072d6 <_printf_float+0x432>
 800729e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80072a2:	f108 0201 	add.w	r2, r8, #1
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	d10e      	bne.n	80072ce <_printf_float+0x42a>
 80072b0:	e657      	b.n	8006f62 <_printf_float+0xbe>
 80072b2:	2301      	movs	r3, #1
 80072b4:	4652      	mov	r2, sl
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	f43f ae50 	beq.w	8006f62 <_printf_float+0xbe>
 80072c2:	f108 0801 	add.w	r8, r8, #1
 80072c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c8:	3b01      	subs	r3, #1
 80072ca:	4543      	cmp	r3, r8
 80072cc:	dcf1      	bgt.n	80072b2 <_printf_float+0x40e>
 80072ce:	464b      	mov	r3, r9
 80072d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072d4:	e6da      	b.n	800708c <_printf_float+0x1e8>
 80072d6:	f04f 0800 	mov.w	r8, #0
 80072da:	f104 0a1a 	add.w	sl, r4, #26
 80072de:	e7f2      	b.n	80072c6 <_printf_float+0x422>
 80072e0:	2301      	movs	r3, #1
 80072e2:	4642      	mov	r2, r8
 80072e4:	e7df      	b.n	80072a6 <_printf_float+0x402>
 80072e6:	2301      	movs	r3, #1
 80072e8:	464a      	mov	r2, r9
 80072ea:	4631      	mov	r1, r6
 80072ec:	4628      	mov	r0, r5
 80072ee:	47b8      	blx	r7
 80072f0:	3001      	adds	r0, #1
 80072f2:	f43f ae36 	beq.w	8006f62 <_printf_float+0xbe>
 80072f6:	f108 0801 	add.w	r8, r8, #1
 80072fa:	68e3      	ldr	r3, [r4, #12]
 80072fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072fe:	1a5b      	subs	r3, r3, r1
 8007300:	4543      	cmp	r3, r8
 8007302:	dcf0      	bgt.n	80072e6 <_printf_float+0x442>
 8007304:	e6f8      	b.n	80070f8 <_printf_float+0x254>
 8007306:	f04f 0800 	mov.w	r8, #0
 800730a:	f104 0919 	add.w	r9, r4, #25
 800730e:	e7f4      	b.n	80072fa <_printf_float+0x456>

08007310 <_printf_common>:
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	4616      	mov	r6, r2
 8007316:	4699      	mov	r9, r3
 8007318:	688a      	ldr	r2, [r1, #8]
 800731a:	690b      	ldr	r3, [r1, #16]
 800731c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007320:	4293      	cmp	r3, r2
 8007322:	bfb8      	it	lt
 8007324:	4613      	movlt	r3, r2
 8007326:	6033      	str	r3, [r6, #0]
 8007328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800732c:	4607      	mov	r7, r0
 800732e:	460c      	mov	r4, r1
 8007330:	b10a      	cbz	r2, 8007336 <_printf_common+0x26>
 8007332:	3301      	adds	r3, #1
 8007334:	6033      	str	r3, [r6, #0]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	0699      	lsls	r1, r3, #26
 800733a:	bf42      	ittt	mi
 800733c:	6833      	ldrmi	r3, [r6, #0]
 800733e:	3302      	addmi	r3, #2
 8007340:	6033      	strmi	r3, [r6, #0]
 8007342:	6825      	ldr	r5, [r4, #0]
 8007344:	f015 0506 	ands.w	r5, r5, #6
 8007348:	d106      	bne.n	8007358 <_printf_common+0x48>
 800734a:	f104 0a19 	add.w	sl, r4, #25
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	6832      	ldr	r2, [r6, #0]
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	42ab      	cmp	r3, r5
 8007356:	dc26      	bgt.n	80073a6 <_printf_common+0x96>
 8007358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800735c:	1e13      	subs	r3, r2, #0
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	bf18      	it	ne
 8007362:	2301      	movne	r3, #1
 8007364:	0692      	lsls	r2, r2, #26
 8007366:	d42b      	bmi.n	80073c0 <_printf_common+0xb0>
 8007368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800736c:	4649      	mov	r1, r9
 800736e:	4638      	mov	r0, r7
 8007370:	47c0      	blx	r8
 8007372:	3001      	adds	r0, #1
 8007374:	d01e      	beq.n	80073b4 <_printf_common+0xa4>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	6922      	ldr	r2, [r4, #16]
 800737a:	f003 0306 	and.w	r3, r3, #6
 800737e:	2b04      	cmp	r3, #4
 8007380:	bf02      	ittt	eq
 8007382:	68e5      	ldreq	r5, [r4, #12]
 8007384:	6833      	ldreq	r3, [r6, #0]
 8007386:	1aed      	subeq	r5, r5, r3
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	bf0c      	ite	eq
 800738c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007390:	2500      	movne	r5, #0
 8007392:	4293      	cmp	r3, r2
 8007394:	bfc4      	itt	gt
 8007396:	1a9b      	subgt	r3, r3, r2
 8007398:	18ed      	addgt	r5, r5, r3
 800739a:	2600      	movs	r6, #0
 800739c:	341a      	adds	r4, #26
 800739e:	42b5      	cmp	r5, r6
 80073a0:	d11a      	bne.n	80073d8 <_printf_common+0xc8>
 80073a2:	2000      	movs	r0, #0
 80073a4:	e008      	b.n	80073b8 <_printf_common+0xa8>
 80073a6:	2301      	movs	r3, #1
 80073a8:	4652      	mov	r2, sl
 80073aa:	4649      	mov	r1, r9
 80073ac:	4638      	mov	r0, r7
 80073ae:	47c0      	blx	r8
 80073b0:	3001      	adds	r0, #1
 80073b2:	d103      	bne.n	80073bc <_printf_common+0xac>
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073bc:	3501      	adds	r5, #1
 80073be:	e7c6      	b.n	800734e <_printf_common+0x3e>
 80073c0:	18e1      	adds	r1, r4, r3
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	2030      	movs	r0, #48	; 0x30
 80073c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073ca:	4422      	add	r2, r4
 80073cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073d4:	3302      	adds	r3, #2
 80073d6:	e7c7      	b.n	8007368 <_printf_common+0x58>
 80073d8:	2301      	movs	r3, #1
 80073da:	4622      	mov	r2, r4
 80073dc:	4649      	mov	r1, r9
 80073de:	4638      	mov	r0, r7
 80073e0:	47c0      	blx	r8
 80073e2:	3001      	adds	r0, #1
 80073e4:	d0e6      	beq.n	80073b4 <_printf_common+0xa4>
 80073e6:	3601      	adds	r6, #1
 80073e8:	e7d9      	b.n	800739e <_printf_common+0x8e>
	...

080073ec <_printf_i>:
 80073ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	7e0f      	ldrb	r7, [r1, #24]
 80073f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073f4:	2f78      	cmp	r7, #120	; 0x78
 80073f6:	4691      	mov	r9, r2
 80073f8:	4680      	mov	r8, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	469a      	mov	sl, r3
 80073fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007402:	d807      	bhi.n	8007414 <_printf_i+0x28>
 8007404:	2f62      	cmp	r7, #98	; 0x62
 8007406:	d80a      	bhi.n	800741e <_printf_i+0x32>
 8007408:	2f00      	cmp	r7, #0
 800740a:	f000 80d4 	beq.w	80075b6 <_printf_i+0x1ca>
 800740e:	2f58      	cmp	r7, #88	; 0x58
 8007410:	f000 80c0 	beq.w	8007594 <_printf_i+0x1a8>
 8007414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800741c:	e03a      	b.n	8007494 <_printf_i+0xa8>
 800741e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007422:	2b15      	cmp	r3, #21
 8007424:	d8f6      	bhi.n	8007414 <_printf_i+0x28>
 8007426:	a101      	add	r1, pc, #4	; (adr r1, 800742c <_printf_i+0x40>)
 8007428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800742c:	08007485 	.word	0x08007485
 8007430:	08007499 	.word	0x08007499
 8007434:	08007415 	.word	0x08007415
 8007438:	08007415 	.word	0x08007415
 800743c:	08007415 	.word	0x08007415
 8007440:	08007415 	.word	0x08007415
 8007444:	08007499 	.word	0x08007499
 8007448:	08007415 	.word	0x08007415
 800744c:	08007415 	.word	0x08007415
 8007450:	08007415 	.word	0x08007415
 8007454:	08007415 	.word	0x08007415
 8007458:	0800759d 	.word	0x0800759d
 800745c:	080074c5 	.word	0x080074c5
 8007460:	08007557 	.word	0x08007557
 8007464:	08007415 	.word	0x08007415
 8007468:	08007415 	.word	0x08007415
 800746c:	080075bf 	.word	0x080075bf
 8007470:	08007415 	.word	0x08007415
 8007474:	080074c5 	.word	0x080074c5
 8007478:	08007415 	.word	0x08007415
 800747c:	08007415 	.word	0x08007415
 8007480:	0800755f 	.word	0x0800755f
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	602a      	str	r2, [r5, #0]
 800748c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007494:	2301      	movs	r3, #1
 8007496:	e09f      	b.n	80075d8 <_printf_i+0x1ec>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	682b      	ldr	r3, [r5, #0]
 800749c:	0607      	lsls	r7, r0, #24
 800749e:	f103 0104 	add.w	r1, r3, #4
 80074a2:	6029      	str	r1, [r5, #0]
 80074a4:	d501      	bpl.n	80074aa <_printf_i+0xbe>
 80074a6:	681e      	ldr	r6, [r3, #0]
 80074a8:	e003      	b.n	80074b2 <_printf_i+0xc6>
 80074aa:	0646      	lsls	r6, r0, #25
 80074ac:	d5fb      	bpl.n	80074a6 <_printf_i+0xba>
 80074ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074b2:	2e00      	cmp	r6, #0
 80074b4:	da03      	bge.n	80074be <_printf_i+0xd2>
 80074b6:	232d      	movs	r3, #45	; 0x2d
 80074b8:	4276      	negs	r6, r6
 80074ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074be:	485a      	ldr	r0, [pc, #360]	; (8007628 <_printf_i+0x23c>)
 80074c0:	230a      	movs	r3, #10
 80074c2:	e012      	b.n	80074ea <_printf_i+0xfe>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	6820      	ldr	r0, [r4, #0]
 80074c8:	1d19      	adds	r1, r3, #4
 80074ca:	6029      	str	r1, [r5, #0]
 80074cc:	0605      	lsls	r5, r0, #24
 80074ce:	d501      	bpl.n	80074d4 <_printf_i+0xe8>
 80074d0:	681e      	ldr	r6, [r3, #0]
 80074d2:	e002      	b.n	80074da <_printf_i+0xee>
 80074d4:	0641      	lsls	r1, r0, #25
 80074d6:	d5fb      	bpl.n	80074d0 <_printf_i+0xe4>
 80074d8:	881e      	ldrh	r6, [r3, #0]
 80074da:	4853      	ldr	r0, [pc, #332]	; (8007628 <_printf_i+0x23c>)
 80074dc:	2f6f      	cmp	r7, #111	; 0x6f
 80074de:	bf0c      	ite	eq
 80074e0:	2308      	moveq	r3, #8
 80074e2:	230a      	movne	r3, #10
 80074e4:	2100      	movs	r1, #0
 80074e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ea:	6865      	ldr	r5, [r4, #4]
 80074ec:	60a5      	str	r5, [r4, #8]
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	bfa2      	ittt	ge
 80074f2:	6821      	ldrge	r1, [r4, #0]
 80074f4:	f021 0104 	bicge.w	r1, r1, #4
 80074f8:	6021      	strge	r1, [r4, #0]
 80074fa:	b90e      	cbnz	r6, 8007500 <_printf_i+0x114>
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	d04b      	beq.n	8007598 <_printf_i+0x1ac>
 8007500:	4615      	mov	r5, r2
 8007502:	fbb6 f1f3 	udiv	r1, r6, r3
 8007506:	fb03 6711 	mls	r7, r3, r1, r6
 800750a:	5dc7      	ldrb	r7, [r0, r7]
 800750c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007510:	4637      	mov	r7, r6
 8007512:	42bb      	cmp	r3, r7
 8007514:	460e      	mov	r6, r1
 8007516:	d9f4      	bls.n	8007502 <_printf_i+0x116>
 8007518:	2b08      	cmp	r3, #8
 800751a:	d10b      	bne.n	8007534 <_printf_i+0x148>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	07de      	lsls	r6, r3, #31
 8007520:	d508      	bpl.n	8007534 <_printf_i+0x148>
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	6861      	ldr	r1, [r4, #4]
 8007526:	4299      	cmp	r1, r3
 8007528:	bfde      	ittt	le
 800752a:	2330      	movle	r3, #48	; 0x30
 800752c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007530:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007534:	1b52      	subs	r2, r2, r5
 8007536:	6122      	str	r2, [r4, #16]
 8007538:	f8cd a000 	str.w	sl, [sp]
 800753c:	464b      	mov	r3, r9
 800753e:	aa03      	add	r2, sp, #12
 8007540:	4621      	mov	r1, r4
 8007542:	4640      	mov	r0, r8
 8007544:	f7ff fee4 	bl	8007310 <_printf_common>
 8007548:	3001      	adds	r0, #1
 800754a:	d14a      	bne.n	80075e2 <_printf_i+0x1f6>
 800754c:	f04f 30ff 	mov.w	r0, #4294967295
 8007550:	b004      	add	sp, #16
 8007552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	f043 0320 	orr.w	r3, r3, #32
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	4833      	ldr	r0, [pc, #204]	; (800762c <_printf_i+0x240>)
 8007560:	2778      	movs	r7, #120	; 0x78
 8007562:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	6829      	ldr	r1, [r5, #0]
 800756a:	061f      	lsls	r7, r3, #24
 800756c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007570:	d402      	bmi.n	8007578 <_printf_i+0x18c>
 8007572:	065f      	lsls	r7, r3, #25
 8007574:	bf48      	it	mi
 8007576:	b2b6      	uxthmi	r6, r6
 8007578:	07df      	lsls	r7, r3, #31
 800757a:	bf48      	it	mi
 800757c:	f043 0320 	orrmi.w	r3, r3, #32
 8007580:	6029      	str	r1, [r5, #0]
 8007582:	bf48      	it	mi
 8007584:	6023      	strmi	r3, [r4, #0]
 8007586:	b91e      	cbnz	r6, 8007590 <_printf_i+0x1a4>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	f023 0320 	bic.w	r3, r3, #32
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	2310      	movs	r3, #16
 8007592:	e7a7      	b.n	80074e4 <_printf_i+0xf8>
 8007594:	4824      	ldr	r0, [pc, #144]	; (8007628 <_printf_i+0x23c>)
 8007596:	e7e4      	b.n	8007562 <_printf_i+0x176>
 8007598:	4615      	mov	r5, r2
 800759a:	e7bd      	b.n	8007518 <_printf_i+0x12c>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	6826      	ldr	r6, [r4, #0]
 80075a0:	6961      	ldr	r1, [r4, #20]
 80075a2:	1d18      	adds	r0, r3, #4
 80075a4:	6028      	str	r0, [r5, #0]
 80075a6:	0635      	lsls	r5, r6, #24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0x1c4>
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0x1ca>
 80075b0:	0670      	lsls	r0, r6, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0x1c0>
 80075b4:	8019      	strh	r1, [r3, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	4615      	mov	r5, r2
 80075bc:	e7bc      	b.n	8007538 <_printf_i+0x14c>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	2100      	movs	r1, #0
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7f8 fe00 	bl	80001d0 <memchr>
 80075d0:	b108      	cbz	r0, 80075d6 <_printf_i+0x1ea>
 80075d2:	1b40      	subs	r0, r0, r5
 80075d4:	6060      	str	r0, [r4, #4]
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	e7aa      	b.n	8007538 <_printf_i+0x14c>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d0ad      	beq.n	800754c <_printf_i+0x160>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	079b      	lsls	r3, r3, #30
 80075f4:	d413      	bmi.n	800761e <_printf_i+0x232>
 80075f6:	68e0      	ldr	r0, [r4, #12]
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	4298      	cmp	r0, r3
 80075fc:	bfb8      	it	lt
 80075fe:	4618      	movlt	r0, r3
 8007600:	e7a6      	b.n	8007550 <_printf_i+0x164>
 8007602:	2301      	movs	r3, #1
 8007604:	4632      	mov	r2, r6
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d09d      	beq.n	800754c <_printf_i+0x160>
 8007610:	3501      	adds	r5, #1
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	1a5b      	subs	r3, r3, r1
 8007618:	42ab      	cmp	r3, r5
 800761a:	dcf2      	bgt.n	8007602 <_printf_i+0x216>
 800761c:	e7eb      	b.n	80075f6 <_printf_i+0x20a>
 800761e:	2500      	movs	r5, #0
 8007620:	f104 0619 	add.w	r6, r4, #25
 8007624:	e7f5      	b.n	8007612 <_printf_i+0x226>
 8007626:	bf00      	nop
 8007628:	0800abb4 	.word	0x0800abb4
 800762c:	0800abc5 	.word	0x0800abc5

08007630 <__sflush_r>:
 8007630:	898a      	ldrh	r2, [r1, #12]
 8007632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007636:	4605      	mov	r5, r0
 8007638:	0710      	lsls	r0, r2, #28
 800763a:	460c      	mov	r4, r1
 800763c:	d458      	bmi.n	80076f0 <__sflush_r+0xc0>
 800763e:	684b      	ldr	r3, [r1, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	dc05      	bgt.n	8007650 <__sflush_r+0x20>
 8007644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007646:	2b00      	cmp	r3, #0
 8007648:	dc02      	bgt.n	8007650 <__sflush_r+0x20>
 800764a:	2000      	movs	r0, #0
 800764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007652:	2e00      	cmp	r6, #0
 8007654:	d0f9      	beq.n	800764a <__sflush_r+0x1a>
 8007656:	2300      	movs	r3, #0
 8007658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800765c:	682f      	ldr	r7, [r5, #0]
 800765e:	6a21      	ldr	r1, [r4, #32]
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	d032      	beq.n	80076ca <__sflush_r+0x9a>
 8007664:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	075a      	lsls	r2, r3, #29
 800766a:	d505      	bpl.n	8007678 <__sflush_r+0x48>
 800766c:	6863      	ldr	r3, [r4, #4]
 800766e:	1ac0      	subs	r0, r0, r3
 8007670:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007672:	b10b      	cbz	r3, 8007678 <__sflush_r+0x48>
 8007674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007676:	1ac0      	subs	r0, r0, r3
 8007678:	2300      	movs	r3, #0
 800767a:	4602      	mov	r2, r0
 800767c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800767e:	6a21      	ldr	r1, [r4, #32]
 8007680:	4628      	mov	r0, r5
 8007682:	47b0      	blx	r6
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	d106      	bne.n	8007698 <__sflush_r+0x68>
 800768a:	6829      	ldr	r1, [r5, #0]
 800768c:	291d      	cmp	r1, #29
 800768e:	d82b      	bhi.n	80076e8 <__sflush_r+0xb8>
 8007690:	4a29      	ldr	r2, [pc, #164]	; (8007738 <__sflush_r+0x108>)
 8007692:	410a      	asrs	r2, r1
 8007694:	07d6      	lsls	r6, r2, #31
 8007696:	d427      	bmi.n	80076e8 <__sflush_r+0xb8>
 8007698:	2200      	movs	r2, #0
 800769a:	6062      	str	r2, [r4, #4]
 800769c:	04d9      	lsls	r1, r3, #19
 800769e:	6922      	ldr	r2, [r4, #16]
 80076a0:	6022      	str	r2, [r4, #0]
 80076a2:	d504      	bpl.n	80076ae <__sflush_r+0x7e>
 80076a4:	1c42      	adds	r2, r0, #1
 80076a6:	d101      	bne.n	80076ac <__sflush_r+0x7c>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	b903      	cbnz	r3, 80076ae <__sflush_r+0x7e>
 80076ac:	6560      	str	r0, [r4, #84]	; 0x54
 80076ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076b0:	602f      	str	r7, [r5, #0]
 80076b2:	2900      	cmp	r1, #0
 80076b4:	d0c9      	beq.n	800764a <__sflush_r+0x1a>
 80076b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076ba:	4299      	cmp	r1, r3
 80076bc:	d002      	beq.n	80076c4 <__sflush_r+0x94>
 80076be:	4628      	mov	r0, r5
 80076c0:	f001 f9e8 	bl	8008a94 <_free_r>
 80076c4:	2000      	movs	r0, #0
 80076c6:	6360      	str	r0, [r4, #52]	; 0x34
 80076c8:	e7c0      	b.n	800764c <__sflush_r+0x1c>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4628      	mov	r0, r5
 80076ce:	47b0      	blx	r6
 80076d0:	1c41      	adds	r1, r0, #1
 80076d2:	d1c8      	bne.n	8007666 <__sflush_r+0x36>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0c5      	beq.n	8007666 <__sflush_r+0x36>
 80076da:	2b1d      	cmp	r3, #29
 80076dc:	d001      	beq.n	80076e2 <__sflush_r+0xb2>
 80076de:	2b16      	cmp	r3, #22
 80076e0:	d101      	bne.n	80076e6 <__sflush_r+0xb6>
 80076e2:	602f      	str	r7, [r5, #0]
 80076e4:	e7b1      	b.n	800764a <__sflush_r+0x1a>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	e7ad      	b.n	800764c <__sflush_r+0x1c>
 80076f0:	690f      	ldr	r7, [r1, #16]
 80076f2:	2f00      	cmp	r7, #0
 80076f4:	d0a9      	beq.n	800764a <__sflush_r+0x1a>
 80076f6:	0793      	lsls	r3, r2, #30
 80076f8:	680e      	ldr	r6, [r1, #0]
 80076fa:	bf08      	it	eq
 80076fc:	694b      	ldreq	r3, [r1, #20]
 80076fe:	600f      	str	r7, [r1, #0]
 8007700:	bf18      	it	ne
 8007702:	2300      	movne	r3, #0
 8007704:	eba6 0807 	sub.w	r8, r6, r7
 8007708:	608b      	str	r3, [r1, #8]
 800770a:	f1b8 0f00 	cmp.w	r8, #0
 800770e:	dd9c      	ble.n	800764a <__sflush_r+0x1a>
 8007710:	6a21      	ldr	r1, [r4, #32]
 8007712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007714:	4643      	mov	r3, r8
 8007716:	463a      	mov	r2, r7
 8007718:	4628      	mov	r0, r5
 800771a:	47b0      	blx	r6
 800771c:	2800      	cmp	r0, #0
 800771e:	dc06      	bgt.n	800772e <__sflush_r+0xfe>
 8007720:	89a3      	ldrh	r3, [r4, #12]
 8007722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007726:	81a3      	strh	r3, [r4, #12]
 8007728:	f04f 30ff 	mov.w	r0, #4294967295
 800772c:	e78e      	b.n	800764c <__sflush_r+0x1c>
 800772e:	4407      	add	r7, r0
 8007730:	eba8 0800 	sub.w	r8, r8, r0
 8007734:	e7e9      	b.n	800770a <__sflush_r+0xda>
 8007736:	bf00      	nop
 8007738:	dfbffffe 	.word	0xdfbffffe

0800773c <_fflush_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	690b      	ldr	r3, [r1, #16]
 8007740:	4605      	mov	r5, r0
 8007742:	460c      	mov	r4, r1
 8007744:	b913      	cbnz	r3, 800774c <_fflush_r+0x10>
 8007746:	2500      	movs	r5, #0
 8007748:	4628      	mov	r0, r5
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	b118      	cbz	r0, 8007756 <_fflush_r+0x1a>
 800774e:	6a03      	ldr	r3, [r0, #32]
 8007750:	b90b      	cbnz	r3, 8007756 <_fflush_r+0x1a>
 8007752:	f000 f8bb 	bl	80078cc <__sinit>
 8007756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f3      	beq.n	8007746 <_fflush_r+0xa>
 800775e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007760:	07d0      	lsls	r0, r2, #31
 8007762:	d404      	bmi.n	800776e <_fflush_r+0x32>
 8007764:	0599      	lsls	r1, r3, #22
 8007766:	d402      	bmi.n	800776e <_fflush_r+0x32>
 8007768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800776a:	f000 fb14 	bl	8007d96 <__retarget_lock_acquire_recursive>
 800776e:	4628      	mov	r0, r5
 8007770:	4621      	mov	r1, r4
 8007772:	f7ff ff5d 	bl	8007630 <__sflush_r>
 8007776:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007778:	07da      	lsls	r2, r3, #31
 800777a:	4605      	mov	r5, r0
 800777c:	d4e4      	bmi.n	8007748 <_fflush_r+0xc>
 800777e:	89a3      	ldrh	r3, [r4, #12]
 8007780:	059b      	lsls	r3, r3, #22
 8007782:	d4e1      	bmi.n	8007748 <_fflush_r+0xc>
 8007784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007786:	f000 fb07 	bl	8007d98 <__retarget_lock_release_recursive>
 800778a:	e7dd      	b.n	8007748 <_fflush_r+0xc>

0800778c <fflush>:
 800778c:	4601      	mov	r1, r0
 800778e:	b920      	cbnz	r0, 800779a <fflush+0xe>
 8007790:	4a04      	ldr	r2, [pc, #16]	; (80077a4 <fflush+0x18>)
 8007792:	4905      	ldr	r1, [pc, #20]	; (80077a8 <fflush+0x1c>)
 8007794:	4805      	ldr	r0, [pc, #20]	; (80077ac <fflush+0x20>)
 8007796:	f000 b8b1 	b.w	80078fc <_fwalk_sglue>
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <fflush+0x24>)
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	f7ff bfcd 	b.w	800773c <_fflush_r>
 80077a2:	bf00      	nop
 80077a4:	20000078 	.word	0x20000078
 80077a8:	0800773d 	.word	0x0800773d
 80077ac:	20000084 	.word	0x20000084
 80077b0:	200000d0 	.word	0x200000d0

080077b4 <std>:
 80077b4:	2300      	movs	r3, #0
 80077b6:	b510      	push	{r4, lr}
 80077b8:	4604      	mov	r4, r0
 80077ba:	e9c0 3300 	strd	r3, r3, [r0]
 80077be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077c2:	6083      	str	r3, [r0, #8]
 80077c4:	8181      	strh	r1, [r0, #12]
 80077c6:	6643      	str	r3, [r0, #100]	; 0x64
 80077c8:	81c2      	strh	r2, [r0, #14]
 80077ca:	6183      	str	r3, [r0, #24]
 80077cc:	4619      	mov	r1, r3
 80077ce:	2208      	movs	r2, #8
 80077d0:	305c      	adds	r0, #92	; 0x5c
 80077d2:	f000 fa4d 	bl	8007c70 <memset>
 80077d6:	4b0d      	ldr	r3, [pc, #52]	; (800780c <std+0x58>)
 80077d8:	6263      	str	r3, [r4, #36]	; 0x24
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <std+0x5c>)
 80077dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80077de:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <std+0x60>)
 80077e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077e2:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <std+0x64>)
 80077e4:	6323      	str	r3, [r4, #48]	; 0x30
 80077e6:	4b0d      	ldr	r3, [pc, #52]	; (800781c <std+0x68>)
 80077e8:	6224      	str	r4, [r4, #32]
 80077ea:	429c      	cmp	r4, r3
 80077ec:	d006      	beq.n	80077fc <std+0x48>
 80077ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80077f2:	4294      	cmp	r4, r2
 80077f4:	d002      	beq.n	80077fc <std+0x48>
 80077f6:	33d0      	adds	r3, #208	; 0xd0
 80077f8:	429c      	cmp	r4, r3
 80077fa:	d105      	bne.n	8007808 <std+0x54>
 80077fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007804:	f000 bac6 	b.w	8007d94 <__retarget_lock_init_recursive>
 8007808:	bd10      	pop	{r4, pc}
 800780a:	bf00      	nop
 800780c:	08007abd 	.word	0x08007abd
 8007810:	08007ae3 	.word	0x08007ae3
 8007814:	08007b1b 	.word	0x08007b1b
 8007818:	08007b3f 	.word	0x08007b3f
 800781c:	20000488 	.word	0x20000488

08007820 <stdio_exit_handler>:
 8007820:	4a02      	ldr	r2, [pc, #8]	; (800782c <stdio_exit_handler+0xc>)
 8007822:	4903      	ldr	r1, [pc, #12]	; (8007830 <stdio_exit_handler+0x10>)
 8007824:	4803      	ldr	r0, [pc, #12]	; (8007834 <stdio_exit_handler+0x14>)
 8007826:	f000 b869 	b.w	80078fc <_fwalk_sglue>
 800782a:	bf00      	nop
 800782c:	20000078 	.word	0x20000078
 8007830:	0800773d 	.word	0x0800773d
 8007834:	20000084 	.word	0x20000084

08007838 <cleanup_stdio>:
 8007838:	6841      	ldr	r1, [r0, #4]
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <cleanup_stdio+0x34>)
 800783c:	4299      	cmp	r1, r3
 800783e:	b510      	push	{r4, lr}
 8007840:	4604      	mov	r4, r0
 8007842:	d001      	beq.n	8007848 <cleanup_stdio+0x10>
 8007844:	f7ff ff7a 	bl	800773c <_fflush_r>
 8007848:	68a1      	ldr	r1, [r4, #8]
 800784a:	4b09      	ldr	r3, [pc, #36]	; (8007870 <cleanup_stdio+0x38>)
 800784c:	4299      	cmp	r1, r3
 800784e:	d002      	beq.n	8007856 <cleanup_stdio+0x1e>
 8007850:	4620      	mov	r0, r4
 8007852:	f7ff ff73 	bl	800773c <_fflush_r>
 8007856:	68e1      	ldr	r1, [r4, #12]
 8007858:	4b06      	ldr	r3, [pc, #24]	; (8007874 <cleanup_stdio+0x3c>)
 800785a:	4299      	cmp	r1, r3
 800785c:	d004      	beq.n	8007868 <cleanup_stdio+0x30>
 800785e:	4620      	mov	r0, r4
 8007860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007864:	f7ff bf6a 	b.w	800773c <_fflush_r>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	bf00      	nop
 800786c:	20000488 	.word	0x20000488
 8007870:	200004f0 	.word	0x200004f0
 8007874:	20000558 	.word	0x20000558

08007878 <global_stdio_init.part.0>:
 8007878:	b510      	push	{r4, lr}
 800787a:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <global_stdio_init.part.0+0x30>)
 800787c:	4c0b      	ldr	r4, [pc, #44]	; (80078ac <global_stdio_init.part.0+0x34>)
 800787e:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <global_stdio_init.part.0+0x38>)
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	4620      	mov	r0, r4
 8007884:	2200      	movs	r2, #0
 8007886:	2104      	movs	r1, #4
 8007888:	f7ff ff94 	bl	80077b4 <std>
 800788c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007890:	2201      	movs	r2, #1
 8007892:	2109      	movs	r1, #9
 8007894:	f7ff ff8e 	bl	80077b4 <std>
 8007898:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800789c:	2202      	movs	r2, #2
 800789e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a2:	2112      	movs	r1, #18
 80078a4:	f7ff bf86 	b.w	80077b4 <std>
 80078a8:	200005c0 	.word	0x200005c0
 80078ac:	20000488 	.word	0x20000488
 80078b0:	08007821 	.word	0x08007821

080078b4 <__sfp_lock_acquire>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__sfp_lock_acquire+0x8>)
 80078b6:	f000 ba6e 	b.w	8007d96 <__retarget_lock_acquire_recursive>
 80078ba:	bf00      	nop
 80078bc:	200005c9 	.word	0x200005c9

080078c0 <__sfp_lock_release>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__sfp_lock_release+0x8>)
 80078c2:	f000 ba69 	b.w	8007d98 <__retarget_lock_release_recursive>
 80078c6:	bf00      	nop
 80078c8:	200005c9 	.word	0x200005c9

080078cc <__sinit>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4604      	mov	r4, r0
 80078d0:	f7ff fff0 	bl	80078b4 <__sfp_lock_acquire>
 80078d4:	6a23      	ldr	r3, [r4, #32]
 80078d6:	b11b      	cbz	r3, 80078e0 <__sinit+0x14>
 80078d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078dc:	f7ff bff0 	b.w	80078c0 <__sfp_lock_release>
 80078e0:	4b04      	ldr	r3, [pc, #16]	; (80078f4 <__sinit+0x28>)
 80078e2:	6223      	str	r3, [r4, #32]
 80078e4:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <__sinit+0x2c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f5      	bne.n	80078d8 <__sinit+0xc>
 80078ec:	f7ff ffc4 	bl	8007878 <global_stdio_init.part.0>
 80078f0:	e7f2      	b.n	80078d8 <__sinit+0xc>
 80078f2:	bf00      	nop
 80078f4:	08007839 	.word	0x08007839
 80078f8:	200005c0 	.word	0x200005c0

080078fc <_fwalk_sglue>:
 80078fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007900:	4607      	mov	r7, r0
 8007902:	4688      	mov	r8, r1
 8007904:	4614      	mov	r4, r2
 8007906:	2600      	movs	r6, #0
 8007908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800790c:	f1b9 0901 	subs.w	r9, r9, #1
 8007910:	d505      	bpl.n	800791e <_fwalk_sglue+0x22>
 8007912:	6824      	ldr	r4, [r4, #0]
 8007914:	2c00      	cmp	r4, #0
 8007916:	d1f7      	bne.n	8007908 <_fwalk_sglue+0xc>
 8007918:	4630      	mov	r0, r6
 800791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791e:	89ab      	ldrh	r3, [r5, #12]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d907      	bls.n	8007934 <_fwalk_sglue+0x38>
 8007924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007928:	3301      	adds	r3, #1
 800792a:	d003      	beq.n	8007934 <_fwalk_sglue+0x38>
 800792c:	4629      	mov	r1, r5
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	4306      	orrs	r6, r0
 8007934:	3568      	adds	r5, #104	; 0x68
 8007936:	e7e9      	b.n	800790c <_fwalk_sglue+0x10>

08007938 <iprintf>:
 8007938:	b40f      	push	{r0, r1, r2, r3}
 800793a:	b507      	push	{r0, r1, r2, lr}
 800793c:	4906      	ldr	r1, [pc, #24]	; (8007958 <iprintf+0x20>)
 800793e:	ab04      	add	r3, sp, #16
 8007940:	6808      	ldr	r0, [r1, #0]
 8007942:	f853 2b04 	ldr.w	r2, [r3], #4
 8007946:	6881      	ldr	r1, [r0, #8]
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	f002 f873 	bl	8009a34 <_vfiprintf_r>
 800794e:	b003      	add	sp, #12
 8007950:	f85d eb04 	ldr.w	lr, [sp], #4
 8007954:	b004      	add	sp, #16
 8007956:	4770      	bx	lr
 8007958:	200000d0 	.word	0x200000d0

0800795c <putchar>:
 800795c:	4b02      	ldr	r3, [pc, #8]	; (8007968 <putchar+0xc>)
 800795e:	4601      	mov	r1, r0
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	6882      	ldr	r2, [r0, #8]
 8007964:	f002 bb30 	b.w	8009fc8 <_putc_r>
 8007968:	200000d0 	.word	0x200000d0

0800796c <_puts_r>:
 800796c:	6a03      	ldr	r3, [r0, #32]
 800796e:	b570      	push	{r4, r5, r6, lr}
 8007970:	6884      	ldr	r4, [r0, #8]
 8007972:	4605      	mov	r5, r0
 8007974:	460e      	mov	r6, r1
 8007976:	b90b      	cbnz	r3, 800797c <_puts_r+0x10>
 8007978:	f7ff ffa8 	bl	80078cc <__sinit>
 800797c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800797e:	07db      	lsls	r3, r3, #31
 8007980:	d405      	bmi.n	800798e <_puts_r+0x22>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	0598      	lsls	r0, r3, #22
 8007986:	d402      	bmi.n	800798e <_puts_r+0x22>
 8007988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798a:	f000 fa04 	bl	8007d96 <__retarget_lock_acquire_recursive>
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	0719      	lsls	r1, r3, #28
 8007992:	d513      	bpl.n	80079bc <_puts_r+0x50>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	b18b      	cbz	r3, 80079bc <_puts_r+0x50>
 8007998:	3e01      	subs	r6, #1
 800799a:	68a3      	ldr	r3, [r4, #8]
 800799c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079a0:	3b01      	subs	r3, #1
 80079a2:	60a3      	str	r3, [r4, #8]
 80079a4:	b9e9      	cbnz	r1, 80079e2 <_puts_r+0x76>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	da2e      	bge.n	8007a08 <_puts_r+0x9c>
 80079aa:	4622      	mov	r2, r4
 80079ac:	210a      	movs	r1, #10
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 f8c9 	bl	8007b46 <__swbuf_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d007      	beq.n	80079c8 <_puts_r+0x5c>
 80079b8:	250a      	movs	r5, #10
 80079ba:	e007      	b.n	80079cc <_puts_r+0x60>
 80079bc:	4621      	mov	r1, r4
 80079be:	4628      	mov	r0, r5
 80079c0:	f000 f8fe 	bl	8007bc0 <__swsetup_r>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d0e7      	beq.n	8007998 <_puts_r+0x2c>
 80079c8:	f04f 35ff 	mov.w	r5, #4294967295
 80079cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ce:	07da      	lsls	r2, r3, #31
 80079d0:	d405      	bmi.n	80079de <_puts_r+0x72>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	059b      	lsls	r3, r3, #22
 80079d6:	d402      	bmi.n	80079de <_puts_r+0x72>
 80079d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079da:	f000 f9dd 	bl	8007d98 <__retarget_lock_release_recursive>
 80079de:	4628      	mov	r0, r5
 80079e0:	bd70      	pop	{r4, r5, r6, pc}
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da04      	bge.n	80079f0 <_puts_r+0x84>
 80079e6:	69a2      	ldr	r2, [r4, #24]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	dc06      	bgt.n	80079fa <_puts_r+0x8e>
 80079ec:	290a      	cmp	r1, #10
 80079ee:	d004      	beq.n	80079fa <_puts_r+0x8e>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	6022      	str	r2, [r4, #0]
 80079f6:	7019      	strb	r1, [r3, #0]
 80079f8:	e7cf      	b.n	800799a <_puts_r+0x2e>
 80079fa:	4622      	mov	r2, r4
 80079fc:	4628      	mov	r0, r5
 80079fe:	f000 f8a2 	bl	8007b46 <__swbuf_r>
 8007a02:	3001      	adds	r0, #1
 8007a04:	d1c9      	bne.n	800799a <_puts_r+0x2e>
 8007a06:	e7df      	b.n	80079c8 <_puts_r+0x5c>
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	250a      	movs	r5, #10
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	6022      	str	r2, [r4, #0]
 8007a10:	701d      	strb	r5, [r3, #0]
 8007a12:	e7db      	b.n	80079cc <_puts_r+0x60>

08007a14 <puts>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	; (8007a20 <puts+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f7ff bfa7 	b.w	800796c <_puts_r>
 8007a1e:	bf00      	nop
 8007a20:	200000d0 	.word	0x200000d0

08007a24 <siprintf>:
 8007a24:	b40e      	push	{r1, r2, r3}
 8007a26:	b500      	push	{lr}
 8007a28:	b09c      	sub	sp, #112	; 0x70
 8007a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a2c:	9002      	str	r0, [sp, #8]
 8007a2e:	9006      	str	r0, [sp, #24]
 8007a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a34:	4809      	ldr	r0, [pc, #36]	; (8007a5c <siprintf+0x38>)
 8007a36:	9107      	str	r1, [sp, #28]
 8007a38:	9104      	str	r1, [sp, #16]
 8007a3a:	4909      	ldr	r1, [pc, #36]	; (8007a60 <siprintf+0x3c>)
 8007a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a40:	9105      	str	r1, [sp, #20]
 8007a42:	6800      	ldr	r0, [r0, #0]
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	a902      	add	r1, sp, #8
 8007a48:	f001 fcfa 	bl	8009440 <_svfiprintf_r>
 8007a4c:	9b02      	ldr	r3, [sp, #8]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	b01c      	add	sp, #112	; 0x70
 8007a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a58:	b003      	add	sp, #12
 8007a5a:	4770      	bx	lr
 8007a5c:	200000d0 	.word	0x200000d0
 8007a60:	ffff0208 	.word	0xffff0208

08007a64 <siscanf>:
 8007a64:	b40e      	push	{r1, r2, r3}
 8007a66:	b510      	push	{r4, lr}
 8007a68:	b09f      	sub	sp, #124	; 0x7c
 8007a6a:	ac21      	add	r4, sp, #132	; 0x84
 8007a6c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007a70:	f854 2b04 	ldr.w	r2, [r4], #4
 8007a74:	9201      	str	r2, [sp, #4]
 8007a76:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007a7a:	9004      	str	r0, [sp, #16]
 8007a7c:	9008      	str	r0, [sp, #32]
 8007a7e:	f7f8 fbf7 	bl	8000270 <strlen>
 8007a82:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <siscanf+0x50>)
 8007a84:	9005      	str	r0, [sp, #20]
 8007a86:	9009      	str	r0, [sp, #36]	; 0x24
 8007a88:	930d      	str	r3, [sp, #52]	; 0x34
 8007a8a:	480b      	ldr	r0, [pc, #44]	; (8007ab8 <siscanf+0x54>)
 8007a8c:	9a01      	ldr	r2, [sp, #4]
 8007a8e:	6800      	ldr	r0, [r0, #0]
 8007a90:	9403      	str	r4, [sp, #12]
 8007a92:	2300      	movs	r3, #0
 8007a94:	9311      	str	r3, [sp, #68]	; 0x44
 8007a96:	9316      	str	r3, [sp, #88]	; 0x58
 8007a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007aa0:	a904      	add	r1, sp, #16
 8007aa2:	4623      	mov	r3, r4
 8007aa4:	f001 fe24 	bl	80096f0 <__ssvfiscanf_r>
 8007aa8:	b01f      	add	sp, #124	; 0x7c
 8007aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aae:	b003      	add	sp, #12
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	08007adf 	.word	0x08007adf
 8007ab8:	200000d0 	.word	0x200000d0

08007abc <__sread>:
 8007abc:	b510      	push	{r4, lr}
 8007abe:	460c      	mov	r4, r1
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	f000 f918 	bl	8007cf8 <_read_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	bfab      	itete	ge
 8007acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ace:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad0:	181b      	addge	r3, r3, r0
 8007ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ad6:	bfac      	ite	ge
 8007ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ada:	81a3      	strhlt	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__seofread>:
 8007ade:	2000      	movs	r0, #0
 8007ae0:	4770      	bx	lr

08007ae2 <__swrite>:
 8007ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	898b      	ldrh	r3, [r1, #12]
 8007aea:	05db      	lsls	r3, r3, #23
 8007aec:	4605      	mov	r5, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	4616      	mov	r6, r2
 8007af2:	d505      	bpl.n	8007b00 <__swrite+0x1e>
 8007af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af8:	2302      	movs	r3, #2
 8007afa:	2200      	movs	r2, #0
 8007afc:	f000 f8ea 	bl	8007cd4 <_lseek_r>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b0a:	81a3      	strh	r3, [r4, #12]
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	463b      	mov	r3, r7
 8007b10:	4628      	mov	r0, r5
 8007b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b16:	f000 b901 	b.w	8007d1c <_write_r>

08007b1a <__sseek>:
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b22:	f000 f8d7 	bl	8007cd4 <_lseek_r>
 8007b26:	1c43      	adds	r3, r0, #1
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	bf15      	itete	ne
 8007b2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b36:	81a3      	strheq	r3, [r4, #12]
 8007b38:	bf18      	it	ne
 8007b3a:	81a3      	strhne	r3, [r4, #12]
 8007b3c:	bd10      	pop	{r4, pc}

08007b3e <__sclose>:
 8007b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b42:	f000 b8b7 	b.w	8007cb4 <_close_r>

08007b46 <__swbuf_r>:
 8007b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b48:	460e      	mov	r6, r1
 8007b4a:	4614      	mov	r4, r2
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	b118      	cbz	r0, 8007b58 <__swbuf_r+0x12>
 8007b50:	6a03      	ldr	r3, [r0, #32]
 8007b52:	b90b      	cbnz	r3, 8007b58 <__swbuf_r+0x12>
 8007b54:	f7ff feba 	bl	80078cc <__sinit>
 8007b58:	69a3      	ldr	r3, [r4, #24]
 8007b5a:	60a3      	str	r3, [r4, #8]
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	071a      	lsls	r2, r3, #28
 8007b60:	d525      	bpl.n	8007bae <__swbuf_r+0x68>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	b31b      	cbz	r3, 8007bae <__swbuf_r+0x68>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	6922      	ldr	r2, [r4, #16]
 8007b6a:	1a98      	subs	r0, r3, r2
 8007b6c:	6963      	ldr	r3, [r4, #20]
 8007b6e:	b2f6      	uxtb	r6, r6
 8007b70:	4283      	cmp	r3, r0
 8007b72:	4637      	mov	r7, r6
 8007b74:	dc04      	bgt.n	8007b80 <__swbuf_r+0x3a>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f7ff fddf 	bl	800773c <_fflush_r>
 8007b7e:	b9e0      	cbnz	r0, 8007bba <__swbuf_r+0x74>
 8007b80:	68a3      	ldr	r3, [r4, #8]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	60a3      	str	r3, [r4, #8]
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	6022      	str	r2, [r4, #0]
 8007b8c:	701e      	strb	r6, [r3, #0]
 8007b8e:	6962      	ldr	r2, [r4, #20]
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d004      	beq.n	8007ba0 <__swbuf_r+0x5a>
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	07db      	lsls	r3, r3, #31
 8007b9a:	d506      	bpl.n	8007baa <__swbuf_r+0x64>
 8007b9c:	2e0a      	cmp	r6, #10
 8007b9e:	d104      	bne.n	8007baa <__swbuf_r+0x64>
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f7ff fdca 	bl	800773c <_fflush_r>
 8007ba8:	b938      	cbnz	r0, 8007bba <__swbuf_r+0x74>
 8007baa:	4638      	mov	r0, r7
 8007bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 f805 	bl	8007bc0 <__swsetup_r>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d0d5      	beq.n	8007b66 <__swbuf_r+0x20>
 8007bba:	f04f 37ff 	mov.w	r7, #4294967295
 8007bbe:	e7f4      	b.n	8007baa <__swbuf_r+0x64>

08007bc0 <__swsetup_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4b2a      	ldr	r3, [pc, #168]	; (8007c6c <__swsetup_r+0xac>)
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	460c      	mov	r4, r1
 8007bca:	b118      	cbz	r0, 8007bd4 <__swsetup_r+0x14>
 8007bcc:	6a03      	ldr	r3, [r0, #32]
 8007bce:	b90b      	cbnz	r3, 8007bd4 <__swsetup_r+0x14>
 8007bd0:	f7ff fe7c 	bl	80078cc <__sinit>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bda:	0718      	lsls	r0, r3, #28
 8007bdc:	d422      	bmi.n	8007c24 <__swsetup_r+0x64>
 8007bde:	06d9      	lsls	r1, r3, #27
 8007be0:	d407      	bmi.n	8007bf2 <__swsetup_r+0x32>
 8007be2:	2309      	movs	r3, #9
 8007be4:	602b      	str	r3, [r5, #0]
 8007be6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bea:	81a3      	strh	r3, [r4, #12]
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf0:	e034      	b.n	8007c5c <__swsetup_r+0x9c>
 8007bf2:	0758      	lsls	r0, r3, #29
 8007bf4:	d512      	bpl.n	8007c1c <__swsetup_r+0x5c>
 8007bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bf8:	b141      	cbz	r1, 8007c0c <__swsetup_r+0x4c>
 8007bfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bfe:	4299      	cmp	r1, r3
 8007c00:	d002      	beq.n	8007c08 <__swsetup_r+0x48>
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 ff46 	bl	8008a94 <_free_r>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6363      	str	r3, [r4, #52]	; 0x34
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	2300      	movs	r3, #0
 8007c16:	6063      	str	r3, [r4, #4]
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	f043 0308 	orr.w	r3, r3, #8
 8007c22:	81a3      	strh	r3, [r4, #12]
 8007c24:	6923      	ldr	r3, [r4, #16]
 8007c26:	b94b      	cbnz	r3, 8007c3c <__swsetup_r+0x7c>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c32:	d003      	beq.n	8007c3c <__swsetup_r+0x7c>
 8007c34:	4621      	mov	r1, r4
 8007c36:	4628      	mov	r0, r5
 8007c38:	f002 f98a 	bl	8009f50 <__smakebuf_r>
 8007c3c:	89a0      	ldrh	r0, [r4, #12]
 8007c3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c42:	f010 0301 	ands.w	r3, r0, #1
 8007c46:	d00a      	beq.n	8007c5e <__swsetup_r+0x9e>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60a3      	str	r3, [r4, #8]
 8007c4c:	6963      	ldr	r3, [r4, #20]
 8007c4e:	425b      	negs	r3, r3
 8007c50:	61a3      	str	r3, [r4, #24]
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	b943      	cbnz	r3, 8007c68 <__swsetup_r+0xa8>
 8007c56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c5a:	d1c4      	bne.n	8007be6 <__swsetup_r+0x26>
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	0781      	lsls	r1, r0, #30
 8007c60:	bf58      	it	pl
 8007c62:	6963      	ldrpl	r3, [r4, #20]
 8007c64:	60a3      	str	r3, [r4, #8]
 8007c66:	e7f4      	b.n	8007c52 <__swsetup_r+0x92>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e7f7      	b.n	8007c5c <__swsetup_r+0x9c>
 8007c6c:	200000d0 	.word	0x200000d0

08007c70 <memset>:
 8007c70:	4402      	add	r2, r0
 8007c72:	4603      	mov	r3, r0
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d100      	bne.n	8007c7a <memset+0xa>
 8007c78:	4770      	bx	lr
 8007c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c7e:	e7f9      	b.n	8007c74 <memset+0x4>

08007c80 <strstr>:
 8007c80:	780a      	ldrb	r2, [r1, #0]
 8007c82:	b570      	push	{r4, r5, r6, lr}
 8007c84:	b96a      	cbnz	r2, 8007ca2 <strstr+0x22>
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d109      	bne.n	8007ca0 <strstr+0x20>
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	4605      	mov	r5, r0
 8007c90:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d0f6      	beq.n	8007c86 <strstr+0x6>
 8007c98:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007c9c:	429e      	cmp	r6, r3
 8007c9e:	d0f7      	beq.n	8007c90 <strstr+0x10>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	7803      	ldrb	r3, [r0, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1ef      	bne.n	8007c88 <strstr+0x8>
 8007ca8:	4618      	mov	r0, r3
 8007caa:	e7ec      	b.n	8007c86 <strstr+0x6>

08007cac <_localeconv_r>:
 8007cac:	4800      	ldr	r0, [pc, #0]	; (8007cb0 <_localeconv_r+0x4>)
 8007cae:	4770      	bx	lr
 8007cb0:	200001c4 	.word	0x200001c4

08007cb4 <_close_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d06      	ldr	r5, [pc, #24]	; (8007cd0 <_close_r+0x1c>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	f7fa ff1a 	bl	8002af8 <_close>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_close_r+0x1a>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_close_r+0x1a>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	200005c4 	.word	0x200005c4

08007cd4 <_lseek_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d07      	ldr	r5, [pc, #28]	; (8007cf4 <_lseek_r+0x20>)
 8007cd8:	4604      	mov	r4, r0
 8007cda:	4608      	mov	r0, r1
 8007cdc:	4611      	mov	r1, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	602a      	str	r2, [r5, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f7fa ff2f 	bl	8002b46 <_lseek>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_lseek_r+0x1e>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_lseek_r+0x1e>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	200005c4 	.word	0x200005c4

08007cf8 <_read_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d07      	ldr	r5, [pc, #28]	; (8007d18 <_read_r+0x20>)
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	602a      	str	r2, [r5, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f7f9 fbb8 	bl	800147c <_read>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_read_r+0x1e>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_read_r+0x1e>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	200005c4 	.word	0x200005c4

08007d1c <_write_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	; (8007d3c <_write_r+0x20>)
 8007d20:	4604      	mov	r4, r0
 8007d22:	4608      	mov	r0, r1
 8007d24:	4611      	mov	r1, r2
 8007d26:	2200      	movs	r2, #0
 8007d28:	602a      	str	r2, [r5, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f7fa fec8 	bl	8002ac0 <_write>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d102      	bne.n	8007d3a <_write_r+0x1e>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	b103      	cbz	r3, 8007d3a <_write_r+0x1e>
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	200005c4 	.word	0x200005c4

08007d40 <__errno>:
 8007d40:	4b01      	ldr	r3, [pc, #4]	; (8007d48 <__errno+0x8>)
 8007d42:	6818      	ldr	r0, [r3, #0]
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	200000d0 	.word	0x200000d0

08007d4c <__libc_init_array>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4d0d      	ldr	r5, [pc, #52]	; (8007d84 <__libc_init_array+0x38>)
 8007d50:	4c0d      	ldr	r4, [pc, #52]	; (8007d88 <__libc_init_array+0x3c>)
 8007d52:	1b64      	subs	r4, r4, r5
 8007d54:	10a4      	asrs	r4, r4, #2
 8007d56:	2600      	movs	r6, #0
 8007d58:	42a6      	cmp	r6, r4
 8007d5a:	d109      	bne.n	8007d70 <__libc_init_array+0x24>
 8007d5c:	4d0b      	ldr	r5, [pc, #44]	; (8007d8c <__libc_init_array+0x40>)
 8007d5e:	4c0c      	ldr	r4, [pc, #48]	; (8007d90 <__libc_init_array+0x44>)
 8007d60:	f002 fc16 	bl	800a590 <_init>
 8007d64:	1b64      	subs	r4, r4, r5
 8007d66:	10a4      	asrs	r4, r4, #2
 8007d68:	2600      	movs	r6, #0
 8007d6a:	42a6      	cmp	r6, r4
 8007d6c:	d105      	bne.n	8007d7a <__libc_init_array+0x2e>
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
 8007d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d74:	4798      	blx	r3
 8007d76:	3601      	adds	r6, #1
 8007d78:	e7ee      	b.n	8007d58 <__libc_init_array+0xc>
 8007d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7e:	4798      	blx	r3
 8007d80:	3601      	adds	r6, #1
 8007d82:	e7f2      	b.n	8007d6a <__libc_init_array+0x1e>
 8007d84:	0800af38 	.word	0x0800af38
 8007d88:	0800af38 	.word	0x0800af38
 8007d8c:	0800af38 	.word	0x0800af38
 8007d90:	0800af3c 	.word	0x0800af3c

08007d94 <__retarget_lock_init_recursive>:
 8007d94:	4770      	bx	lr

08007d96 <__retarget_lock_acquire_recursive>:
 8007d96:	4770      	bx	lr

08007d98 <__retarget_lock_release_recursive>:
 8007d98:	4770      	bx	lr

08007d9a <quorem>:
 8007d9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9e:	6903      	ldr	r3, [r0, #16]
 8007da0:	690c      	ldr	r4, [r1, #16]
 8007da2:	42a3      	cmp	r3, r4
 8007da4:	4607      	mov	r7, r0
 8007da6:	db7e      	blt.n	8007ea6 <quorem+0x10c>
 8007da8:	3c01      	subs	r4, #1
 8007daa:	f101 0814 	add.w	r8, r1, #20
 8007dae:	f100 0514 	add.w	r5, r0, #20
 8007db2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007dbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007dc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dd0:	d331      	bcc.n	8007e36 <quorem+0x9c>
 8007dd2:	f04f 0e00 	mov.w	lr, #0
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	46ac      	mov	ip, r5
 8007dda:	46f2      	mov	sl, lr
 8007ddc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007de0:	b293      	uxth	r3, r2
 8007de2:	fb06 e303 	mla	r3, r6, r3, lr
 8007de6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dea:	0c1a      	lsrs	r2, r3, #16
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	ebaa 0303 	sub.w	r3, sl, r3
 8007df2:	f8dc a000 	ldr.w	sl, [ip]
 8007df6:	fa13 f38a 	uxtah	r3, r3, sl
 8007dfa:	fb06 220e 	mla	r2, r6, lr, r2
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	9b00      	ldr	r3, [sp, #0]
 8007e02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e06:	b292      	uxth	r2, r2
 8007e08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e10:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e14:	4581      	cmp	r9, r0
 8007e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e1a:	f84c 3b04 	str.w	r3, [ip], #4
 8007e1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e22:	d2db      	bcs.n	8007ddc <quorem+0x42>
 8007e24:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e28:	b92b      	cbnz	r3, 8007e36 <quorem+0x9c>
 8007e2a:	9b01      	ldr	r3, [sp, #4]
 8007e2c:	3b04      	subs	r3, #4
 8007e2e:	429d      	cmp	r5, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	d32c      	bcc.n	8007e8e <quorem+0xf4>
 8007e34:	613c      	str	r4, [r7, #16]
 8007e36:	4638      	mov	r0, r7
 8007e38:	f001 f9a8 	bl	800918c <__mcmp>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	db22      	blt.n	8007e86 <quorem+0xec>
 8007e40:	3601      	adds	r6, #1
 8007e42:	4629      	mov	r1, r5
 8007e44:	2000      	movs	r0, #0
 8007e46:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e4a:	f8d1 c000 	ldr.w	ip, [r1]
 8007e4e:	b293      	uxth	r3, r2
 8007e50:	1ac3      	subs	r3, r0, r3
 8007e52:	0c12      	lsrs	r2, r2, #16
 8007e54:	fa13 f38c 	uxtah	r3, r3, ip
 8007e58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e66:	45c1      	cmp	r9, r8
 8007e68:	f841 3b04 	str.w	r3, [r1], #4
 8007e6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e70:	d2e9      	bcs.n	8007e46 <quorem+0xac>
 8007e72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e7a:	b922      	cbnz	r2, 8007e86 <quorem+0xec>
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	d30a      	bcc.n	8007e9a <quorem+0x100>
 8007e84:	613c      	str	r4, [r7, #16]
 8007e86:	4630      	mov	r0, r6
 8007e88:	b003      	add	sp, #12
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	6812      	ldr	r2, [r2, #0]
 8007e90:	3b04      	subs	r3, #4
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	d1ce      	bne.n	8007e34 <quorem+0x9a>
 8007e96:	3c01      	subs	r4, #1
 8007e98:	e7c9      	b.n	8007e2e <quorem+0x94>
 8007e9a:	6812      	ldr	r2, [r2, #0]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	d1f0      	bne.n	8007e84 <quorem+0xea>
 8007ea2:	3c01      	subs	r4, #1
 8007ea4:	e7eb      	b.n	8007e7e <quorem+0xe4>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e7ee      	b.n	8007e88 <quorem+0xee>
 8007eaa:	0000      	movs	r0, r0
 8007eac:	0000      	movs	r0, r0
	...

08007eb0 <_dtoa_r>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	ed2d 8b04 	vpush	{d8-d9}
 8007eb8:	69c5      	ldr	r5, [r0, #28]
 8007eba:	b093      	sub	sp, #76	; 0x4c
 8007ebc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ec0:	ec57 6b10 	vmov	r6, r7, d0
 8007ec4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ec8:	9107      	str	r1, [sp, #28]
 8007eca:	4604      	mov	r4, r0
 8007ecc:	920a      	str	r2, [sp, #40]	; 0x28
 8007ece:	930d      	str	r3, [sp, #52]	; 0x34
 8007ed0:	b975      	cbnz	r5, 8007ef0 <_dtoa_r+0x40>
 8007ed2:	2010      	movs	r0, #16
 8007ed4:	f000 fe2a 	bl	8008b2c <malloc>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	61e0      	str	r0, [r4, #28]
 8007edc:	b920      	cbnz	r0, 8007ee8 <_dtoa_r+0x38>
 8007ede:	4bae      	ldr	r3, [pc, #696]	; (8008198 <_dtoa_r+0x2e8>)
 8007ee0:	21ef      	movs	r1, #239	; 0xef
 8007ee2:	48ae      	ldr	r0, [pc, #696]	; (800819c <_dtoa_r+0x2ec>)
 8007ee4:	f002 f972 	bl	800a1cc <__assert_func>
 8007ee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007eec:	6005      	str	r5, [r0, #0]
 8007eee:	60c5      	str	r5, [r0, #12]
 8007ef0:	69e3      	ldr	r3, [r4, #28]
 8007ef2:	6819      	ldr	r1, [r3, #0]
 8007ef4:	b151      	cbz	r1, 8007f0c <_dtoa_r+0x5c>
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	604a      	str	r2, [r1, #4]
 8007efa:	2301      	movs	r3, #1
 8007efc:	4093      	lsls	r3, r2
 8007efe:	608b      	str	r3, [r1, #8]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 ff07 	bl	8008d14 <_Bfree>
 8007f06:	69e3      	ldr	r3, [r4, #28]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	1e3b      	subs	r3, r7, #0
 8007f0e:	bfbb      	ittet	lt
 8007f10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f14:	9303      	strlt	r3, [sp, #12]
 8007f16:	2300      	movge	r3, #0
 8007f18:	2201      	movlt	r2, #1
 8007f1a:	bfac      	ite	ge
 8007f1c:	f8c8 3000 	strge.w	r3, [r8]
 8007f20:	f8c8 2000 	strlt.w	r2, [r8]
 8007f24:	4b9e      	ldr	r3, [pc, #632]	; (80081a0 <_dtoa_r+0x2f0>)
 8007f26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f2a:	ea33 0308 	bics.w	r3, r3, r8
 8007f2e:	d11b      	bne.n	8007f68 <_dtoa_r+0xb8>
 8007f30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f32:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007f3c:	4333      	orrs	r3, r6
 8007f3e:	f000 8593 	beq.w	8008a68 <_dtoa_r+0xbb8>
 8007f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f44:	b963      	cbnz	r3, 8007f60 <_dtoa_r+0xb0>
 8007f46:	4b97      	ldr	r3, [pc, #604]	; (80081a4 <_dtoa_r+0x2f4>)
 8007f48:	e027      	b.n	8007f9a <_dtoa_r+0xea>
 8007f4a:	4b97      	ldr	r3, [pc, #604]	; (80081a8 <_dtoa_r+0x2f8>)
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	9800      	ldr	r0, [sp, #0]
 8007f56:	b013      	add	sp, #76	; 0x4c
 8007f58:	ecbd 8b04 	vpop	{d8-d9}
 8007f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	4b90      	ldr	r3, [pc, #576]	; (80081a4 <_dtoa_r+0x2f4>)
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	3303      	adds	r3, #3
 8007f66:	e7f3      	b.n	8007f50 <_dtoa_r+0xa0>
 8007f68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	ec51 0b17 	vmov	r0, r1, d7
 8007f72:	eeb0 8a47 	vmov.f32	s16, s14
 8007f76:	eef0 8a67 	vmov.f32	s17, s15
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f7f8 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f80:	4681      	mov	r9, r0
 8007f82:	b160      	cbz	r0, 8007f9e <_dtoa_r+0xee>
 8007f84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f86:	2301      	movs	r3, #1
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 8568 	beq.w	8008a62 <_dtoa_r+0xbb2>
 8007f92:	4b86      	ldr	r3, [pc, #536]	; (80081ac <_dtoa_r+0x2fc>)
 8007f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	e7da      	b.n	8007f54 <_dtoa_r+0xa4>
 8007f9e:	aa10      	add	r2, sp, #64	; 0x40
 8007fa0:	a911      	add	r1, sp, #68	; 0x44
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8007fa8:	eef0 0a68 	vmov.f32	s1, s17
 8007fac:	f001 f994 	bl	80092d8 <__d2b>
 8007fb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	d07f      	beq.n	80080ba <_dtoa_r+0x20a>
 8007fba:	ee18 3a90 	vmov	r3, s17
 8007fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007fc6:	ec51 0b18 	vmov	r0, r1, d8
 8007fca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007fd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4b75      	ldr	r3, [pc, #468]	; (80081b0 <_dtoa_r+0x300>)
 8007fdc:	f7f8 f954 	bl	8000288 <__aeabi_dsub>
 8007fe0:	a367      	add	r3, pc, #412	; (adr r3, 8008180 <_dtoa_r+0x2d0>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 fb07 	bl	80005f8 <__aeabi_dmul>
 8007fea:	a367      	add	r3, pc, #412	; (adr r3, 8008188 <_dtoa_r+0x2d8>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f7f8 f94c 	bl	800028c <__adddf3>
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	f7f8 fa93 	bl	8000524 <__aeabi_i2d>
 8007ffe:	a364      	add	r3, pc, #400	; (adr r3, 8008190 <_dtoa_r+0x2e0>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4630      	mov	r0, r6
 800800e:	4639      	mov	r1, r7
 8008010:	f7f8 f93c 	bl	800028c <__adddf3>
 8008014:	4606      	mov	r6, r0
 8008016:	460f      	mov	r7, r1
 8008018:	f7f8 fd9e 	bl	8000b58 <__aeabi_d2iz>
 800801c:	2200      	movs	r2, #0
 800801e:	4683      	mov	fp, r0
 8008020:	2300      	movs	r3, #0
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 fd59 	bl	8000adc <__aeabi_dcmplt>
 800802a:	b148      	cbz	r0, 8008040 <_dtoa_r+0x190>
 800802c:	4658      	mov	r0, fp
 800802e:	f7f8 fa79 	bl	8000524 <__aeabi_i2d>
 8008032:	4632      	mov	r2, r6
 8008034:	463b      	mov	r3, r7
 8008036:	f7f8 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800803a:	b908      	cbnz	r0, 8008040 <_dtoa_r+0x190>
 800803c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008040:	f1bb 0f16 	cmp.w	fp, #22
 8008044:	d857      	bhi.n	80080f6 <_dtoa_r+0x246>
 8008046:	4b5b      	ldr	r3, [pc, #364]	; (80081b4 <_dtoa_r+0x304>)
 8008048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	ec51 0b18 	vmov	r0, r1, d8
 8008054:	f7f8 fd42 	bl	8000adc <__aeabi_dcmplt>
 8008058:	2800      	cmp	r0, #0
 800805a:	d04e      	beq.n	80080fa <_dtoa_r+0x24a>
 800805c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008060:	2300      	movs	r3, #0
 8008062:	930c      	str	r3, [sp, #48]	; 0x30
 8008064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008066:	1b5b      	subs	r3, r3, r5
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	bf45      	ittet	mi
 800806c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008070:	9305      	strmi	r3, [sp, #20]
 8008072:	2300      	movpl	r3, #0
 8008074:	2300      	movmi	r3, #0
 8008076:	9206      	str	r2, [sp, #24]
 8008078:	bf54      	ite	pl
 800807a:	9305      	strpl	r3, [sp, #20]
 800807c:	9306      	strmi	r3, [sp, #24]
 800807e:	f1bb 0f00 	cmp.w	fp, #0
 8008082:	db3c      	blt.n	80080fe <_dtoa_r+0x24e>
 8008084:	9b06      	ldr	r3, [sp, #24]
 8008086:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800808a:	445b      	add	r3, fp
 800808c:	9306      	str	r3, [sp, #24]
 800808e:	2300      	movs	r3, #0
 8008090:	9308      	str	r3, [sp, #32]
 8008092:	9b07      	ldr	r3, [sp, #28]
 8008094:	2b09      	cmp	r3, #9
 8008096:	d868      	bhi.n	800816a <_dtoa_r+0x2ba>
 8008098:	2b05      	cmp	r3, #5
 800809a:	bfc4      	itt	gt
 800809c:	3b04      	subgt	r3, #4
 800809e:	9307      	strgt	r3, [sp, #28]
 80080a0:	9b07      	ldr	r3, [sp, #28]
 80080a2:	f1a3 0302 	sub.w	r3, r3, #2
 80080a6:	bfcc      	ite	gt
 80080a8:	2500      	movgt	r5, #0
 80080aa:	2501      	movle	r5, #1
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	f200 8085 	bhi.w	80081bc <_dtoa_r+0x30c>
 80080b2:	e8df f003 	tbb	[pc, r3]
 80080b6:	3b2e      	.short	0x3b2e
 80080b8:	5839      	.short	0x5839
 80080ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80080be:	441d      	add	r5, r3
 80080c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	bfc1      	itttt	gt
 80080c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80080d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80080d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80080d8:	bfd6      	itet	le
 80080da:	f1c3 0320 	rsble	r3, r3, #32
 80080de:	ea48 0003 	orrgt.w	r0, r8, r3
 80080e2:	fa06 f003 	lslle.w	r0, r6, r3
 80080e6:	f7f8 fa0d 	bl	8000504 <__aeabi_ui2d>
 80080ea:	2201      	movs	r2, #1
 80080ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80080f0:	3d01      	subs	r5, #1
 80080f2:	920e      	str	r2, [sp, #56]	; 0x38
 80080f4:	e76f      	b.n	8007fd6 <_dtoa_r+0x126>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e7b3      	b.n	8008062 <_dtoa_r+0x1b2>
 80080fa:	900c      	str	r0, [sp, #48]	; 0x30
 80080fc:	e7b2      	b.n	8008064 <_dtoa_r+0x1b4>
 80080fe:	9b05      	ldr	r3, [sp, #20]
 8008100:	eba3 030b 	sub.w	r3, r3, fp
 8008104:	9305      	str	r3, [sp, #20]
 8008106:	f1cb 0300 	rsb	r3, fp, #0
 800810a:	9308      	str	r3, [sp, #32]
 800810c:	2300      	movs	r3, #0
 800810e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008110:	e7bf      	b.n	8008092 <_dtoa_r+0x1e2>
 8008112:	2300      	movs	r3, #0
 8008114:	9309      	str	r3, [sp, #36]	; 0x24
 8008116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	dc52      	bgt.n	80081c2 <_dtoa_r+0x312>
 800811c:	2301      	movs	r3, #1
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	9304      	str	r3, [sp, #16]
 8008122:	461a      	mov	r2, r3
 8008124:	920a      	str	r2, [sp, #40]	; 0x28
 8008126:	e00b      	b.n	8008140 <_dtoa_r+0x290>
 8008128:	2301      	movs	r3, #1
 800812a:	e7f3      	b.n	8008114 <_dtoa_r+0x264>
 800812c:	2300      	movs	r3, #0
 800812e:	9309      	str	r3, [sp, #36]	; 0x24
 8008130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008132:	445b      	add	r3, fp
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	3301      	adds	r3, #1
 8008138:	2b01      	cmp	r3, #1
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	bfb8      	it	lt
 800813e:	2301      	movlt	r3, #1
 8008140:	69e0      	ldr	r0, [r4, #28]
 8008142:	2100      	movs	r1, #0
 8008144:	2204      	movs	r2, #4
 8008146:	f102 0614 	add.w	r6, r2, #20
 800814a:	429e      	cmp	r6, r3
 800814c:	d93d      	bls.n	80081ca <_dtoa_r+0x31a>
 800814e:	6041      	str	r1, [r0, #4]
 8008150:	4620      	mov	r0, r4
 8008152:	f000 fd9f 	bl	8008c94 <_Balloc>
 8008156:	9000      	str	r0, [sp, #0]
 8008158:	2800      	cmp	r0, #0
 800815a:	d139      	bne.n	80081d0 <_dtoa_r+0x320>
 800815c:	4b16      	ldr	r3, [pc, #88]	; (80081b8 <_dtoa_r+0x308>)
 800815e:	4602      	mov	r2, r0
 8008160:	f240 11af 	movw	r1, #431	; 0x1af
 8008164:	e6bd      	b.n	8007ee2 <_dtoa_r+0x32>
 8008166:	2301      	movs	r3, #1
 8008168:	e7e1      	b.n	800812e <_dtoa_r+0x27e>
 800816a:	2501      	movs	r5, #1
 800816c:	2300      	movs	r3, #0
 800816e:	9307      	str	r3, [sp, #28]
 8008170:	9509      	str	r5, [sp, #36]	; 0x24
 8008172:	f04f 33ff 	mov.w	r3, #4294967295
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	2200      	movs	r2, #0
 800817c:	2312      	movs	r3, #18
 800817e:	e7d1      	b.n	8008124 <_dtoa_r+0x274>
 8008180:	636f4361 	.word	0x636f4361
 8008184:	3fd287a7 	.word	0x3fd287a7
 8008188:	8b60c8b3 	.word	0x8b60c8b3
 800818c:	3fc68a28 	.word	0x3fc68a28
 8008190:	509f79fb 	.word	0x509f79fb
 8008194:	3fd34413 	.word	0x3fd34413
 8008198:	0800abe3 	.word	0x0800abe3
 800819c:	0800abfa 	.word	0x0800abfa
 80081a0:	7ff00000 	.word	0x7ff00000
 80081a4:	0800abdf 	.word	0x0800abdf
 80081a8:	0800abd6 	.word	0x0800abd6
 80081ac:	0800ade4 	.word	0x0800ade4
 80081b0:	3ff80000 	.word	0x3ff80000
 80081b4:	0800ace8 	.word	0x0800ace8
 80081b8:	0800ac52 	.word	0x0800ac52
 80081bc:	2301      	movs	r3, #1
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	e7d7      	b.n	8008172 <_dtoa_r+0x2c2>
 80081c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	e7ba      	b.n	8008140 <_dtoa_r+0x290>
 80081ca:	3101      	adds	r1, #1
 80081cc:	0052      	lsls	r2, r2, #1
 80081ce:	e7ba      	b.n	8008146 <_dtoa_r+0x296>
 80081d0:	69e3      	ldr	r3, [r4, #28]
 80081d2:	9a00      	ldr	r2, [sp, #0]
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	2b0e      	cmp	r3, #14
 80081da:	f200 80a8 	bhi.w	800832e <_dtoa_r+0x47e>
 80081de:	2d00      	cmp	r5, #0
 80081e0:	f000 80a5 	beq.w	800832e <_dtoa_r+0x47e>
 80081e4:	f1bb 0f00 	cmp.w	fp, #0
 80081e8:	dd38      	ble.n	800825c <_dtoa_r+0x3ac>
 80081ea:	4bc0      	ldr	r3, [pc, #768]	; (80084ec <_dtoa_r+0x63c>)
 80081ec:	f00b 020f 	and.w	r2, fp, #15
 80081f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80081f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80081fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008200:	d019      	beq.n	8008236 <_dtoa_r+0x386>
 8008202:	4bbb      	ldr	r3, [pc, #748]	; (80084f0 <_dtoa_r+0x640>)
 8008204:	ec51 0b18 	vmov	r0, r1, d8
 8008208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800820c:	f7f8 fb1e 	bl	800084c <__aeabi_ddiv>
 8008210:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008214:	f008 080f 	and.w	r8, r8, #15
 8008218:	2503      	movs	r5, #3
 800821a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80084f0 <_dtoa_r+0x640>
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	d10a      	bne.n	800823a <_dtoa_r+0x38a>
 8008224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008228:	4632      	mov	r2, r6
 800822a:	463b      	mov	r3, r7
 800822c:	f7f8 fb0e 	bl	800084c <__aeabi_ddiv>
 8008230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008234:	e02b      	b.n	800828e <_dtoa_r+0x3de>
 8008236:	2502      	movs	r5, #2
 8008238:	e7ef      	b.n	800821a <_dtoa_r+0x36a>
 800823a:	f018 0f01 	tst.w	r8, #1
 800823e:	d008      	beq.n	8008252 <_dtoa_r+0x3a2>
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008248:	f7f8 f9d6 	bl	80005f8 <__aeabi_dmul>
 800824c:	3501      	adds	r5, #1
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008256:	f109 0908 	add.w	r9, r9, #8
 800825a:	e7e0      	b.n	800821e <_dtoa_r+0x36e>
 800825c:	f000 809f 	beq.w	800839e <_dtoa_r+0x4ee>
 8008260:	f1cb 0600 	rsb	r6, fp, #0
 8008264:	4ba1      	ldr	r3, [pc, #644]	; (80084ec <_dtoa_r+0x63c>)
 8008266:	4fa2      	ldr	r7, [pc, #648]	; (80084f0 <_dtoa_r+0x640>)
 8008268:	f006 020f 	and.w	r2, r6, #15
 800826c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	ec51 0b18 	vmov	r0, r1, d8
 8008278:	f7f8 f9be 	bl	80005f8 <__aeabi_dmul>
 800827c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008280:	1136      	asrs	r6, r6, #4
 8008282:	2300      	movs	r3, #0
 8008284:	2502      	movs	r5, #2
 8008286:	2e00      	cmp	r6, #0
 8008288:	d17e      	bne.n	8008388 <_dtoa_r+0x4d8>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1d0      	bne.n	8008230 <_dtoa_r+0x380>
 800828e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008290:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8084 	beq.w	80083a2 <_dtoa_r+0x4f2>
 800829a:	4b96      	ldr	r3, [pc, #600]	; (80084f4 <_dtoa_r+0x644>)
 800829c:	2200      	movs	r2, #0
 800829e:	4640      	mov	r0, r8
 80082a0:	4649      	mov	r1, r9
 80082a2:	f7f8 fc1b 	bl	8000adc <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d07b      	beq.n	80083a2 <_dtoa_r+0x4f2>
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d078      	beq.n	80083a2 <_dtoa_r+0x4f2>
 80082b0:	9b01      	ldr	r3, [sp, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dd39      	ble.n	800832a <_dtoa_r+0x47a>
 80082b6:	4b90      	ldr	r3, [pc, #576]	; (80084f8 <_dtoa_r+0x648>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	4640      	mov	r0, r8
 80082bc:	4649      	mov	r1, r9
 80082be:	f7f8 f99b 	bl	80005f8 <__aeabi_dmul>
 80082c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082c6:	9e01      	ldr	r6, [sp, #4]
 80082c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80082cc:	3501      	adds	r5, #1
 80082ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80082d2:	4628      	mov	r0, r5
 80082d4:	f7f8 f926 	bl	8000524 <__aeabi_i2d>
 80082d8:	4642      	mov	r2, r8
 80082da:	464b      	mov	r3, r9
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	4b86      	ldr	r3, [pc, #536]	; (80084fc <_dtoa_r+0x64c>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	f7f7 ffd2 	bl	800028c <__adddf3>
 80082e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80082ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	2e00      	cmp	r6, #0
 80082f4:	d158      	bne.n	80083a8 <_dtoa_r+0x4f8>
 80082f6:	4b82      	ldr	r3, [pc, #520]	; (8008500 <_dtoa_r+0x650>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	4640      	mov	r0, r8
 80082fc:	4649      	mov	r1, r9
 80082fe:	f7f7 ffc3 	bl	8000288 <__aeabi_dsub>
 8008302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008306:	4680      	mov	r8, r0
 8008308:	4689      	mov	r9, r1
 800830a:	f7f8 fc05 	bl	8000b18 <__aeabi_dcmpgt>
 800830e:	2800      	cmp	r0, #0
 8008310:	f040 8296 	bne.w	8008840 <_dtoa_r+0x990>
 8008314:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008318:	4640      	mov	r0, r8
 800831a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800831e:	4649      	mov	r1, r9
 8008320:	f7f8 fbdc 	bl	8000adc <__aeabi_dcmplt>
 8008324:	2800      	cmp	r0, #0
 8008326:	f040 8289 	bne.w	800883c <_dtoa_r+0x98c>
 800832a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800832e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008330:	2b00      	cmp	r3, #0
 8008332:	f2c0 814e 	blt.w	80085d2 <_dtoa_r+0x722>
 8008336:	f1bb 0f0e 	cmp.w	fp, #14
 800833a:	f300 814a 	bgt.w	80085d2 <_dtoa_r+0x722>
 800833e:	4b6b      	ldr	r3, [pc, #428]	; (80084ec <_dtoa_r+0x63c>)
 8008340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008344:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834a:	2b00      	cmp	r3, #0
 800834c:	f280 80dc 	bge.w	8008508 <_dtoa_r+0x658>
 8008350:	9b04      	ldr	r3, [sp, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	f300 80d8 	bgt.w	8008508 <_dtoa_r+0x658>
 8008358:	f040 826f 	bne.w	800883a <_dtoa_r+0x98a>
 800835c:	4b68      	ldr	r3, [pc, #416]	; (8008500 <_dtoa_r+0x650>)
 800835e:	2200      	movs	r2, #0
 8008360:	4640      	mov	r0, r8
 8008362:	4649      	mov	r1, r9
 8008364:	f7f8 f948 	bl	80005f8 <__aeabi_dmul>
 8008368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800836c:	f7f8 fbca 	bl	8000b04 <__aeabi_dcmpge>
 8008370:	9e04      	ldr	r6, [sp, #16]
 8008372:	4637      	mov	r7, r6
 8008374:	2800      	cmp	r0, #0
 8008376:	f040 8245 	bne.w	8008804 <_dtoa_r+0x954>
 800837a:	9d00      	ldr	r5, [sp, #0]
 800837c:	2331      	movs	r3, #49	; 0x31
 800837e:	f805 3b01 	strb.w	r3, [r5], #1
 8008382:	f10b 0b01 	add.w	fp, fp, #1
 8008386:	e241      	b.n	800880c <_dtoa_r+0x95c>
 8008388:	07f2      	lsls	r2, r6, #31
 800838a:	d505      	bpl.n	8008398 <_dtoa_r+0x4e8>
 800838c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008390:	f7f8 f932 	bl	80005f8 <__aeabi_dmul>
 8008394:	3501      	adds	r5, #1
 8008396:	2301      	movs	r3, #1
 8008398:	1076      	asrs	r6, r6, #1
 800839a:	3708      	adds	r7, #8
 800839c:	e773      	b.n	8008286 <_dtoa_r+0x3d6>
 800839e:	2502      	movs	r5, #2
 80083a0:	e775      	b.n	800828e <_dtoa_r+0x3de>
 80083a2:	9e04      	ldr	r6, [sp, #16]
 80083a4:	465f      	mov	r7, fp
 80083a6:	e792      	b.n	80082ce <_dtoa_r+0x41e>
 80083a8:	9900      	ldr	r1, [sp, #0]
 80083aa:	4b50      	ldr	r3, [pc, #320]	; (80084ec <_dtoa_r+0x63c>)
 80083ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083b0:	4431      	add	r1, r6
 80083b2:	9102      	str	r1, [sp, #8]
 80083b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083b6:	eeb0 9a47 	vmov.f32	s18, s14
 80083ba:	eef0 9a67 	vmov.f32	s19, s15
 80083be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80083c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083c6:	2900      	cmp	r1, #0
 80083c8:	d044      	beq.n	8008454 <_dtoa_r+0x5a4>
 80083ca:	494e      	ldr	r1, [pc, #312]	; (8008504 <_dtoa_r+0x654>)
 80083cc:	2000      	movs	r0, #0
 80083ce:	f7f8 fa3d 	bl	800084c <__aeabi_ddiv>
 80083d2:	ec53 2b19 	vmov	r2, r3, d9
 80083d6:	f7f7 ff57 	bl	8000288 <__aeabi_dsub>
 80083da:	9d00      	ldr	r5, [sp, #0]
 80083dc:	ec41 0b19 	vmov	d9, r0, r1
 80083e0:	4649      	mov	r1, r9
 80083e2:	4640      	mov	r0, r8
 80083e4:	f7f8 fbb8 	bl	8000b58 <__aeabi_d2iz>
 80083e8:	4606      	mov	r6, r0
 80083ea:	f7f8 f89b 	bl	8000524 <__aeabi_i2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4640      	mov	r0, r8
 80083f4:	4649      	mov	r1, r9
 80083f6:	f7f7 ff47 	bl	8000288 <__aeabi_dsub>
 80083fa:	3630      	adds	r6, #48	; 0x30
 80083fc:	f805 6b01 	strb.w	r6, [r5], #1
 8008400:	ec53 2b19 	vmov	r2, r3, d9
 8008404:	4680      	mov	r8, r0
 8008406:	4689      	mov	r9, r1
 8008408:	f7f8 fb68 	bl	8000adc <__aeabi_dcmplt>
 800840c:	2800      	cmp	r0, #0
 800840e:	d164      	bne.n	80084da <_dtoa_r+0x62a>
 8008410:	4642      	mov	r2, r8
 8008412:	464b      	mov	r3, r9
 8008414:	4937      	ldr	r1, [pc, #220]	; (80084f4 <_dtoa_r+0x644>)
 8008416:	2000      	movs	r0, #0
 8008418:	f7f7 ff36 	bl	8000288 <__aeabi_dsub>
 800841c:	ec53 2b19 	vmov	r2, r3, d9
 8008420:	f7f8 fb5c 	bl	8000adc <__aeabi_dcmplt>
 8008424:	2800      	cmp	r0, #0
 8008426:	f040 80b6 	bne.w	8008596 <_dtoa_r+0x6e6>
 800842a:	9b02      	ldr	r3, [sp, #8]
 800842c:	429d      	cmp	r5, r3
 800842e:	f43f af7c 	beq.w	800832a <_dtoa_r+0x47a>
 8008432:	4b31      	ldr	r3, [pc, #196]	; (80084f8 <_dtoa_r+0x648>)
 8008434:	ec51 0b19 	vmov	r0, r1, d9
 8008438:	2200      	movs	r2, #0
 800843a:	f7f8 f8dd 	bl	80005f8 <__aeabi_dmul>
 800843e:	4b2e      	ldr	r3, [pc, #184]	; (80084f8 <_dtoa_r+0x648>)
 8008440:	ec41 0b19 	vmov	d9, r0, r1
 8008444:	2200      	movs	r2, #0
 8008446:	4640      	mov	r0, r8
 8008448:	4649      	mov	r1, r9
 800844a:	f7f8 f8d5 	bl	80005f8 <__aeabi_dmul>
 800844e:	4680      	mov	r8, r0
 8008450:	4689      	mov	r9, r1
 8008452:	e7c5      	b.n	80083e0 <_dtoa_r+0x530>
 8008454:	ec51 0b17 	vmov	r0, r1, d7
 8008458:	f7f8 f8ce 	bl	80005f8 <__aeabi_dmul>
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	9d00      	ldr	r5, [sp, #0]
 8008460:	930f      	str	r3, [sp, #60]	; 0x3c
 8008462:	ec41 0b19 	vmov	d9, r0, r1
 8008466:	4649      	mov	r1, r9
 8008468:	4640      	mov	r0, r8
 800846a:	f7f8 fb75 	bl	8000b58 <__aeabi_d2iz>
 800846e:	4606      	mov	r6, r0
 8008470:	f7f8 f858 	bl	8000524 <__aeabi_i2d>
 8008474:	3630      	adds	r6, #48	; 0x30
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4640      	mov	r0, r8
 800847c:	4649      	mov	r1, r9
 800847e:	f7f7 ff03 	bl	8000288 <__aeabi_dsub>
 8008482:	f805 6b01 	strb.w	r6, [r5], #1
 8008486:	9b02      	ldr	r3, [sp, #8]
 8008488:	429d      	cmp	r5, r3
 800848a:	4680      	mov	r8, r0
 800848c:	4689      	mov	r9, r1
 800848e:	f04f 0200 	mov.w	r2, #0
 8008492:	d124      	bne.n	80084de <_dtoa_r+0x62e>
 8008494:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <_dtoa_r+0x654>)
 8008496:	ec51 0b19 	vmov	r0, r1, d9
 800849a:	f7f7 fef7 	bl	800028c <__adddf3>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f8 fb37 	bl	8000b18 <__aeabi_dcmpgt>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d173      	bne.n	8008596 <_dtoa_r+0x6e6>
 80084ae:	ec53 2b19 	vmov	r2, r3, d9
 80084b2:	4914      	ldr	r1, [pc, #80]	; (8008504 <_dtoa_r+0x654>)
 80084b4:	2000      	movs	r0, #0
 80084b6:	f7f7 fee7 	bl	8000288 <__aeabi_dsub>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4640      	mov	r0, r8
 80084c0:	4649      	mov	r1, r9
 80084c2:	f7f8 fb0b 	bl	8000adc <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f43f af2f 	beq.w	800832a <_dtoa_r+0x47a>
 80084cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084ce:	1e6b      	subs	r3, r5, #1
 80084d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084d6:	2b30      	cmp	r3, #48	; 0x30
 80084d8:	d0f8      	beq.n	80084cc <_dtoa_r+0x61c>
 80084da:	46bb      	mov	fp, r7
 80084dc:	e04a      	b.n	8008574 <_dtoa_r+0x6c4>
 80084de:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <_dtoa_r+0x648>)
 80084e0:	f7f8 f88a 	bl	80005f8 <__aeabi_dmul>
 80084e4:	4680      	mov	r8, r0
 80084e6:	4689      	mov	r9, r1
 80084e8:	e7bd      	b.n	8008466 <_dtoa_r+0x5b6>
 80084ea:	bf00      	nop
 80084ec:	0800ace8 	.word	0x0800ace8
 80084f0:	0800acc0 	.word	0x0800acc0
 80084f4:	3ff00000 	.word	0x3ff00000
 80084f8:	40240000 	.word	0x40240000
 80084fc:	401c0000 	.word	0x401c0000
 8008500:	40140000 	.word	0x40140000
 8008504:	3fe00000 	.word	0x3fe00000
 8008508:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800850c:	9d00      	ldr	r5, [sp, #0]
 800850e:	4642      	mov	r2, r8
 8008510:	464b      	mov	r3, r9
 8008512:	4630      	mov	r0, r6
 8008514:	4639      	mov	r1, r7
 8008516:	f7f8 f999 	bl	800084c <__aeabi_ddiv>
 800851a:	f7f8 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800851e:	9001      	str	r0, [sp, #4]
 8008520:	f7f8 f800 	bl	8000524 <__aeabi_i2d>
 8008524:	4642      	mov	r2, r8
 8008526:	464b      	mov	r3, r9
 8008528:	f7f8 f866 	bl	80005f8 <__aeabi_dmul>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f7 fea8 	bl	8000288 <__aeabi_dsub>
 8008538:	9e01      	ldr	r6, [sp, #4]
 800853a:	9f04      	ldr	r7, [sp, #16]
 800853c:	3630      	adds	r6, #48	; 0x30
 800853e:	f805 6b01 	strb.w	r6, [r5], #1
 8008542:	9e00      	ldr	r6, [sp, #0]
 8008544:	1bae      	subs	r6, r5, r6
 8008546:	42b7      	cmp	r7, r6
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	d134      	bne.n	80085b8 <_dtoa_r+0x708>
 800854e:	f7f7 fe9d 	bl	800028c <__adddf3>
 8008552:	4642      	mov	r2, r8
 8008554:	464b      	mov	r3, r9
 8008556:	4606      	mov	r6, r0
 8008558:	460f      	mov	r7, r1
 800855a:	f7f8 fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800855e:	b9c8      	cbnz	r0, 8008594 <_dtoa_r+0x6e4>
 8008560:	4642      	mov	r2, r8
 8008562:	464b      	mov	r3, r9
 8008564:	4630      	mov	r0, r6
 8008566:	4639      	mov	r1, r7
 8008568:	f7f8 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800856c:	b110      	cbz	r0, 8008574 <_dtoa_r+0x6c4>
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	07db      	lsls	r3, r3, #31
 8008572:	d40f      	bmi.n	8008594 <_dtoa_r+0x6e4>
 8008574:	4651      	mov	r1, sl
 8008576:	4620      	mov	r0, r4
 8008578:	f000 fbcc 	bl	8008d14 <_Bfree>
 800857c:	2300      	movs	r3, #0
 800857e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008580:	702b      	strb	r3, [r5, #0]
 8008582:	f10b 0301 	add.w	r3, fp, #1
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800858a:	2b00      	cmp	r3, #0
 800858c:	f43f ace2 	beq.w	8007f54 <_dtoa_r+0xa4>
 8008590:	601d      	str	r5, [r3, #0]
 8008592:	e4df      	b.n	8007f54 <_dtoa_r+0xa4>
 8008594:	465f      	mov	r7, fp
 8008596:	462b      	mov	r3, r5
 8008598:	461d      	mov	r5, r3
 800859a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800859e:	2a39      	cmp	r2, #57	; 0x39
 80085a0:	d106      	bne.n	80085b0 <_dtoa_r+0x700>
 80085a2:	9a00      	ldr	r2, [sp, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d1f7      	bne.n	8008598 <_dtoa_r+0x6e8>
 80085a8:	9900      	ldr	r1, [sp, #0]
 80085aa:	2230      	movs	r2, #48	; 0x30
 80085ac:	3701      	adds	r7, #1
 80085ae:	700a      	strb	r2, [r1, #0]
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	3201      	adds	r2, #1
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	e790      	b.n	80084da <_dtoa_r+0x62a>
 80085b8:	4ba3      	ldr	r3, [pc, #652]	; (8008848 <_dtoa_r+0x998>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	f7f8 f81c 	bl	80005f8 <__aeabi_dmul>
 80085c0:	2200      	movs	r2, #0
 80085c2:	2300      	movs	r3, #0
 80085c4:	4606      	mov	r6, r0
 80085c6:	460f      	mov	r7, r1
 80085c8:	f7f8 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d09e      	beq.n	800850e <_dtoa_r+0x65e>
 80085d0:	e7d0      	b.n	8008574 <_dtoa_r+0x6c4>
 80085d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	f000 80ca 	beq.w	800876e <_dtoa_r+0x8be>
 80085da:	9a07      	ldr	r2, [sp, #28]
 80085dc:	2a01      	cmp	r2, #1
 80085de:	f300 80ad 	bgt.w	800873c <_dtoa_r+0x88c>
 80085e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085e4:	2a00      	cmp	r2, #0
 80085e6:	f000 80a5 	beq.w	8008734 <_dtoa_r+0x884>
 80085ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085ee:	9e08      	ldr	r6, [sp, #32]
 80085f0:	9d05      	ldr	r5, [sp, #20]
 80085f2:	9a05      	ldr	r2, [sp, #20]
 80085f4:	441a      	add	r2, r3
 80085f6:	9205      	str	r2, [sp, #20]
 80085f8:	9a06      	ldr	r2, [sp, #24]
 80085fa:	2101      	movs	r1, #1
 80085fc:	441a      	add	r2, r3
 80085fe:	4620      	mov	r0, r4
 8008600:	9206      	str	r2, [sp, #24]
 8008602:	f000 fc3d 	bl	8008e80 <__i2b>
 8008606:	4607      	mov	r7, r0
 8008608:	b165      	cbz	r5, 8008624 <_dtoa_r+0x774>
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd09      	ble.n	8008624 <_dtoa_r+0x774>
 8008610:	42ab      	cmp	r3, r5
 8008612:	9a05      	ldr	r2, [sp, #20]
 8008614:	bfa8      	it	ge
 8008616:	462b      	movge	r3, r5
 8008618:	1ad2      	subs	r2, r2, r3
 800861a:	9205      	str	r2, [sp, #20]
 800861c:	9a06      	ldr	r2, [sp, #24]
 800861e:	1aed      	subs	r5, r5, r3
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	9306      	str	r3, [sp, #24]
 8008624:	9b08      	ldr	r3, [sp, #32]
 8008626:	b1f3      	cbz	r3, 8008666 <_dtoa_r+0x7b6>
 8008628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 80a3 	beq.w	8008776 <_dtoa_r+0x8c6>
 8008630:	2e00      	cmp	r6, #0
 8008632:	dd10      	ble.n	8008656 <_dtoa_r+0x7a6>
 8008634:	4639      	mov	r1, r7
 8008636:	4632      	mov	r2, r6
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fce1 	bl	8009000 <__pow5mult>
 800863e:	4652      	mov	r2, sl
 8008640:	4601      	mov	r1, r0
 8008642:	4607      	mov	r7, r0
 8008644:	4620      	mov	r0, r4
 8008646:	f000 fc31 	bl	8008eac <__multiply>
 800864a:	4651      	mov	r1, sl
 800864c:	4680      	mov	r8, r0
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fb60 	bl	8008d14 <_Bfree>
 8008654:	46c2      	mov	sl, r8
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	1b9a      	subs	r2, r3, r6
 800865a:	d004      	beq.n	8008666 <_dtoa_r+0x7b6>
 800865c:	4651      	mov	r1, sl
 800865e:	4620      	mov	r0, r4
 8008660:	f000 fcce 	bl	8009000 <__pow5mult>
 8008664:	4682      	mov	sl, r0
 8008666:	2101      	movs	r1, #1
 8008668:	4620      	mov	r0, r4
 800866a:	f000 fc09 	bl	8008e80 <__i2b>
 800866e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008670:	2b00      	cmp	r3, #0
 8008672:	4606      	mov	r6, r0
 8008674:	f340 8081 	ble.w	800877a <_dtoa_r+0x8ca>
 8008678:	461a      	mov	r2, r3
 800867a:	4601      	mov	r1, r0
 800867c:	4620      	mov	r0, r4
 800867e:	f000 fcbf 	bl	8009000 <__pow5mult>
 8008682:	9b07      	ldr	r3, [sp, #28]
 8008684:	2b01      	cmp	r3, #1
 8008686:	4606      	mov	r6, r0
 8008688:	dd7a      	ble.n	8008780 <_dtoa_r+0x8d0>
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	6933      	ldr	r3, [r6, #16]
 8008690:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008694:	6918      	ldr	r0, [r3, #16]
 8008696:	f000 fba5 	bl	8008de4 <__hi0bits>
 800869a:	f1c0 0020 	rsb	r0, r0, #32
 800869e:	9b06      	ldr	r3, [sp, #24]
 80086a0:	4418      	add	r0, r3
 80086a2:	f010 001f 	ands.w	r0, r0, #31
 80086a6:	f000 8094 	beq.w	80087d2 <_dtoa_r+0x922>
 80086aa:	f1c0 0320 	rsb	r3, r0, #32
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	f340 8085 	ble.w	80087be <_dtoa_r+0x90e>
 80086b4:	9b05      	ldr	r3, [sp, #20]
 80086b6:	f1c0 001c 	rsb	r0, r0, #28
 80086ba:	4403      	add	r3, r0
 80086bc:	9305      	str	r3, [sp, #20]
 80086be:	9b06      	ldr	r3, [sp, #24]
 80086c0:	4403      	add	r3, r0
 80086c2:	4405      	add	r5, r0
 80086c4:	9306      	str	r3, [sp, #24]
 80086c6:	9b05      	ldr	r3, [sp, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dd05      	ble.n	80086d8 <_dtoa_r+0x828>
 80086cc:	4651      	mov	r1, sl
 80086ce:	461a      	mov	r2, r3
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fcef 	bl	80090b4 <__lshift>
 80086d6:	4682      	mov	sl, r0
 80086d8:	9b06      	ldr	r3, [sp, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dd05      	ble.n	80086ea <_dtoa_r+0x83a>
 80086de:	4631      	mov	r1, r6
 80086e0:	461a      	mov	r2, r3
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 fce6 	bl	80090b4 <__lshift>
 80086e8:	4606      	mov	r6, r0
 80086ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d072      	beq.n	80087d6 <_dtoa_r+0x926>
 80086f0:	4631      	mov	r1, r6
 80086f2:	4650      	mov	r0, sl
 80086f4:	f000 fd4a 	bl	800918c <__mcmp>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	da6c      	bge.n	80087d6 <_dtoa_r+0x926>
 80086fc:	2300      	movs	r3, #0
 80086fe:	4651      	mov	r1, sl
 8008700:	220a      	movs	r2, #10
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fb28 	bl	8008d58 <__multadd>
 8008708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800870e:	4682      	mov	sl, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 81b0 	beq.w	8008a76 <_dtoa_r+0xbc6>
 8008716:	2300      	movs	r3, #0
 8008718:	4639      	mov	r1, r7
 800871a:	220a      	movs	r2, #10
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fb1b 	bl	8008d58 <__multadd>
 8008722:	9b01      	ldr	r3, [sp, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	4607      	mov	r7, r0
 8008728:	f300 8096 	bgt.w	8008858 <_dtoa_r+0x9a8>
 800872c:	9b07      	ldr	r3, [sp, #28]
 800872e:	2b02      	cmp	r3, #2
 8008730:	dc59      	bgt.n	80087e6 <_dtoa_r+0x936>
 8008732:	e091      	b.n	8008858 <_dtoa_r+0x9a8>
 8008734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800873a:	e758      	b.n	80085ee <_dtoa_r+0x73e>
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	1e5e      	subs	r6, r3, #1
 8008740:	9b08      	ldr	r3, [sp, #32]
 8008742:	42b3      	cmp	r3, r6
 8008744:	bfbf      	itttt	lt
 8008746:	9b08      	ldrlt	r3, [sp, #32]
 8008748:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800874a:	9608      	strlt	r6, [sp, #32]
 800874c:	1af3      	sublt	r3, r6, r3
 800874e:	bfb4      	ite	lt
 8008750:	18d2      	addlt	r2, r2, r3
 8008752:	1b9e      	subge	r6, r3, r6
 8008754:	9b04      	ldr	r3, [sp, #16]
 8008756:	bfbc      	itt	lt
 8008758:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800875a:	2600      	movlt	r6, #0
 800875c:	2b00      	cmp	r3, #0
 800875e:	bfb7      	itett	lt
 8008760:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008764:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008768:	1a9d      	sublt	r5, r3, r2
 800876a:	2300      	movlt	r3, #0
 800876c:	e741      	b.n	80085f2 <_dtoa_r+0x742>
 800876e:	9e08      	ldr	r6, [sp, #32]
 8008770:	9d05      	ldr	r5, [sp, #20]
 8008772:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008774:	e748      	b.n	8008608 <_dtoa_r+0x758>
 8008776:	9a08      	ldr	r2, [sp, #32]
 8008778:	e770      	b.n	800865c <_dtoa_r+0x7ac>
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	2b01      	cmp	r3, #1
 800877e:	dc19      	bgt.n	80087b4 <_dtoa_r+0x904>
 8008780:	9b02      	ldr	r3, [sp, #8]
 8008782:	b9bb      	cbnz	r3, 80087b4 <_dtoa_r+0x904>
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800878a:	b99b      	cbnz	r3, 80087b4 <_dtoa_r+0x904>
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008792:	0d1b      	lsrs	r3, r3, #20
 8008794:	051b      	lsls	r3, r3, #20
 8008796:	b183      	cbz	r3, 80087ba <_dtoa_r+0x90a>
 8008798:	9b05      	ldr	r3, [sp, #20]
 800879a:	3301      	adds	r3, #1
 800879c:	9305      	str	r3, [sp, #20]
 800879e:	9b06      	ldr	r3, [sp, #24]
 80087a0:	3301      	adds	r3, #1
 80087a2:	9306      	str	r3, [sp, #24]
 80087a4:	f04f 0801 	mov.w	r8, #1
 80087a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f47f af6f 	bne.w	800868e <_dtoa_r+0x7de>
 80087b0:	2001      	movs	r0, #1
 80087b2:	e774      	b.n	800869e <_dtoa_r+0x7ee>
 80087b4:	f04f 0800 	mov.w	r8, #0
 80087b8:	e7f6      	b.n	80087a8 <_dtoa_r+0x8f8>
 80087ba:	4698      	mov	r8, r3
 80087bc:	e7f4      	b.n	80087a8 <_dtoa_r+0x8f8>
 80087be:	d082      	beq.n	80086c6 <_dtoa_r+0x816>
 80087c0:	9a05      	ldr	r2, [sp, #20]
 80087c2:	331c      	adds	r3, #28
 80087c4:	441a      	add	r2, r3
 80087c6:	9205      	str	r2, [sp, #20]
 80087c8:	9a06      	ldr	r2, [sp, #24]
 80087ca:	441a      	add	r2, r3
 80087cc:	441d      	add	r5, r3
 80087ce:	9206      	str	r2, [sp, #24]
 80087d0:	e779      	b.n	80086c6 <_dtoa_r+0x816>
 80087d2:	4603      	mov	r3, r0
 80087d4:	e7f4      	b.n	80087c0 <_dtoa_r+0x910>
 80087d6:	9b04      	ldr	r3, [sp, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dc37      	bgt.n	800884c <_dtoa_r+0x99c>
 80087dc:	9b07      	ldr	r3, [sp, #28]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	dd34      	ble.n	800884c <_dtoa_r+0x99c>
 80087e2:	9b04      	ldr	r3, [sp, #16]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	9b01      	ldr	r3, [sp, #4]
 80087e8:	b963      	cbnz	r3, 8008804 <_dtoa_r+0x954>
 80087ea:	4631      	mov	r1, r6
 80087ec:	2205      	movs	r2, #5
 80087ee:	4620      	mov	r0, r4
 80087f0:	f000 fab2 	bl	8008d58 <__multadd>
 80087f4:	4601      	mov	r1, r0
 80087f6:	4606      	mov	r6, r0
 80087f8:	4650      	mov	r0, sl
 80087fa:	f000 fcc7 	bl	800918c <__mcmp>
 80087fe:	2800      	cmp	r0, #0
 8008800:	f73f adbb 	bgt.w	800837a <_dtoa_r+0x4ca>
 8008804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008806:	9d00      	ldr	r5, [sp, #0]
 8008808:	ea6f 0b03 	mvn.w	fp, r3
 800880c:	f04f 0800 	mov.w	r8, #0
 8008810:	4631      	mov	r1, r6
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fa7e 	bl	8008d14 <_Bfree>
 8008818:	2f00      	cmp	r7, #0
 800881a:	f43f aeab 	beq.w	8008574 <_dtoa_r+0x6c4>
 800881e:	f1b8 0f00 	cmp.w	r8, #0
 8008822:	d005      	beq.n	8008830 <_dtoa_r+0x980>
 8008824:	45b8      	cmp	r8, r7
 8008826:	d003      	beq.n	8008830 <_dtoa_r+0x980>
 8008828:	4641      	mov	r1, r8
 800882a:	4620      	mov	r0, r4
 800882c:	f000 fa72 	bl	8008d14 <_Bfree>
 8008830:	4639      	mov	r1, r7
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fa6e 	bl	8008d14 <_Bfree>
 8008838:	e69c      	b.n	8008574 <_dtoa_r+0x6c4>
 800883a:	2600      	movs	r6, #0
 800883c:	4637      	mov	r7, r6
 800883e:	e7e1      	b.n	8008804 <_dtoa_r+0x954>
 8008840:	46bb      	mov	fp, r7
 8008842:	4637      	mov	r7, r6
 8008844:	e599      	b.n	800837a <_dtoa_r+0x4ca>
 8008846:	bf00      	nop
 8008848:	40240000 	.word	0x40240000
 800884c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 80c8 	beq.w	80089e4 <_dtoa_r+0xb34>
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	9301      	str	r3, [sp, #4]
 8008858:	2d00      	cmp	r5, #0
 800885a:	dd05      	ble.n	8008868 <_dtoa_r+0x9b8>
 800885c:	4639      	mov	r1, r7
 800885e:	462a      	mov	r2, r5
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fc27 	bl	80090b4 <__lshift>
 8008866:	4607      	mov	r7, r0
 8008868:	f1b8 0f00 	cmp.w	r8, #0
 800886c:	d05b      	beq.n	8008926 <_dtoa_r+0xa76>
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fa0f 	bl	8008c94 <_Balloc>
 8008876:	4605      	mov	r5, r0
 8008878:	b928      	cbnz	r0, 8008886 <_dtoa_r+0x9d6>
 800887a:	4b83      	ldr	r3, [pc, #524]	; (8008a88 <_dtoa_r+0xbd8>)
 800887c:	4602      	mov	r2, r0
 800887e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008882:	f7ff bb2e 	b.w	8007ee2 <_dtoa_r+0x32>
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	3202      	adds	r2, #2
 800888a:	0092      	lsls	r2, r2, #2
 800888c:	f107 010c 	add.w	r1, r7, #12
 8008890:	300c      	adds	r0, #12
 8008892:	f001 fc8d 	bl	800a1b0 <memcpy>
 8008896:	2201      	movs	r2, #1
 8008898:	4629      	mov	r1, r5
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fc0a 	bl	80090b4 <__lshift>
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	3301      	adds	r3, #1
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088aa:	4413      	add	r3, r2
 80088ac:	9308      	str	r3, [sp, #32]
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	46b8      	mov	r8, r7
 80088b6:	9306      	str	r3, [sp, #24]
 80088b8:	4607      	mov	r7, r0
 80088ba:	9b04      	ldr	r3, [sp, #16]
 80088bc:	4631      	mov	r1, r6
 80088be:	3b01      	subs	r3, #1
 80088c0:	4650      	mov	r0, sl
 80088c2:	9301      	str	r3, [sp, #4]
 80088c4:	f7ff fa69 	bl	8007d9a <quorem>
 80088c8:	4641      	mov	r1, r8
 80088ca:	9002      	str	r0, [sp, #8]
 80088cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80088d0:	4650      	mov	r0, sl
 80088d2:	f000 fc5b 	bl	800918c <__mcmp>
 80088d6:	463a      	mov	r2, r7
 80088d8:	9005      	str	r0, [sp, #20]
 80088da:	4631      	mov	r1, r6
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fc71 	bl	80091c4 <__mdiff>
 80088e2:	68c2      	ldr	r2, [r0, #12]
 80088e4:	4605      	mov	r5, r0
 80088e6:	bb02      	cbnz	r2, 800892a <_dtoa_r+0xa7a>
 80088e8:	4601      	mov	r1, r0
 80088ea:	4650      	mov	r0, sl
 80088ec:	f000 fc4e 	bl	800918c <__mcmp>
 80088f0:	4602      	mov	r2, r0
 80088f2:	4629      	mov	r1, r5
 80088f4:	4620      	mov	r0, r4
 80088f6:	9209      	str	r2, [sp, #36]	; 0x24
 80088f8:	f000 fa0c 	bl	8008d14 <_Bfree>
 80088fc:	9b07      	ldr	r3, [sp, #28]
 80088fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008900:	9d04      	ldr	r5, [sp, #16]
 8008902:	ea43 0102 	orr.w	r1, r3, r2
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	4319      	orrs	r1, r3
 800890a:	d110      	bne.n	800892e <_dtoa_r+0xa7e>
 800890c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008910:	d029      	beq.n	8008966 <_dtoa_r+0xab6>
 8008912:	9b05      	ldr	r3, [sp, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	dd02      	ble.n	800891e <_dtoa_r+0xa6e>
 8008918:	9b02      	ldr	r3, [sp, #8]
 800891a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800891e:	9b01      	ldr	r3, [sp, #4]
 8008920:	f883 9000 	strb.w	r9, [r3]
 8008924:	e774      	b.n	8008810 <_dtoa_r+0x960>
 8008926:	4638      	mov	r0, r7
 8008928:	e7ba      	b.n	80088a0 <_dtoa_r+0x9f0>
 800892a:	2201      	movs	r2, #1
 800892c:	e7e1      	b.n	80088f2 <_dtoa_r+0xa42>
 800892e:	9b05      	ldr	r3, [sp, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	db04      	blt.n	800893e <_dtoa_r+0xa8e>
 8008934:	9907      	ldr	r1, [sp, #28]
 8008936:	430b      	orrs	r3, r1
 8008938:	9906      	ldr	r1, [sp, #24]
 800893a:	430b      	orrs	r3, r1
 800893c:	d120      	bne.n	8008980 <_dtoa_r+0xad0>
 800893e:	2a00      	cmp	r2, #0
 8008940:	dded      	ble.n	800891e <_dtoa_r+0xa6e>
 8008942:	4651      	mov	r1, sl
 8008944:	2201      	movs	r2, #1
 8008946:	4620      	mov	r0, r4
 8008948:	f000 fbb4 	bl	80090b4 <__lshift>
 800894c:	4631      	mov	r1, r6
 800894e:	4682      	mov	sl, r0
 8008950:	f000 fc1c 	bl	800918c <__mcmp>
 8008954:	2800      	cmp	r0, #0
 8008956:	dc03      	bgt.n	8008960 <_dtoa_r+0xab0>
 8008958:	d1e1      	bne.n	800891e <_dtoa_r+0xa6e>
 800895a:	f019 0f01 	tst.w	r9, #1
 800895e:	d0de      	beq.n	800891e <_dtoa_r+0xa6e>
 8008960:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008964:	d1d8      	bne.n	8008918 <_dtoa_r+0xa68>
 8008966:	9a01      	ldr	r2, [sp, #4]
 8008968:	2339      	movs	r3, #57	; 0x39
 800896a:	7013      	strb	r3, [r2, #0]
 800896c:	462b      	mov	r3, r5
 800896e:	461d      	mov	r5, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008976:	2a39      	cmp	r2, #57	; 0x39
 8008978:	d06c      	beq.n	8008a54 <_dtoa_r+0xba4>
 800897a:	3201      	adds	r2, #1
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	e747      	b.n	8008810 <_dtoa_r+0x960>
 8008980:	2a00      	cmp	r2, #0
 8008982:	dd07      	ble.n	8008994 <_dtoa_r+0xae4>
 8008984:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008988:	d0ed      	beq.n	8008966 <_dtoa_r+0xab6>
 800898a:	9a01      	ldr	r2, [sp, #4]
 800898c:	f109 0301 	add.w	r3, r9, #1
 8008990:	7013      	strb	r3, [r2, #0]
 8008992:	e73d      	b.n	8008810 <_dtoa_r+0x960>
 8008994:	9b04      	ldr	r3, [sp, #16]
 8008996:	9a08      	ldr	r2, [sp, #32]
 8008998:	f803 9c01 	strb.w	r9, [r3, #-1]
 800899c:	4293      	cmp	r3, r2
 800899e:	d043      	beq.n	8008a28 <_dtoa_r+0xb78>
 80089a0:	4651      	mov	r1, sl
 80089a2:	2300      	movs	r3, #0
 80089a4:	220a      	movs	r2, #10
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 f9d6 	bl	8008d58 <__multadd>
 80089ac:	45b8      	cmp	r8, r7
 80089ae:	4682      	mov	sl, r0
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	f04f 020a 	mov.w	r2, #10
 80089b8:	4641      	mov	r1, r8
 80089ba:	4620      	mov	r0, r4
 80089bc:	d107      	bne.n	80089ce <_dtoa_r+0xb1e>
 80089be:	f000 f9cb 	bl	8008d58 <__multadd>
 80089c2:	4680      	mov	r8, r0
 80089c4:	4607      	mov	r7, r0
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	3301      	adds	r3, #1
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	e775      	b.n	80088ba <_dtoa_r+0xa0a>
 80089ce:	f000 f9c3 	bl	8008d58 <__multadd>
 80089d2:	4639      	mov	r1, r7
 80089d4:	4680      	mov	r8, r0
 80089d6:	2300      	movs	r3, #0
 80089d8:	220a      	movs	r2, #10
 80089da:	4620      	mov	r0, r4
 80089dc:	f000 f9bc 	bl	8008d58 <__multadd>
 80089e0:	4607      	mov	r7, r0
 80089e2:	e7f0      	b.n	80089c6 <_dtoa_r+0xb16>
 80089e4:	9b04      	ldr	r3, [sp, #16]
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	9d00      	ldr	r5, [sp, #0]
 80089ea:	4631      	mov	r1, r6
 80089ec:	4650      	mov	r0, sl
 80089ee:	f7ff f9d4 	bl	8007d9a <quorem>
 80089f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	f805 9b01 	strb.w	r9, [r5], #1
 80089fc:	1aea      	subs	r2, r5, r3
 80089fe:	9b01      	ldr	r3, [sp, #4]
 8008a00:	4293      	cmp	r3, r2
 8008a02:	dd07      	ble.n	8008a14 <_dtoa_r+0xb64>
 8008a04:	4651      	mov	r1, sl
 8008a06:	2300      	movs	r3, #0
 8008a08:	220a      	movs	r2, #10
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f000 f9a4 	bl	8008d58 <__multadd>
 8008a10:	4682      	mov	sl, r0
 8008a12:	e7ea      	b.n	80089ea <_dtoa_r+0xb3a>
 8008a14:	9b01      	ldr	r3, [sp, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfc8      	it	gt
 8008a1a:	461d      	movgt	r5, r3
 8008a1c:	9b00      	ldr	r3, [sp, #0]
 8008a1e:	bfd8      	it	le
 8008a20:	2501      	movle	r5, #1
 8008a22:	441d      	add	r5, r3
 8008a24:	f04f 0800 	mov.w	r8, #0
 8008a28:	4651      	mov	r1, sl
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f000 fb41 	bl	80090b4 <__lshift>
 8008a32:	4631      	mov	r1, r6
 8008a34:	4682      	mov	sl, r0
 8008a36:	f000 fba9 	bl	800918c <__mcmp>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	dc96      	bgt.n	800896c <_dtoa_r+0xabc>
 8008a3e:	d102      	bne.n	8008a46 <_dtoa_r+0xb96>
 8008a40:	f019 0f01 	tst.w	r9, #1
 8008a44:	d192      	bne.n	800896c <_dtoa_r+0xabc>
 8008a46:	462b      	mov	r3, r5
 8008a48:	461d      	mov	r5, r3
 8008a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4e:	2a30      	cmp	r2, #48	; 0x30
 8008a50:	d0fa      	beq.n	8008a48 <_dtoa_r+0xb98>
 8008a52:	e6dd      	b.n	8008810 <_dtoa_r+0x960>
 8008a54:	9a00      	ldr	r2, [sp, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d189      	bne.n	800896e <_dtoa_r+0xabe>
 8008a5a:	f10b 0b01 	add.w	fp, fp, #1
 8008a5e:	2331      	movs	r3, #49	; 0x31
 8008a60:	e796      	b.n	8008990 <_dtoa_r+0xae0>
 8008a62:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <_dtoa_r+0xbdc>)
 8008a64:	f7ff ba99 	b.w	8007f9a <_dtoa_r+0xea>
 8008a68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f47f aa6d 	bne.w	8007f4a <_dtoa_r+0x9a>
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <_dtoa_r+0xbe0>)
 8008a72:	f7ff ba92 	b.w	8007f9a <_dtoa_r+0xea>
 8008a76:	9b01      	ldr	r3, [sp, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dcb5      	bgt.n	80089e8 <_dtoa_r+0xb38>
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	f73f aeb1 	bgt.w	80087e6 <_dtoa_r+0x936>
 8008a84:	e7b0      	b.n	80089e8 <_dtoa_r+0xb38>
 8008a86:	bf00      	nop
 8008a88:	0800ac52 	.word	0x0800ac52
 8008a8c:	0800ade3 	.word	0x0800ade3
 8008a90:	0800abd6 	.word	0x0800abd6

08008a94 <_free_r>:
 8008a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a96:	2900      	cmp	r1, #0
 8008a98:	d044      	beq.n	8008b24 <_free_r+0x90>
 8008a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a9e:	9001      	str	r0, [sp, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8008aa6:	bfb8      	it	lt
 8008aa8:	18e4      	addlt	r4, r4, r3
 8008aaa:	f000 f8e7 	bl	8008c7c <__malloc_lock>
 8008aae:	4a1e      	ldr	r2, [pc, #120]	; (8008b28 <_free_r+0x94>)
 8008ab0:	9801      	ldr	r0, [sp, #4]
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	b933      	cbnz	r3, 8008ac4 <_free_r+0x30>
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	6014      	str	r4, [r2, #0]
 8008aba:	b003      	add	sp, #12
 8008abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ac0:	f000 b8e2 	b.w	8008c88 <__malloc_unlock>
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	d908      	bls.n	8008ada <_free_r+0x46>
 8008ac8:	6825      	ldr	r5, [r4, #0]
 8008aca:	1961      	adds	r1, r4, r5
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf01      	itttt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	1949      	addeq	r1, r1, r5
 8008ad6:	6021      	streq	r1, [r4, #0]
 8008ad8:	e7ed      	b.n	8008ab6 <_free_r+0x22>
 8008ada:	461a      	mov	r2, r3
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	b10b      	cbz	r3, 8008ae4 <_free_r+0x50>
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d9fa      	bls.n	8008ada <_free_r+0x46>
 8008ae4:	6811      	ldr	r1, [r2, #0]
 8008ae6:	1855      	adds	r5, r2, r1
 8008ae8:	42a5      	cmp	r5, r4
 8008aea:	d10b      	bne.n	8008b04 <_free_r+0x70>
 8008aec:	6824      	ldr	r4, [r4, #0]
 8008aee:	4421      	add	r1, r4
 8008af0:	1854      	adds	r4, r2, r1
 8008af2:	42a3      	cmp	r3, r4
 8008af4:	6011      	str	r1, [r2, #0]
 8008af6:	d1e0      	bne.n	8008aba <_free_r+0x26>
 8008af8:	681c      	ldr	r4, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	6053      	str	r3, [r2, #4]
 8008afe:	440c      	add	r4, r1
 8008b00:	6014      	str	r4, [r2, #0]
 8008b02:	e7da      	b.n	8008aba <_free_r+0x26>
 8008b04:	d902      	bls.n	8008b0c <_free_r+0x78>
 8008b06:	230c      	movs	r3, #12
 8008b08:	6003      	str	r3, [r0, #0]
 8008b0a:	e7d6      	b.n	8008aba <_free_r+0x26>
 8008b0c:	6825      	ldr	r5, [r4, #0]
 8008b0e:	1961      	adds	r1, r4, r5
 8008b10:	428b      	cmp	r3, r1
 8008b12:	bf04      	itt	eq
 8008b14:	6819      	ldreq	r1, [r3, #0]
 8008b16:	685b      	ldreq	r3, [r3, #4]
 8008b18:	6063      	str	r3, [r4, #4]
 8008b1a:	bf04      	itt	eq
 8008b1c:	1949      	addeq	r1, r1, r5
 8008b1e:	6021      	streq	r1, [r4, #0]
 8008b20:	6054      	str	r4, [r2, #4]
 8008b22:	e7ca      	b.n	8008aba <_free_r+0x26>
 8008b24:	b003      	add	sp, #12
 8008b26:	bd30      	pop	{r4, r5, pc}
 8008b28:	200005cc 	.word	0x200005cc

08008b2c <malloc>:
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <malloc+0xc>)
 8008b2e:	4601      	mov	r1, r0
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	f000 b823 	b.w	8008b7c <_malloc_r>
 8008b36:	bf00      	nop
 8008b38:	200000d0 	.word	0x200000d0

08008b3c <sbrk_aligned>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	4e0e      	ldr	r6, [pc, #56]	; (8008b78 <sbrk_aligned+0x3c>)
 8008b40:	460c      	mov	r4, r1
 8008b42:	6831      	ldr	r1, [r6, #0]
 8008b44:	4605      	mov	r5, r0
 8008b46:	b911      	cbnz	r1, 8008b4e <sbrk_aligned+0x12>
 8008b48:	f001 fb22 	bl	800a190 <_sbrk_r>
 8008b4c:	6030      	str	r0, [r6, #0]
 8008b4e:	4621      	mov	r1, r4
 8008b50:	4628      	mov	r0, r5
 8008b52:	f001 fb1d 	bl	800a190 <_sbrk_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d00a      	beq.n	8008b70 <sbrk_aligned+0x34>
 8008b5a:	1cc4      	adds	r4, r0, #3
 8008b5c:	f024 0403 	bic.w	r4, r4, #3
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d007      	beq.n	8008b74 <sbrk_aligned+0x38>
 8008b64:	1a21      	subs	r1, r4, r0
 8008b66:	4628      	mov	r0, r5
 8008b68:	f001 fb12 	bl	800a190 <_sbrk_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d101      	bne.n	8008b74 <sbrk_aligned+0x38>
 8008b70:	f04f 34ff 	mov.w	r4, #4294967295
 8008b74:	4620      	mov	r0, r4
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	200005d0 	.word	0x200005d0

08008b7c <_malloc_r>:
 8008b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b80:	1ccd      	adds	r5, r1, #3
 8008b82:	f025 0503 	bic.w	r5, r5, #3
 8008b86:	3508      	adds	r5, #8
 8008b88:	2d0c      	cmp	r5, #12
 8008b8a:	bf38      	it	cc
 8008b8c:	250c      	movcc	r5, #12
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	4607      	mov	r7, r0
 8008b92:	db01      	blt.n	8008b98 <_malloc_r+0x1c>
 8008b94:	42a9      	cmp	r1, r5
 8008b96:	d905      	bls.n	8008ba4 <_malloc_r+0x28>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	2600      	movs	r6, #0
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ba4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c78 <_malloc_r+0xfc>
 8008ba8:	f000 f868 	bl	8008c7c <__malloc_lock>
 8008bac:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb0:	461c      	mov	r4, r3
 8008bb2:	bb5c      	cbnz	r4, 8008c0c <_malloc_r+0x90>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	f7ff ffc0 	bl	8008b3c <sbrk_aligned>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	d155      	bne.n	8008c6e <_malloc_r+0xf2>
 8008bc2:	f8d8 4000 	ldr.w	r4, [r8]
 8008bc6:	4626      	mov	r6, r4
 8008bc8:	2e00      	cmp	r6, #0
 8008bca:	d145      	bne.n	8008c58 <_malloc_r+0xdc>
 8008bcc:	2c00      	cmp	r4, #0
 8008bce:	d048      	beq.n	8008c62 <_malloc_r+0xe6>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	eb04 0903 	add.w	r9, r4, r3
 8008bda:	f001 fad9 	bl	800a190 <_sbrk_r>
 8008bde:	4581      	cmp	r9, r0
 8008be0:	d13f      	bne.n	8008c62 <_malloc_r+0xe6>
 8008be2:	6821      	ldr	r1, [r4, #0]
 8008be4:	1a6d      	subs	r5, r5, r1
 8008be6:	4629      	mov	r1, r5
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7ff ffa7 	bl	8008b3c <sbrk_aligned>
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d037      	beq.n	8008c62 <_malloc_r+0xe6>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	442b      	add	r3, r5
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d038      	beq.n	8008c72 <_malloc_r+0xf6>
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	42a2      	cmp	r2, r4
 8008c04:	d12b      	bne.n	8008c5e <_malloc_r+0xe2>
 8008c06:	2200      	movs	r2, #0
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	e00f      	b.n	8008c2c <_malloc_r+0xb0>
 8008c0c:	6822      	ldr	r2, [r4, #0]
 8008c0e:	1b52      	subs	r2, r2, r5
 8008c10:	d41f      	bmi.n	8008c52 <_malloc_r+0xd6>
 8008c12:	2a0b      	cmp	r2, #11
 8008c14:	d917      	bls.n	8008c46 <_malloc_r+0xca>
 8008c16:	1961      	adds	r1, r4, r5
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	6025      	str	r5, [r4, #0]
 8008c1c:	bf18      	it	ne
 8008c1e:	6059      	strne	r1, [r3, #4]
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	bf08      	it	eq
 8008c24:	f8c8 1000 	streq.w	r1, [r8]
 8008c28:	5162      	str	r2, [r4, r5]
 8008c2a:	604b      	str	r3, [r1, #4]
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f104 060b 	add.w	r6, r4, #11
 8008c32:	f000 f829 	bl	8008c88 <__malloc_unlock>
 8008c36:	f026 0607 	bic.w	r6, r6, #7
 8008c3a:	1d23      	adds	r3, r4, #4
 8008c3c:	1af2      	subs	r2, r6, r3
 8008c3e:	d0ae      	beq.n	8008b9e <_malloc_r+0x22>
 8008c40:	1b9b      	subs	r3, r3, r6
 8008c42:	50a3      	str	r3, [r4, r2]
 8008c44:	e7ab      	b.n	8008b9e <_malloc_r+0x22>
 8008c46:	42a3      	cmp	r3, r4
 8008c48:	6862      	ldr	r2, [r4, #4]
 8008c4a:	d1dd      	bne.n	8008c08 <_malloc_r+0x8c>
 8008c4c:	f8c8 2000 	str.w	r2, [r8]
 8008c50:	e7ec      	b.n	8008c2c <_malloc_r+0xb0>
 8008c52:	4623      	mov	r3, r4
 8008c54:	6864      	ldr	r4, [r4, #4]
 8008c56:	e7ac      	b.n	8008bb2 <_malloc_r+0x36>
 8008c58:	4634      	mov	r4, r6
 8008c5a:	6876      	ldr	r6, [r6, #4]
 8008c5c:	e7b4      	b.n	8008bc8 <_malloc_r+0x4c>
 8008c5e:	4613      	mov	r3, r2
 8008c60:	e7cc      	b.n	8008bfc <_malloc_r+0x80>
 8008c62:	230c      	movs	r3, #12
 8008c64:	603b      	str	r3, [r7, #0]
 8008c66:	4638      	mov	r0, r7
 8008c68:	f000 f80e 	bl	8008c88 <__malloc_unlock>
 8008c6c:	e797      	b.n	8008b9e <_malloc_r+0x22>
 8008c6e:	6025      	str	r5, [r4, #0]
 8008c70:	e7dc      	b.n	8008c2c <_malloc_r+0xb0>
 8008c72:	605b      	str	r3, [r3, #4]
 8008c74:	deff      	udf	#255	; 0xff
 8008c76:	bf00      	nop
 8008c78:	200005cc 	.word	0x200005cc

08008c7c <__malloc_lock>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__malloc_lock+0x8>)
 8008c7e:	f7ff b88a 	b.w	8007d96 <__retarget_lock_acquire_recursive>
 8008c82:	bf00      	nop
 8008c84:	200005c8 	.word	0x200005c8

08008c88 <__malloc_unlock>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__malloc_unlock+0x8>)
 8008c8a:	f7ff b885 	b.w	8007d98 <__retarget_lock_release_recursive>
 8008c8e:	bf00      	nop
 8008c90:	200005c8 	.word	0x200005c8

08008c94 <_Balloc>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	69c6      	ldr	r6, [r0, #28]
 8008c98:	4604      	mov	r4, r0
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	b976      	cbnz	r6, 8008cbc <_Balloc+0x28>
 8008c9e:	2010      	movs	r0, #16
 8008ca0:	f7ff ff44 	bl	8008b2c <malloc>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	61e0      	str	r0, [r4, #28]
 8008ca8:	b920      	cbnz	r0, 8008cb4 <_Balloc+0x20>
 8008caa:	4b18      	ldr	r3, [pc, #96]	; (8008d0c <_Balloc+0x78>)
 8008cac:	4818      	ldr	r0, [pc, #96]	; (8008d10 <_Balloc+0x7c>)
 8008cae:	216b      	movs	r1, #107	; 0x6b
 8008cb0:	f001 fa8c 	bl	800a1cc <__assert_func>
 8008cb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cb8:	6006      	str	r6, [r0, #0]
 8008cba:	60c6      	str	r6, [r0, #12]
 8008cbc:	69e6      	ldr	r6, [r4, #28]
 8008cbe:	68f3      	ldr	r3, [r6, #12]
 8008cc0:	b183      	cbz	r3, 8008ce4 <_Balloc+0x50>
 8008cc2:	69e3      	ldr	r3, [r4, #28]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cca:	b9b8      	cbnz	r0, 8008cfc <_Balloc+0x68>
 8008ccc:	2101      	movs	r1, #1
 8008cce:	fa01 f605 	lsl.w	r6, r1, r5
 8008cd2:	1d72      	adds	r2, r6, #5
 8008cd4:	0092      	lsls	r2, r2, #2
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f001 fa96 	bl	800a208 <_calloc_r>
 8008cdc:	b160      	cbz	r0, 8008cf8 <_Balloc+0x64>
 8008cde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ce2:	e00e      	b.n	8008d02 <_Balloc+0x6e>
 8008ce4:	2221      	movs	r2, #33	; 0x21
 8008ce6:	2104      	movs	r1, #4
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f001 fa8d 	bl	800a208 <_calloc_r>
 8008cee:	69e3      	ldr	r3, [r4, #28]
 8008cf0:	60f0      	str	r0, [r6, #12]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e4      	bne.n	8008cc2 <_Balloc+0x2e>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	6802      	ldr	r2, [r0, #0]
 8008cfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d02:	2300      	movs	r3, #0
 8008d04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d08:	e7f7      	b.n	8008cfa <_Balloc+0x66>
 8008d0a:	bf00      	nop
 8008d0c:	0800abe3 	.word	0x0800abe3
 8008d10:	0800ac63 	.word	0x0800ac63

08008d14 <_Bfree>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	69c6      	ldr	r6, [r0, #28]
 8008d18:	4605      	mov	r5, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	b976      	cbnz	r6, 8008d3c <_Bfree+0x28>
 8008d1e:	2010      	movs	r0, #16
 8008d20:	f7ff ff04 	bl	8008b2c <malloc>
 8008d24:	4602      	mov	r2, r0
 8008d26:	61e8      	str	r0, [r5, #28]
 8008d28:	b920      	cbnz	r0, 8008d34 <_Bfree+0x20>
 8008d2a:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <_Bfree+0x3c>)
 8008d2c:	4809      	ldr	r0, [pc, #36]	; (8008d54 <_Bfree+0x40>)
 8008d2e:	218f      	movs	r1, #143	; 0x8f
 8008d30:	f001 fa4c 	bl	800a1cc <__assert_func>
 8008d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d38:	6006      	str	r6, [r0, #0]
 8008d3a:	60c6      	str	r6, [r0, #12]
 8008d3c:	b13c      	cbz	r4, 8008d4e <_Bfree+0x3a>
 8008d3e:	69eb      	ldr	r3, [r5, #28]
 8008d40:	6862      	ldr	r2, [r4, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d48:	6021      	str	r1, [r4, #0]
 8008d4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}
 8008d50:	0800abe3 	.word	0x0800abe3
 8008d54:	0800ac63 	.word	0x0800ac63

08008d58 <__multadd>:
 8008d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5c:	690d      	ldr	r5, [r1, #16]
 8008d5e:	4607      	mov	r7, r0
 8008d60:	460c      	mov	r4, r1
 8008d62:	461e      	mov	r6, r3
 8008d64:	f101 0c14 	add.w	ip, r1, #20
 8008d68:	2000      	movs	r0, #0
 8008d6a:	f8dc 3000 	ldr.w	r3, [ip]
 8008d6e:	b299      	uxth	r1, r3
 8008d70:	fb02 6101 	mla	r1, r2, r1, r6
 8008d74:	0c1e      	lsrs	r6, r3, #16
 8008d76:	0c0b      	lsrs	r3, r1, #16
 8008d78:	fb02 3306 	mla	r3, r2, r6, r3
 8008d7c:	b289      	uxth	r1, r1
 8008d7e:	3001      	adds	r0, #1
 8008d80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d84:	4285      	cmp	r5, r0
 8008d86:	f84c 1b04 	str.w	r1, [ip], #4
 8008d8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d8e:	dcec      	bgt.n	8008d6a <__multadd+0x12>
 8008d90:	b30e      	cbz	r6, 8008dd6 <__multadd+0x7e>
 8008d92:	68a3      	ldr	r3, [r4, #8]
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	dc19      	bgt.n	8008dcc <__multadd+0x74>
 8008d98:	6861      	ldr	r1, [r4, #4]
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	3101      	adds	r1, #1
 8008d9e:	f7ff ff79 	bl	8008c94 <_Balloc>
 8008da2:	4680      	mov	r8, r0
 8008da4:	b928      	cbnz	r0, 8008db2 <__multadd+0x5a>
 8008da6:	4602      	mov	r2, r0
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <__multadd+0x84>)
 8008daa:	480d      	ldr	r0, [pc, #52]	; (8008de0 <__multadd+0x88>)
 8008dac:	21ba      	movs	r1, #186	; 0xba
 8008dae:	f001 fa0d 	bl	800a1cc <__assert_func>
 8008db2:	6922      	ldr	r2, [r4, #16]
 8008db4:	3202      	adds	r2, #2
 8008db6:	f104 010c 	add.w	r1, r4, #12
 8008dba:	0092      	lsls	r2, r2, #2
 8008dbc:	300c      	adds	r0, #12
 8008dbe:	f001 f9f7 	bl	800a1b0 <memcpy>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	f7ff ffa5 	bl	8008d14 <_Bfree>
 8008dca:	4644      	mov	r4, r8
 8008dcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008dd0:	3501      	adds	r5, #1
 8008dd2:	615e      	str	r6, [r3, #20]
 8008dd4:	6125      	str	r5, [r4, #16]
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ddc:	0800ac52 	.word	0x0800ac52
 8008de0:	0800ac63 	.word	0x0800ac63

08008de4 <__hi0bits>:
 8008de4:	0c03      	lsrs	r3, r0, #16
 8008de6:	041b      	lsls	r3, r3, #16
 8008de8:	b9d3      	cbnz	r3, 8008e20 <__hi0bits+0x3c>
 8008dea:	0400      	lsls	r0, r0, #16
 8008dec:	2310      	movs	r3, #16
 8008dee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008df2:	bf04      	itt	eq
 8008df4:	0200      	lsleq	r0, r0, #8
 8008df6:	3308      	addeq	r3, #8
 8008df8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008dfc:	bf04      	itt	eq
 8008dfe:	0100      	lsleq	r0, r0, #4
 8008e00:	3304      	addeq	r3, #4
 8008e02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e06:	bf04      	itt	eq
 8008e08:	0080      	lsleq	r0, r0, #2
 8008e0a:	3302      	addeq	r3, #2
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	db05      	blt.n	8008e1c <__hi0bits+0x38>
 8008e10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e14:	f103 0301 	add.w	r3, r3, #1
 8008e18:	bf08      	it	eq
 8008e1a:	2320      	moveq	r3, #32
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	4770      	bx	lr
 8008e20:	2300      	movs	r3, #0
 8008e22:	e7e4      	b.n	8008dee <__hi0bits+0xa>

08008e24 <__lo0bits>:
 8008e24:	6803      	ldr	r3, [r0, #0]
 8008e26:	f013 0207 	ands.w	r2, r3, #7
 8008e2a:	d00c      	beq.n	8008e46 <__lo0bits+0x22>
 8008e2c:	07d9      	lsls	r1, r3, #31
 8008e2e:	d422      	bmi.n	8008e76 <__lo0bits+0x52>
 8008e30:	079a      	lsls	r2, r3, #30
 8008e32:	bf49      	itett	mi
 8008e34:	085b      	lsrmi	r3, r3, #1
 8008e36:	089b      	lsrpl	r3, r3, #2
 8008e38:	6003      	strmi	r3, [r0, #0]
 8008e3a:	2201      	movmi	r2, #1
 8008e3c:	bf5c      	itt	pl
 8008e3e:	6003      	strpl	r3, [r0, #0]
 8008e40:	2202      	movpl	r2, #2
 8008e42:	4610      	mov	r0, r2
 8008e44:	4770      	bx	lr
 8008e46:	b299      	uxth	r1, r3
 8008e48:	b909      	cbnz	r1, 8008e4e <__lo0bits+0x2a>
 8008e4a:	0c1b      	lsrs	r3, r3, #16
 8008e4c:	2210      	movs	r2, #16
 8008e4e:	b2d9      	uxtb	r1, r3
 8008e50:	b909      	cbnz	r1, 8008e56 <__lo0bits+0x32>
 8008e52:	3208      	adds	r2, #8
 8008e54:	0a1b      	lsrs	r3, r3, #8
 8008e56:	0719      	lsls	r1, r3, #28
 8008e58:	bf04      	itt	eq
 8008e5a:	091b      	lsreq	r3, r3, #4
 8008e5c:	3204      	addeq	r2, #4
 8008e5e:	0799      	lsls	r1, r3, #30
 8008e60:	bf04      	itt	eq
 8008e62:	089b      	lsreq	r3, r3, #2
 8008e64:	3202      	addeq	r2, #2
 8008e66:	07d9      	lsls	r1, r3, #31
 8008e68:	d403      	bmi.n	8008e72 <__lo0bits+0x4e>
 8008e6a:	085b      	lsrs	r3, r3, #1
 8008e6c:	f102 0201 	add.w	r2, r2, #1
 8008e70:	d003      	beq.n	8008e7a <__lo0bits+0x56>
 8008e72:	6003      	str	r3, [r0, #0]
 8008e74:	e7e5      	b.n	8008e42 <__lo0bits+0x1e>
 8008e76:	2200      	movs	r2, #0
 8008e78:	e7e3      	b.n	8008e42 <__lo0bits+0x1e>
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	e7e1      	b.n	8008e42 <__lo0bits+0x1e>
	...

08008e80 <__i2b>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	460c      	mov	r4, r1
 8008e84:	2101      	movs	r1, #1
 8008e86:	f7ff ff05 	bl	8008c94 <_Balloc>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <__i2b+0x1a>
 8008e8e:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <__i2b+0x24>)
 8008e90:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <__i2b+0x28>)
 8008e92:	f240 1145 	movw	r1, #325	; 0x145
 8008e96:	f001 f999 	bl	800a1cc <__assert_func>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6144      	str	r4, [r0, #20]
 8008e9e:	6103      	str	r3, [r0, #16]
 8008ea0:	bd10      	pop	{r4, pc}
 8008ea2:	bf00      	nop
 8008ea4:	0800ac52 	.word	0x0800ac52
 8008ea8:	0800ac63 	.word	0x0800ac63

08008eac <__multiply>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	4691      	mov	r9, r2
 8008eb2:	690a      	ldr	r2, [r1, #16]
 8008eb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	bfb8      	it	lt
 8008ebc:	460b      	movlt	r3, r1
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	bfbc      	itt	lt
 8008ec2:	464c      	movlt	r4, r9
 8008ec4:	4699      	movlt	r9, r3
 8008ec6:	6927      	ldr	r7, [r4, #16]
 8008ec8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ecc:	68a3      	ldr	r3, [r4, #8]
 8008ece:	6861      	ldr	r1, [r4, #4]
 8008ed0:	eb07 060a 	add.w	r6, r7, sl
 8008ed4:	42b3      	cmp	r3, r6
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	bfb8      	it	lt
 8008eda:	3101      	addlt	r1, #1
 8008edc:	f7ff feda 	bl	8008c94 <_Balloc>
 8008ee0:	b930      	cbnz	r0, 8008ef0 <__multiply+0x44>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b44      	ldr	r3, [pc, #272]	; (8008ff8 <__multiply+0x14c>)
 8008ee6:	4845      	ldr	r0, [pc, #276]	; (8008ffc <__multiply+0x150>)
 8008ee8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008eec:	f001 f96e 	bl	800a1cc <__assert_func>
 8008ef0:	f100 0514 	add.w	r5, r0, #20
 8008ef4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ef8:	462b      	mov	r3, r5
 8008efa:	2200      	movs	r2, #0
 8008efc:	4543      	cmp	r3, r8
 8008efe:	d321      	bcc.n	8008f44 <__multiply+0x98>
 8008f00:	f104 0314 	add.w	r3, r4, #20
 8008f04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f08:	f109 0314 	add.w	r3, r9, #20
 8008f0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f10:	9202      	str	r2, [sp, #8]
 8008f12:	1b3a      	subs	r2, r7, r4
 8008f14:	3a15      	subs	r2, #21
 8008f16:	f022 0203 	bic.w	r2, r2, #3
 8008f1a:	3204      	adds	r2, #4
 8008f1c:	f104 0115 	add.w	r1, r4, #21
 8008f20:	428f      	cmp	r7, r1
 8008f22:	bf38      	it	cc
 8008f24:	2204      	movcc	r2, #4
 8008f26:	9201      	str	r2, [sp, #4]
 8008f28:	9a02      	ldr	r2, [sp, #8]
 8008f2a:	9303      	str	r3, [sp, #12]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d80c      	bhi.n	8008f4a <__multiply+0x9e>
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	dd03      	ble.n	8008f3c <__multiply+0x90>
 8008f34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d05b      	beq.n	8008ff4 <__multiply+0x148>
 8008f3c:	6106      	str	r6, [r0, #16]
 8008f3e:	b005      	add	sp, #20
 8008f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f44:	f843 2b04 	str.w	r2, [r3], #4
 8008f48:	e7d8      	b.n	8008efc <__multiply+0x50>
 8008f4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f4e:	f1ba 0f00 	cmp.w	sl, #0
 8008f52:	d024      	beq.n	8008f9e <__multiply+0xf2>
 8008f54:	f104 0e14 	add.w	lr, r4, #20
 8008f58:	46a9      	mov	r9, r5
 8008f5a:	f04f 0c00 	mov.w	ip, #0
 8008f5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f62:	f8d9 1000 	ldr.w	r1, [r9]
 8008f66:	fa1f fb82 	uxth.w	fp, r2
 8008f6a:	b289      	uxth	r1, r1
 8008f6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f74:	f8d9 2000 	ldr.w	r2, [r9]
 8008f78:	4461      	add	r1, ip
 8008f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f86:	b289      	uxth	r1, r1
 8008f88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f8c:	4577      	cmp	r7, lr
 8008f8e:	f849 1b04 	str.w	r1, [r9], #4
 8008f92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f96:	d8e2      	bhi.n	8008f5e <__multiply+0xb2>
 8008f98:	9a01      	ldr	r2, [sp, #4]
 8008f9a:	f845 c002 	str.w	ip, [r5, r2]
 8008f9e:	9a03      	ldr	r2, [sp, #12]
 8008fa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	f1b9 0f00 	cmp.w	r9, #0
 8008faa:	d021      	beq.n	8008ff0 <__multiply+0x144>
 8008fac:	6829      	ldr	r1, [r5, #0]
 8008fae:	f104 0c14 	add.w	ip, r4, #20
 8008fb2:	46ae      	mov	lr, r5
 8008fb4:	f04f 0a00 	mov.w	sl, #0
 8008fb8:	f8bc b000 	ldrh.w	fp, [ip]
 8008fbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fc0:	fb09 220b 	mla	r2, r9, fp, r2
 8008fc4:	4452      	add	r2, sl
 8008fc6:	b289      	uxth	r1, r1
 8008fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fcc:	f84e 1b04 	str.w	r1, [lr], #4
 8008fd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008fd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fd8:	f8be 1000 	ldrh.w	r1, [lr]
 8008fdc:	fb09 110a 	mla	r1, r9, sl, r1
 8008fe0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008fe4:	4567      	cmp	r7, ip
 8008fe6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fea:	d8e5      	bhi.n	8008fb8 <__multiply+0x10c>
 8008fec:	9a01      	ldr	r2, [sp, #4]
 8008fee:	50a9      	str	r1, [r5, r2]
 8008ff0:	3504      	adds	r5, #4
 8008ff2:	e799      	b.n	8008f28 <__multiply+0x7c>
 8008ff4:	3e01      	subs	r6, #1
 8008ff6:	e79b      	b.n	8008f30 <__multiply+0x84>
 8008ff8:	0800ac52 	.word	0x0800ac52
 8008ffc:	0800ac63 	.word	0x0800ac63

08009000 <__pow5mult>:
 8009000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009004:	4615      	mov	r5, r2
 8009006:	f012 0203 	ands.w	r2, r2, #3
 800900a:	4606      	mov	r6, r0
 800900c:	460f      	mov	r7, r1
 800900e:	d007      	beq.n	8009020 <__pow5mult+0x20>
 8009010:	4c25      	ldr	r4, [pc, #148]	; (80090a8 <__pow5mult+0xa8>)
 8009012:	3a01      	subs	r2, #1
 8009014:	2300      	movs	r3, #0
 8009016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800901a:	f7ff fe9d 	bl	8008d58 <__multadd>
 800901e:	4607      	mov	r7, r0
 8009020:	10ad      	asrs	r5, r5, #2
 8009022:	d03d      	beq.n	80090a0 <__pow5mult+0xa0>
 8009024:	69f4      	ldr	r4, [r6, #28]
 8009026:	b97c      	cbnz	r4, 8009048 <__pow5mult+0x48>
 8009028:	2010      	movs	r0, #16
 800902a:	f7ff fd7f 	bl	8008b2c <malloc>
 800902e:	4602      	mov	r2, r0
 8009030:	61f0      	str	r0, [r6, #28]
 8009032:	b928      	cbnz	r0, 8009040 <__pow5mult+0x40>
 8009034:	4b1d      	ldr	r3, [pc, #116]	; (80090ac <__pow5mult+0xac>)
 8009036:	481e      	ldr	r0, [pc, #120]	; (80090b0 <__pow5mult+0xb0>)
 8009038:	f240 11b3 	movw	r1, #435	; 0x1b3
 800903c:	f001 f8c6 	bl	800a1cc <__assert_func>
 8009040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009044:	6004      	str	r4, [r0, #0]
 8009046:	60c4      	str	r4, [r0, #12]
 8009048:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800904c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009050:	b94c      	cbnz	r4, 8009066 <__pow5mult+0x66>
 8009052:	f240 2171 	movw	r1, #625	; 0x271
 8009056:	4630      	mov	r0, r6
 8009058:	f7ff ff12 	bl	8008e80 <__i2b>
 800905c:	2300      	movs	r3, #0
 800905e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009062:	4604      	mov	r4, r0
 8009064:	6003      	str	r3, [r0, #0]
 8009066:	f04f 0900 	mov.w	r9, #0
 800906a:	07eb      	lsls	r3, r5, #31
 800906c:	d50a      	bpl.n	8009084 <__pow5mult+0x84>
 800906e:	4639      	mov	r1, r7
 8009070:	4622      	mov	r2, r4
 8009072:	4630      	mov	r0, r6
 8009074:	f7ff ff1a 	bl	8008eac <__multiply>
 8009078:	4639      	mov	r1, r7
 800907a:	4680      	mov	r8, r0
 800907c:	4630      	mov	r0, r6
 800907e:	f7ff fe49 	bl	8008d14 <_Bfree>
 8009082:	4647      	mov	r7, r8
 8009084:	106d      	asrs	r5, r5, #1
 8009086:	d00b      	beq.n	80090a0 <__pow5mult+0xa0>
 8009088:	6820      	ldr	r0, [r4, #0]
 800908a:	b938      	cbnz	r0, 800909c <__pow5mult+0x9c>
 800908c:	4622      	mov	r2, r4
 800908e:	4621      	mov	r1, r4
 8009090:	4630      	mov	r0, r6
 8009092:	f7ff ff0b 	bl	8008eac <__multiply>
 8009096:	6020      	str	r0, [r4, #0]
 8009098:	f8c0 9000 	str.w	r9, [r0]
 800909c:	4604      	mov	r4, r0
 800909e:	e7e4      	b.n	800906a <__pow5mult+0x6a>
 80090a0:	4638      	mov	r0, r7
 80090a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090a6:	bf00      	nop
 80090a8:	0800adb0 	.word	0x0800adb0
 80090ac:	0800abe3 	.word	0x0800abe3
 80090b0:	0800ac63 	.word	0x0800ac63

080090b4 <__lshift>:
 80090b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b8:	460c      	mov	r4, r1
 80090ba:	6849      	ldr	r1, [r1, #4]
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	4607      	mov	r7, r0
 80090c6:	4691      	mov	r9, r2
 80090c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090cc:	f108 0601 	add.w	r6, r8, #1
 80090d0:	42b3      	cmp	r3, r6
 80090d2:	db0b      	blt.n	80090ec <__lshift+0x38>
 80090d4:	4638      	mov	r0, r7
 80090d6:	f7ff fddd 	bl	8008c94 <_Balloc>
 80090da:	4605      	mov	r5, r0
 80090dc:	b948      	cbnz	r0, 80090f2 <__lshift+0x3e>
 80090de:	4602      	mov	r2, r0
 80090e0:	4b28      	ldr	r3, [pc, #160]	; (8009184 <__lshift+0xd0>)
 80090e2:	4829      	ldr	r0, [pc, #164]	; (8009188 <__lshift+0xd4>)
 80090e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80090e8:	f001 f870 	bl	800a1cc <__assert_func>
 80090ec:	3101      	adds	r1, #1
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	e7ee      	b.n	80090d0 <__lshift+0x1c>
 80090f2:	2300      	movs	r3, #0
 80090f4:	f100 0114 	add.w	r1, r0, #20
 80090f8:	f100 0210 	add.w	r2, r0, #16
 80090fc:	4618      	mov	r0, r3
 80090fe:	4553      	cmp	r3, sl
 8009100:	db33      	blt.n	800916a <__lshift+0xb6>
 8009102:	6920      	ldr	r0, [r4, #16]
 8009104:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009108:	f104 0314 	add.w	r3, r4, #20
 800910c:	f019 091f 	ands.w	r9, r9, #31
 8009110:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009114:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009118:	d02b      	beq.n	8009172 <__lshift+0xbe>
 800911a:	f1c9 0e20 	rsb	lr, r9, #32
 800911e:	468a      	mov	sl, r1
 8009120:	2200      	movs	r2, #0
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	fa00 f009 	lsl.w	r0, r0, r9
 8009128:	4310      	orrs	r0, r2
 800912a:	f84a 0b04 	str.w	r0, [sl], #4
 800912e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009132:	459c      	cmp	ip, r3
 8009134:	fa22 f20e 	lsr.w	r2, r2, lr
 8009138:	d8f3      	bhi.n	8009122 <__lshift+0x6e>
 800913a:	ebac 0304 	sub.w	r3, ip, r4
 800913e:	3b15      	subs	r3, #21
 8009140:	f023 0303 	bic.w	r3, r3, #3
 8009144:	3304      	adds	r3, #4
 8009146:	f104 0015 	add.w	r0, r4, #21
 800914a:	4584      	cmp	ip, r0
 800914c:	bf38      	it	cc
 800914e:	2304      	movcc	r3, #4
 8009150:	50ca      	str	r2, [r1, r3]
 8009152:	b10a      	cbz	r2, 8009158 <__lshift+0xa4>
 8009154:	f108 0602 	add.w	r6, r8, #2
 8009158:	3e01      	subs	r6, #1
 800915a:	4638      	mov	r0, r7
 800915c:	612e      	str	r6, [r5, #16]
 800915e:	4621      	mov	r1, r4
 8009160:	f7ff fdd8 	bl	8008d14 <_Bfree>
 8009164:	4628      	mov	r0, r5
 8009166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916a:	f842 0f04 	str.w	r0, [r2, #4]!
 800916e:	3301      	adds	r3, #1
 8009170:	e7c5      	b.n	80090fe <__lshift+0x4a>
 8009172:	3904      	subs	r1, #4
 8009174:	f853 2b04 	ldr.w	r2, [r3], #4
 8009178:	f841 2f04 	str.w	r2, [r1, #4]!
 800917c:	459c      	cmp	ip, r3
 800917e:	d8f9      	bhi.n	8009174 <__lshift+0xc0>
 8009180:	e7ea      	b.n	8009158 <__lshift+0xa4>
 8009182:	bf00      	nop
 8009184:	0800ac52 	.word	0x0800ac52
 8009188:	0800ac63 	.word	0x0800ac63

0800918c <__mcmp>:
 800918c:	b530      	push	{r4, r5, lr}
 800918e:	6902      	ldr	r2, [r0, #16]
 8009190:	690c      	ldr	r4, [r1, #16]
 8009192:	1b12      	subs	r2, r2, r4
 8009194:	d10e      	bne.n	80091b4 <__mcmp+0x28>
 8009196:	f100 0314 	add.w	r3, r0, #20
 800919a:	3114      	adds	r1, #20
 800919c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091ac:	42a5      	cmp	r5, r4
 80091ae:	d003      	beq.n	80091b8 <__mcmp+0x2c>
 80091b0:	d305      	bcc.n	80091be <__mcmp+0x32>
 80091b2:	2201      	movs	r2, #1
 80091b4:	4610      	mov	r0, r2
 80091b6:	bd30      	pop	{r4, r5, pc}
 80091b8:	4283      	cmp	r3, r0
 80091ba:	d3f3      	bcc.n	80091a4 <__mcmp+0x18>
 80091bc:	e7fa      	b.n	80091b4 <__mcmp+0x28>
 80091be:	f04f 32ff 	mov.w	r2, #4294967295
 80091c2:	e7f7      	b.n	80091b4 <__mcmp+0x28>

080091c4 <__mdiff>:
 80091c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	460c      	mov	r4, r1
 80091ca:	4606      	mov	r6, r0
 80091cc:	4611      	mov	r1, r2
 80091ce:	4620      	mov	r0, r4
 80091d0:	4690      	mov	r8, r2
 80091d2:	f7ff ffdb 	bl	800918c <__mcmp>
 80091d6:	1e05      	subs	r5, r0, #0
 80091d8:	d110      	bne.n	80091fc <__mdiff+0x38>
 80091da:	4629      	mov	r1, r5
 80091dc:	4630      	mov	r0, r6
 80091de:	f7ff fd59 	bl	8008c94 <_Balloc>
 80091e2:	b930      	cbnz	r0, 80091f2 <__mdiff+0x2e>
 80091e4:	4b3a      	ldr	r3, [pc, #232]	; (80092d0 <__mdiff+0x10c>)
 80091e6:	4602      	mov	r2, r0
 80091e8:	f240 2137 	movw	r1, #567	; 0x237
 80091ec:	4839      	ldr	r0, [pc, #228]	; (80092d4 <__mdiff+0x110>)
 80091ee:	f000 ffed 	bl	800a1cc <__assert_func>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fc:	bfa4      	itt	ge
 80091fe:	4643      	movge	r3, r8
 8009200:	46a0      	movge	r8, r4
 8009202:	4630      	mov	r0, r6
 8009204:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009208:	bfa6      	itte	ge
 800920a:	461c      	movge	r4, r3
 800920c:	2500      	movge	r5, #0
 800920e:	2501      	movlt	r5, #1
 8009210:	f7ff fd40 	bl	8008c94 <_Balloc>
 8009214:	b920      	cbnz	r0, 8009220 <__mdiff+0x5c>
 8009216:	4b2e      	ldr	r3, [pc, #184]	; (80092d0 <__mdiff+0x10c>)
 8009218:	4602      	mov	r2, r0
 800921a:	f240 2145 	movw	r1, #581	; 0x245
 800921e:	e7e5      	b.n	80091ec <__mdiff+0x28>
 8009220:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009224:	6926      	ldr	r6, [r4, #16]
 8009226:	60c5      	str	r5, [r0, #12]
 8009228:	f104 0914 	add.w	r9, r4, #20
 800922c:	f108 0514 	add.w	r5, r8, #20
 8009230:	f100 0e14 	add.w	lr, r0, #20
 8009234:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009238:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800923c:	f108 0210 	add.w	r2, r8, #16
 8009240:	46f2      	mov	sl, lr
 8009242:	2100      	movs	r1, #0
 8009244:	f859 3b04 	ldr.w	r3, [r9], #4
 8009248:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800924c:	fa11 f88b 	uxtah	r8, r1, fp
 8009250:	b299      	uxth	r1, r3
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	eba8 0801 	sub.w	r8, r8, r1
 8009258:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800925c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009260:	fa1f f888 	uxth.w	r8, r8
 8009264:	1419      	asrs	r1, r3, #16
 8009266:	454e      	cmp	r6, r9
 8009268:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800926c:	f84a 3b04 	str.w	r3, [sl], #4
 8009270:	d8e8      	bhi.n	8009244 <__mdiff+0x80>
 8009272:	1b33      	subs	r3, r6, r4
 8009274:	3b15      	subs	r3, #21
 8009276:	f023 0303 	bic.w	r3, r3, #3
 800927a:	3304      	adds	r3, #4
 800927c:	3415      	adds	r4, #21
 800927e:	42a6      	cmp	r6, r4
 8009280:	bf38      	it	cc
 8009282:	2304      	movcc	r3, #4
 8009284:	441d      	add	r5, r3
 8009286:	4473      	add	r3, lr
 8009288:	469e      	mov	lr, r3
 800928a:	462e      	mov	r6, r5
 800928c:	4566      	cmp	r6, ip
 800928e:	d30e      	bcc.n	80092ae <__mdiff+0xea>
 8009290:	f10c 0203 	add.w	r2, ip, #3
 8009294:	1b52      	subs	r2, r2, r5
 8009296:	f022 0203 	bic.w	r2, r2, #3
 800929a:	3d03      	subs	r5, #3
 800929c:	45ac      	cmp	ip, r5
 800929e:	bf38      	it	cc
 80092a0:	2200      	movcc	r2, #0
 80092a2:	4413      	add	r3, r2
 80092a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80092a8:	b17a      	cbz	r2, 80092ca <__mdiff+0x106>
 80092aa:	6107      	str	r7, [r0, #16]
 80092ac:	e7a4      	b.n	80091f8 <__mdiff+0x34>
 80092ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80092b2:	fa11 f288 	uxtah	r2, r1, r8
 80092b6:	1414      	asrs	r4, r2, #16
 80092b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092bc:	b292      	uxth	r2, r2
 80092be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092c2:	f84e 2b04 	str.w	r2, [lr], #4
 80092c6:	1421      	asrs	r1, r4, #16
 80092c8:	e7e0      	b.n	800928c <__mdiff+0xc8>
 80092ca:	3f01      	subs	r7, #1
 80092cc:	e7ea      	b.n	80092a4 <__mdiff+0xe0>
 80092ce:	bf00      	nop
 80092d0:	0800ac52 	.word	0x0800ac52
 80092d4:	0800ac63 	.word	0x0800ac63

080092d8 <__d2b>:
 80092d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092dc:	460f      	mov	r7, r1
 80092de:	2101      	movs	r1, #1
 80092e0:	ec59 8b10 	vmov	r8, r9, d0
 80092e4:	4616      	mov	r6, r2
 80092e6:	f7ff fcd5 	bl	8008c94 <_Balloc>
 80092ea:	4604      	mov	r4, r0
 80092ec:	b930      	cbnz	r0, 80092fc <__d2b+0x24>
 80092ee:	4602      	mov	r2, r0
 80092f0:	4b24      	ldr	r3, [pc, #144]	; (8009384 <__d2b+0xac>)
 80092f2:	4825      	ldr	r0, [pc, #148]	; (8009388 <__d2b+0xb0>)
 80092f4:	f240 310f 	movw	r1, #783	; 0x30f
 80092f8:	f000 ff68 	bl	800a1cc <__assert_func>
 80092fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009304:	bb2d      	cbnz	r5, 8009352 <__d2b+0x7a>
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	f1b8 0300 	subs.w	r3, r8, #0
 800930c:	d026      	beq.n	800935c <__d2b+0x84>
 800930e:	4668      	mov	r0, sp
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	f7ff fd87 	bl	8008e24 <__lo0bits>
 8009316:	e9dd 1200 	ldrd	r1, r2, [sp]
 800931a:	b1e8      	cbz	r0, 8009358 <__d2b+0x80>
 800931c:	f1c0 0320 	rsb	r3, r0, #32
 8009320:	fa02 f303 	lsl.w	r3, r2, r3
 8009324:	430b      	orrs	r3, r1
 8009326:	40c2      	lsrs	r2, r0
 8009328:	6163      	str	r3, [r4, #20]
 800932a:	9201      	str	r2, [sp, #4]
 800932c:	9b01      	ldr	r3, [sp, #4]
 800932e:	61a3      	str	r3, [r4, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	bf14      	ite	ne
 8009334:	2202      	movne	r2, #2
 8009336:	2201      	moveq	r2, #1
 8009338:	6122      	str	r2, [r4, #16]
 800933a:	b1bd      	cbz	r5, 800936c <__d2b+0x94>
 800933c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009340:	4405      	add	r5, r0
 8009342:	603d      	str	r5, [r7, #0]
 8009344:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009348:	6030      	str	r0, [r6, #0]
 800934a:	4620      	mov	r0, r4
 800934c:	b003      	add	sp, #12
 800934e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009356:	e7d6      	b.n	8009306 <__d2b+0x2e>
 8009358:	6161      	str	r1, [r4, #20]
 800935a:	e7e7      	b.n	800932c <__d2b+0x54>
 800935c:	a801      	add	r0, sp, #4
 800935e:	f7ff fd61 	bl	8008e24 <__lo0bits>
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	6163      	str	r3, [r4, #20]
 8009366:	3020      	adds	r0, #32
 8009368:	2201      	movs	r2, #1
 800936a:	e7e5      	b.n	8009338 <__d2b+0x60>
 800936c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009370:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009374:	6038      	str	r0, [r7, #0]
 8009376:	6918      	ldr	r0, [r3, #16]
 8009378:	f7ff fd34 	bl	8008de4 <__hi0bits>
 800937c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009380:	e7e2      	b.n	8009348 <__d2b+0x70>
 8009382:	bf00      	nop
 8009384:	0800ac52 	.word	0x0800ac52
 8009388:	0800ac63 	.word	0x0800ac63

0800938c <__ssputs_r>:
 800938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	688e      	ldr	r6, [r1, #8]
 8009392:	461f      	mov	r7, r3
 8009394:	42be      	cmp	r6, r7
 8009396:	680b      	ldr	r3, [r1, #0]
 8009398:	4682      	mov	sl, r0
 800939a:	460c      	mov	r4, r1
 800939c:	4690      	mov	r8, r2
 800939e:	d82c      	bhi.n	80093fa <__ssputs_r+0x6e>
 80093a0:	898a      	ldrh	r2, [r1, #12]
 80093a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093a6:	d026      	beq.n	80093f6 <__ssputs_r+0x6a>
 80093a8:	6965      	ldr	r5, [r4, #20]
 80093aa:	6909      	ldr	r1, [r1, #16]
 80093ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093b0:	eba3 0901 	sub.w	r9, r3, r1
 80093b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093b8:	1c7b      	adds	r3, r7, #1
 80093ba:	444b      	add	r3, r9
 80093bc:	106d      	asrs	r5, r5, #1
 80093be:	429d      	cmp	r5, r3
 80093c0:	bf38      	it	cc
 80093c2:	461d      	movcc	r5, r3
 80093c4:	0553      	lsls	r3, r2, #21
 80093c6:	d527      	bpl.n	8009418 <__ssputs_r+0x8c>
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7ff fbd7 	bl	8008b7c <_malloc_r>
 80093ce:	4606      	mov	r6, r0
 80093d0:	b360      	cbz	r0, 800942c <__ssputs_r+0xa0>
 80093d2:	6921      	ldr	r1, [r4, #16]
 80093d4:	464a      	mov	r2, r9
 80093d6:	f000 feeb 	bl	800a1b0 <memcpy>
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e4:	81a3      	strh	r3, [r4, #12]
 80093e6:	6126      	str	r6, [r4, #16]
 80093e8:	6165      	str	r5, [r4, #20]
 80093ea:	444e      	add	r6, r9
 80093ec:	eba5 0509 	sub.w	r5, r5, r9
 80093f0:	6026      	str	r6, [r4, #0]
 80093f2:	60a5      	str	r5, [r4, #8]
 80093f4:	463e      	mov	r6, r7
 80093f6:	42be      	cmp	r6, r7
 80093f8:	d900      	bls.n	80093fc <__ssputs_r+0x70>
 80093fa:	463e      	mov	r6, r7
 80093fc:	6820      	ldr	r0, [r4, #0]
 80093fe:	4632      	mov	r2, r6
 8009400:	4641      	mov	r1, r8
 8009402:	f000 fe88 	bl	800a116 <memmove>
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	1b9b      	subs	r3, r3, r6
 800940a:	60a3      	str	r3, [r4, #8]
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	4433      	add	r3, r6
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	2000      	movs	r0, #0
 8009414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009418:	462a      	mov	r2, r5
 800941a:	f000 ff1d 	bl	800a258 <_realloc_r>
 800941e:	4606      	mov	r6, r0
 8009420:	2800      	cmp	r0, #0
 8009422:	d1e0      	bne.n	80093e6 <__ssputs_r+0x5a>
 8009424:	6921      	ldr	r1, [r4, #16]
 8009426:	4650      	mov	r0, sl
 8009428:	f7ff fb34 	bl	8008a94 <_free_r>
 800942c:	230c      	movs	r3, #12
 800942e:	f8ca 3000 	str.w	r3, [sl]
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	f04f 30ff 	mov.w	r0, #4294967295
 800943e:	e7e9      	b.n	8009414 <__ssputs_r+0x88>

08009440 <_svfiprintf_r>:
 8009440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	4698      	mov	r8, r3
 8009446:	898b      	ldrh	r3, [r1, #12]
 8009448:	061b      	lsls	r3, r3, #24
 800944a:	b09d      	sub	sp, #116	; 0x74
 800944c:	4607      	mov	r7, r0
 800944e:	460d      	mov	r5, r1
 8009450:	4614      	mov	r4, r2
 8009452:	d50e      	bpl.n	8009472 <_svfiprintf_r+0x32>
 8009454:	690b      	ldr	r3, [r1, #16]
 8009456:	b963      	cbnz	r3, 8009472 <_svfiprintf_r+0x32>
 8009458:	2140      	movs	r1, #64	; 0x40
 800945a:	f7ff fb8f 	bl	8008b7c <_malloc_r>
 800945e:	6028      	str	r0, [r5, #0]
 8009460:	6128      	str	r0, [r5, #16]
 8009462:	b920      	cbnz	r0, 800946e <_svfiprintf_r+0x2e>
 8009464:	230c      	movs	r3, #12
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	e0d0      	b.n	8009610 <_svfiprintf_r+0x1d0>
 800946e:	2340      	movs	r3, #64	; 0x40
 8009470:	616b      	str	r3, [r5, #20]
 8009472:	2300      	movs	r3, #0
 8009474:	9309      	str	r3, [sp, #36]	; 0x24
 8009476:	2320      	movs	r3, #32
 8009478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800947c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009480:	2330      	movs	r3, #48	; 0x30
 8009482:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009628 <_svfiprintf_r+0x1e8>
 8009486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800948a:	f04f 0901 	mov.w	r9, #1
 800948e:	4623      	mov	r3, r4
 8009490:	469a      	mov	sl, r3
 8009492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009496:	b10a      	cbz	r2, 800949c <_svfiprintf_r+0x5c>
 8009498:	2a25      	cmp	r2, #37	; 0x25
 800949a:	d1f9      	bne.n	8009490 <_svfiprintf_r+0x50>
 800949c:	ebba 0b04 	subs.w	fp, sl, r4
 80094a0:	d00b      	beq.n	80094ba <_svfiprintf_r+0x7a>
 80094a2:	465b      	mov	r3, fp
 80094a4:	4622      	mov	r2, r4
 80094a6:	4629      	mov	r1, r5
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7ff ff6f 	bl	800938c <__ssputs_r>
 80094ae:	3001      	adds	r0, #1
 80094b0:	f000 80a9 	beq.w	8009606 <_svfiprintf_r+0x1c6>
 80094b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b6:	445a      	add	r2, fp
 80094b8:	9209      	str	r2, [sp, #36]	; 0x24
 80094ba:	f89a 3000 	ldrb.w	r3, [sl]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 80a1 	beq.w	8009606 <_svfiprintf_r+0x1c6>
 80094c4:	2300      	movs	r3, #0
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ce:	f10a 0a01 	add.w	sl, sl, #1
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	9307      	str	r3, [sp, #28]
 80094d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094da:	931a      	str	r3, [sp, #104]	; 0x68
 80094dc:	4654      	mov	r4, sl
 80094de:	2205      	movs	r2, #5
 80094e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e4:	4850      	ldr	r0, [pc, #320]	; (8009628 <_svfiprintf_r+0x1e8>)
 80094e6:	f7f6 fe73 	bl	80001d0 <memchr>
 80094ea:	9a04      	ldr	r2, [sp, #16]
 80094ec:	b9d8      	cbnz	r0, 8009526 <_svfiprintf_r+0xe6>
 80094ee:	06d0      	lsls	r0, r2, #27
 80094f0:	bf44      	itt	mi
 80094f2:	2320      	movmi	r3, #32
 80094f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f8:	0711      	lsls	r1, r2, #28
 80094fa:	bf44      	itt	mi
 80094fc:	232b      	movmi	r3, #43	; 0x2b
 80094fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009502:	f89a 3000 	ldrb.w	r3, [sl]
 8009506:	2b2a      	cmp	r3, #42	; 0x2a
 8009508:	d015      	beq.n	8009536 <_svfiprintf_r+0xf6>
 800950a:	9a07      	ldr	r2, [sp, #28]
 800950c:	4654      	mov	r4, sl
 800950e:	2000      	movs	r0, #0
 8009510:	f04f 0c0a 	mov.w	ip, #10
 8009514:	4621      	mov	r1, r4
 8009516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800951a:	3b30      	subs	r3, #48	; 0x30
 800951c:	2b09      	cmp	r3, #9
 800951e:	d94d      	bls.n	80095bc <_svfiprintf_r+0x17c>
 8009520:	b1b0      	cbz	r0, 8009550 <_svfiprintf_r+0x110>
 8009522:	9207      	str	r2, [sp, #28]
 8009524:	e014      	b.n	8009550 <_svfiprintf_r+0x110>
 8009526:	eba0 0308 	sub.w	r3, r0, r8
 800952a:	fa09 f303 	lsl.w	r3, r9, r3
 800952e:	4313      	orrs	r3, r2
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	46a2      	mov	sl, r4
 8009534:	e7d2      	b.n	80094dc <_svfiprintf_r+0x9c>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	1d19      	adds	r1, r3, #4
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	9103      	str	r1, [sp, #12]
 800953e:	2b00      	cmp	r3, #0
 8009540:	bfbb      	ittet	lt
 8009542:	425b      	neglt	r3, r3
 8009544:	f042 0202 	orrlt.w	r2, r2, #2
 8009548:	9307      	strge	r3, [sp, #28]
 800954a:	9307      	strlt	r3, [sp, #28]
 800954c:	bfb8      	it	lt
 800954e:	9204      	strlt	r2, [sp, #16]
 8009550:	7823      	ldrb	r3, [r4, #0]
 8009552:	2b2e      	cmp	r3, #46	; 0x2e
 8009554:	d10c      	bne.n	8009570 <_svfiprintf_r+0x130>
 8009556:	7863      	ldrb	r3, [r4, #1]
 8009558:	2b2a      	cmp	r3, #42	; 0x2a
 800955a:	d134      	bne.n	80095c6 <_svfiprintf_r+0x186>
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	1d1a      	adds	r2, r3, #4
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	9203      	str	r2, [sp, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	bfb8      	it	lt
 8009568:	f04f 33ff 	movlt.w	r3, #4294967295
 800956c:	3402      	adds	r4, #2
 800956e:	9305      	str	r3, [sp, #20]
 8009570:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009638 <_svfiprintf_r+0x1f8>
 8009574:	7821      	ldrb	r1, [r4, #0]
 8009576:	2203      	movs	r2, #3
 8009578:	4650      	mov	r0, sl
 800957a:	f7f6 fe29 	bl	80001d0 <memchr>
 800957e:	b138      	cbz	r0, 8009590 <_svfiprintf_r+0x150>
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	eba0 000a 	sub.w	r0, r0, sl
 8009586:	2240      	movs	r2, #64	; 0x40
 8009588:	4082      	lsls	r2, r0
 800958a:	4313      	orrs	r3, r2
 800958c:	3401      	adds	r4, #1
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009594:	4825      	ldr	r0, [pc, #148]	; (800962c <_svfiprintf_r+0x1ec>)
 8009596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800959a:	2206      	movs	r2, #6
 800959c:	f7f6 fe18 	bl	80001d0 <memchr>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d038      	beq.n	8009616 <_svfiprintf_r+0x1d6>
 80095a4:	4b22      	ldr	r3, [pc, #136]	; (8009630 <_svfiprintf_r+0x1f0>)
 80095a6:	bb1b      	cbnz	r3, 80095f0 <_svfiprintf_r+0x1b0>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	3307      	adds	r3, #7
 80095ac:	f023 0307 	bic.w	r3, r3, #7
 80095b0:	3308      	adds	r3, #8
 80095b2:	9303      	str	r3, [sp, #12]
 80095b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b6:	4433      	add	r3, r6
 80095b8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ba:	e768      	b.n	800948e <_svfiprintf_r+0x4e>
 80095bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80095c0:	460c      	mov	r4, r1
 80095c2:	2001      	movs	r0, #1
 80095c4:	e7a6      	b.n	8009514 <_svfiprintf_r+0xd4>
 80095c6:	2300      	movs	r3, #0
 80095c8:	3401      	adds	r4, #1
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	4619      	mov	r1, r3
 80095ce:	f04f 0c0a 	mov.w	ip, #10
 80095d2:	4620      	mov	r0, r4
 80095d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d8:	3a30      	subs	r2, #48	; 0x30
 80095da:	2a09      	cmp	r2, #9
 80095dc:	d903      	bls.n	80095e6 <_svfiprintf_r+0x1a6>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0c6      	beq.n	8009570 <_svfiprintf_r+0x130>
 80095e2:	9105      	str	r1, [sp, #20]
 80095e4:	e7c4      	b.n	8009570 <_svfiprintf_r+0x130>
 80095e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ea:	4604      	mov	r4, r0
 80095ec:	2301      	movs	r3, #1
 80095ee:	e7f0      	b.n	80095d2 <_svfiprintf_r+0x192>
 80095f0:	ab03      	add	r3, sp, #12
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	462a      	mov	r2, r5
 80095f6:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <_svfiprintf_r+0x1f4>)
 80095f8:	a904      	add	r1, sp, #16
 80095fa:	4638      	mov	r0, r7
 80095fc:	f7fd fc52 	bl	8006ea4 <_printf_float>
 8009600:	1c42      	adds	r2, r0, #1
 8009602:	4606      	mov	r6, r0
 8009604:	d1d6      	bne.n	80095b4 <_svfiprintf_r+0x174>
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	065b      	lsls	r3, r3, #25
 800960a:	f53f af2d 	bmi.w	8009468 <_svfiprintf_r+0x28>
 800960e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009610:	b01d      	add	sp, #116	; 0x74
 8009612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009616:	ab03      	add	r3, sp, #12
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	462a      	mov	r2, r5
 800961c:	4b05      	ldr	r3, [pc, #20]	; (8009634 <_svfiprintf_r+0x1f4>)
 800961e:	a904      	add	r1, sp, #16
 8009620:	4638      	mov	r0, r7
 8009622:	f7fd fee3 	bl	80073ec <_printf_i>
 8009626:	e7eb      	b.n	8009600 <_svfiprintf_r+0x1c0>
 8009628:	0800adbc 	.word	0x0800adbc
 800962c:	0800adc6 	.word	0x0800adc6
 8009630:	08006ea5 	.word	0x08006ea5
 8009634:	0800938d 	.word	0x0800938d
 8009638:	0800adc2 	.word	0x0800adc2

0800963c <_sungetc_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	1c4b      	adds	r3, r1, #1
 8009640:	4614      	mov	r4, r2
 8009642:	d103      	bne.n	800964c <_sungetc_r+0x10>
 8009644:	f04f 35ff 	mov.w	r5, #4294967295
 8009648:	4628      	mov	r0, r5
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	8993      	ldrh	r3, [r2, #12]
 800964e:	f023 0320 	bic.w	r3, r3, #32
 8009652:	8193      	strh	r3, [r2, #12]
 8009654:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009656:	6852      	ldr	r2, [r2, #4]
 8009658:	b2cd      	uxtb	r5, r1
 800965a:	b18b      	cbz	r3, 8009680 <_sungetc_r+0x44>
 800965c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800965e:	4293      	cmp	r3, r2
 8009660:	dd08      	ble.n	8009674 <_sungetc_r+0x38>
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	1e5a      	subs	r2, r3, #1
 8009666:	6022      	str	r2, [r4, #0]
 8009668:	f803 5c01 	strb.w	r5, [r3, #-1]
 800966c:	6863      	ldr	r3, [r4, #4]
 800966e:	3301      	adds	r3, #1
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	e7e9      	b.n	8009648 <_sungetc_r+0xc>
 8009674:	4621      	mov	r1, r4
 8009676:	f000 fd14 	bl	800a0a2 <__submore>
 800967a:	2800      	cmp	r0, #0
 800967c:	d0f1      	beq.n	8009662 <_sungetc_r+0x26>
 800967e:	e7e1      	b.n	8009644 <_sungetc_r+0x8>
 8009680:	6921      	ldr	r1, [r4, #16]
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	b151      	cbz	r1, 800969c <_sungetc_r+0x60>
 8009686:	4299      	cmp	r1, r3
 8009688:	d208      	bcs.n	800969c <_sungetc_r+0x60>
 800968a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800968e:	42a9      	cmp	r1, r5
 8009690:	d104      	bne.n	800969c <_sungetc_r+0x60>
 8009692:	3b01      	subs	r3, #1
 8009694:	3201      	adds	r2, #1
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	6062      	str	r2, [r4, #4]
 800969a:	e7d5      	b.n	8009648 <_sungetc_r+0xc>
 800969c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80096a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096a4:	6363      	str	r3, [r4, #52]	; 0x34
 80096a6:	2303      	movs	r3, #3
 80096a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80096aa:	4623      	mov	r3, r4
 80096ac:	f803 5f46 	strb.w	r5, [r3, #70]!
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	2301      	movs	r3, #1
 80096b4:	e7dc      	b.n	8009670 <_sungetc_r+0x34>

080096b6 <__ssrefill_r>:
 80096b6:	b510      	push	{r4, lr}
 80096b8:	460c      	mov	r4, r1
 80096ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80096bc:	b169      	cbz	r1, 80096da <__ssrefill_r+0x24>
 80096be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096c2:	4299      	cmp	r1, r3
 80096c4:	d001      	beq.n	80096ca <__ssrefill_r+0x14>
 80096c6:	f7ff f9e5 	bl	8008a94 <_free_r>
 80096ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096cc:	6063      	str	r3, [r4, #4]
 80096ce:	2000      	movs	r0, #0
 80096d0:	6360      	str	r0, [r4, #52]	; 0x34
 80096d2:	b113      	cbz	r3, 80096da <__ssrefill_r+0x24>
 80096d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	bd10      	pop	{r4, pc}
 80096da:	6923      	ldr	r3, [r4, #16]
 80096dc:	6023      	str	r3, [r4, #0]
 80096de:	2300      	movs	r3, #0
 80096e0:	6063      	str	r3, [r4, #4]
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	f043 0320 	orr.w	r3, r3, #32
 80096e8:	81a3      	strh	r3, [r4, #12]
 80096ea:	f04f 30ff 	mov.w	r0, #4294967295
 80096ee:	e7f3      	b.n	80096d8 <__ssrefill_r+0x22>

080096f0 <__ssvfiscanf_r>:
 80096f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f4:	460c      	mov	r4, r1
 80096f6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80096fa:	2100      	movs	r1, #0
 80096fc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009700:	49a6      	ldr	r1, [pc, #664]	; (800999c <__ssvfiscanf_r+0x2ac>)
 8009702:	91a0      	str	r1, [sp, #640]	; 0x280
 8009704:	f10d 0804 	add.w	r8, sp, #4
 8009708:	49a5      	ldr	r1, [pc, #660]	; (80099a0 <__ssvfiscanf_r+0x2b0>)
 800970a:	4fa6      	ldr	r7, [pc, #664]	; (80099a4 <__ssvfiscanf_r+0x2b4>)
 800970c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80099a8 <__ssvfiscanf_r+0x2b8>
 8009710:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009714:	4606      	mov	r6, r0
 8009716:	91a1      	str	r1, [sp, #644]	; 0x284
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	7813      	ldrb	r3, [r2, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 815a 	beq.w	80099d6 <__ssvfiscanf_r+0x2e6>
 8009722:	5cf9      	ldrb	r1, [r7, r3]
 8009724:	f011 0108 	ands.w	r1, r1, #8
 8009728:	f102 0501 	add.w	r5, r2, #1
 800972c:	d019      	beq.n	8009762 <__ssvfiscanf_r+0x72>
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	dd0f      	ble.n	8009754 <__ssvfiscanf_r+0x64>
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	781a      	ldrb	r2, [r3, #0]
 8009738:	5cba      	ldrb	r2, [r7, r2]
 800973a:	0712      	lsls	r2, r2, #28
 800973c:	d401      	bmi.n	8009742 <__ssvfiscanf_r+0x52>
 800973e:	462a      	mov	r2, r5
 8009740:	e7eb      	b.n	800971a <__ssvfiscanf_r+0x2a>
 8009742:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009744:	3201      	adds	r2, #1
 8009746:	9245      	str	r2, [sp, #276]	; 0x114
 8009748:	6862      	ldr	r2, [r4, #4]
 800974a:	3301      	adds	r3, #1
 800974c:	3a01      	subs	r2, #1
 800974e:	6062      	str	r2, [r4, #4]
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	e7ec      	b.n	800972e <__ssvfiscanf_r+0x3e>
 8009754:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009756:	4621      	mov	r1, r4
 8009758:	4630      	mov	r0, r6
 800975a:	4798      	blx	r3
 800975c:	2800      	cmp	r0, #0
 800975e:	d0e9      	beq.n	8009734 <__ssvfiscanf_r+0x44>
 8009760:	e7ed      	b.n	800973e <__ssvfiscanf_r+0x4e>
 8009762:	2b25      	cmp	r3, #37	; 0x25
 8009764:	d012      	beq.n	800978c <__ssvfiscanf_r+0x9c>
 8009766:	469a      	mov	sl, r3
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f340 8091 	ble.w	8009892 <__ssvfiscanf_r+0x1a2>
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	7813      	ldrb	r3, [r2, #0]
 8009774:	4553      	cmp	r3, sl
 8009776:	f040 812e 	bne.w	80099d6 <__ssvfiscanf_r+0x2e6>
 800977a:	6863      	ldr	r3, [r4, #4]
 800977c:	3b01      	subs	r3, #1
 800977e:	6063      	str	r3, [r4, #4]
 8009780:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009782:	3201      	adds	r2, #1
 8009784:	3301      	adds	r3, #1
 8009786:	6022      	str	r2, [r4, #0]
 8009788:	9345      	str	r3, [sp, #276]	; 0x114
 800978a:	e7d8      	b.n	800973e <__ssvfiscanf_r+0x4e>
 800978c:	9141      	str	r1, [sp, #260]	; 0x104
 800978e:	9143      	str	r1, [sp, #268]	; 0x10c
 8009790:	7853      	ldrb	r3, [r2, #1]
 8009792:	2b2a      	cmp	r3, #42	; 0x2a
 8009794:	bf02      	ittt	eq
 8009796:	2310      	moveq	r3, #16
 8009798:	1c95      	addeq	r5, r2, #2
 800979a:	9341      	streq	r3, [sp, #260]	; 0x104
 800979c:	220a      	movs	r2, #10
 800979e:	46aa      	mov	sl, r5
 80097a0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80097a4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80097a8:	2b09      	cmp	r3, #9
 80097aa:	d91c      	bls.n	80097e6 <__ssvfiscanf_r+0xf6>
 80097ac:	487e      	ldr	r0, [pc, #504]	; (80099a8 <__ssvfiscanf_r+0x2b8>)
 80097ae:	2203      	movs	r2, #3
 80097b0:	f7f6 fd0e 	bl	80001d0 <memchr>
 80097b4:	b138      	cbz	r0, 80097c6 <__ssvfiscanf_r+0xd6>
 80097b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80097b8:	eba0 0009 	sub.w	r0, r0, r9
 80097bc:	2301      	movs	r3, #1
 80097be:	4083      	lsls	r3, r0
 80097c0:	4313      	orrs	r3, r2
 80097c2:	9341      	str	r3, [sp, #260]	; 0x104
 80097c4:	4655      	mov	r5, sl
 80097c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097ca:	2b78      	cmp	r3, #120	; 0x78
 80097cc:	d806      	bhi.n	80097dc <__ssvfiscanf_r+0xec>
 80097ce:	2b57      	cmp	r3, #87	; 0x57
 80097d0:	d810      	bhi.n	80097f4 <__ssvfiscanf_r+0x104>
 80097d2:	2b25      	cmp	r3, #37	; 0x25
 80097d4:	d0c7      	beq.n	8009766 <__ssvfiscanf_r+0x76>
 80097d6:	d857      	bhi.n	8009888 <__ssvfiscanf_r+0x198>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d065      	beq.n	80098a8 <__ssvfiscanf_r+0x1b8>
 80097dc:	2303      	movs	r3, #3
 80097de:	9347      	str	r3, [sp, #284]	; 0x11c
 80097e0:	230a      	movs	r3, #10
 80097e2:	9342      	str	r3, [sp, #264]	; 0x108
 80097e4:	e076      	b.n	80098d4 <__ssvfiscanf_r+0x1e4>
 80097e6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80097e8:	fb02 1103 	mla	r1, r2, r3, r1
 80097ec:	3930      	subs	r1, #48	; 0x30
 80097ee:	9143      	str	r1, [sp, #268]	; 0x10c
 80097f0:	4655      	mov	r5, sl
 80097f2:	e7d4      	b.n	800979e <__ssvfiscanf_r+0xae>
 80097f4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80097f8:	2a20      	cmp	r2, #32
 80097fa:	d8ef      	bhi.n	80097dc <__ssvfiscanf_r+0xec>
 80097fc:	a101      	add	r1, pc, #4	; (adr r1, 8009804 <__ssvfiscanf_r+0x114>)
 80097fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009802:	bf00      	nop
 8009804:	080098b7 	.word	0x080098b7
 8009808:	080097dd 	.word	0x080097dd
 800980c:	080097dd 	.word	0x080097dd
 8009810:	08009915 	.word	0x08009915
 8009814:	080097dd 	.word	0x080097dd
 8009818:	080097dd 	.word	0x080097dd
 800981c:	080097dd 	.word	0x080097dd
 8009820:	080097dd 	.word	0x080097dd
 8009824:	080097dd 	.word	0x080097dd
 8009828:	080097dd 	.word	0x080097dd
 800982c:	080097dd 	.word	0x080097dd
 8009830:	0800992b 	.word	0x0800992b
 8009834:	08009911 	.word	0x08009911
 8009838:	0800988f 	.word	0x0800988f
 800983c:	0800988f 	.word	0x0800988f
 8009840:	0800988f 	.word	0x0800988f
 8009844:	080097dd 	.word	0x080097dd
 8009848:	080098cd 	.word	0x080098cd
 800984c:	080097dd 	.word	0x080097dd
 8009850:	080097dd 	.word	0x080097dd
 8009854:	080097dd 	.word	0x080097dd
 8009858:	080097dd 	.word	0x080097dd
 800985c:	0800993b 	.word	0x0800993b
 8009860:	08009909 	.word	0x08009909
 8009864:	080098af 	.word	0x080098af
 8009868:	080097dd 	.word	0x080097dd
 800986c:	080097dd 	.word	0x080097dd
 8009870:	08009937 	.word	0x08009937
 8009874:	080097dd 	.word	0x080097dd
 8009878:	08009911 	.word	0x08009911
 800987c:	080097dd 	.word	0x080097dd
 8009880:	080097dd 	.word	0x080097dd
 8009884:	080098b7 	.word	0x080098b7
 8009888:	3b45      	subs	r3, #69	; 0x45
 800988a:	2b02      	cmp	r3, #2
 800988c:	d8a6      	bhi.n	80097dc <__ssvfiscanf_r+0xec>
 800988e:	2305      	movs	r3, #5
 8009890:	e01f      	b.n	80098d2 <__ssvfiscanf_r+0x1e2>
 8009892:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009894:	4621      	mov	r1, r4
 8009896:	4630      	mov	r0, r6
 8009898:	4798      	blx	r3
 800989a:	2800      	cmp	r0, #0
 800989c:	f43f af68 	beq.w	8009770 <__ssvfiscanf_r+0x80>
 80098a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f040 808d 	bne.w	80099c2 <__ssvfiscanf_r+0x2d2>
 80098a8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ac:	e08f      	b.n	80099ce <__ssvfiscanf_r+0x2de>
 80098ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80098b0:	f042 0220 	orr.w	r2, r2, #32
 80098b4:	9241      	str	r2, [sp, #260]	; 0x104
 80098b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80098b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098bc:	9241      	str	r2, [sp, #260]	; 0x104
 80098be:	2210      	movs	r2, #16
 80098c0:	2b6f      	cmp	r3, #111	; 0x6f
 80098c2:	9242      	str	r2, [sp, #264]	; 0x108
 80098c4:	bf34      	ite	cc
 80098c6:	2303      	movcc	r3, #3
 80098c8:	2304      	movcs	r3, #4
 80098ca:	e002      	b.n	80098d2 <__ssvfiscanf_r+0x1e2>
 80098cc:	2300      	movs	r3, #0
 80098ce:	9342      	str	r3, [sp, #264]	; 0x108
 80098d0:	2303      	movs	r3, #3
 80098d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80098d4:	6863      	ldr	r3, [r4, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	dd3d      	ble.n	8009956 <__ssvfiscanf_r+0x266>
 80098da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80098dc:	0659      	lsls	r1, r3, #25
 80098de:	d404      	bmi.n	80098ea <__ssvfiscanf_r+0x1fa>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	781a      	ldrb	r2, [r3, #0]
 80098e4:	5cba      	ldrb	r2, [r7, r2]
 80098e6:	0712      	lsls	r2, r2, #28
 80098e8:	d43c      	bmi.n	8009964 <__ssvfiscanf_r+0x274>
 80098ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	dc4b      	bgt.n	8009988 <__ssvfiscanf_r+0x298>
 80098f0:	466b      	mov	r3, sp
 80098f2:	4622      	mov	r2, r4
 80098f4:	a941      	add	r1, sp, #260	; 0x104
 80098f6:	4630      	mov	r0, r6
 80098f8:	f000 f9b6 	bl	8009c68 <_scanf_chars>
 80098fc:	2801      	cmp	r0, #1
 80098fe:	d06a      	beq.n	80099d6 <__ssvfiscanf_r+0x2e6>
 8009900:	2802      	cmp	r0, #2
 8009902:	f47f af1c 	bne.w	800973e <__ssvfiscanf_r+0x4e>
 8009906:	e7cb      	b.n	80098a0 <__ssvfiscanf_r+0x1b0>
 8009908:	2308      	movs	r3, #8
 800990a:	9342      	str	r3, [sp, #264]	; 0x108
 800990c:	2304      	movs	r3, #4
 800990e:	e7e0      	b.n	80098d2 <__ssvfiscanf_r+0x1e2>
 8009910:	220a      	movs	r2, #10
 8009912:	e7d5      	b.n	80098c0 <__ssvfiscanf_r+0x1d0>
 8009914:	4629      	mov	r1, r5
 8009916:	4640      	mov	r0, r8
 8009918:	f000 fb8a 	bl	800a030 <__sccl>
 800991c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800991e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009922:	9341      	str	r3, [sp, #260]	; 0x104
 8009924:	4605      	mov	r5, r0
 8009926:	2301      	movs	r3, #1
 8009928:	e7d3      	b.n	80098d2 <__ssvfiscanf_r+0x1e2>
 800992a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800992c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009930:	9341      	str	r3, [sp, #260]	; 0x104
 8009932:	2300      	movs	r3, #0
 8009934:	e7cd      	b.n	80098d2 <__ssvfiscanf_r+0x1e2>
 8009936:	2302      	movs	r3, #2
 8009938:	e7cb      	b.n	80098d2 <__ssvfiscanf_r+0x1e2>
 800993a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800993c:	06c3      	lsls	r3, r0, #27
 800993e:	f53f aefe 	bmi.w	800973e <__ssvfiscanf_r+0x4e>
 8009942:	9b00      	ldr	r3, [sp, #0]
 8009944:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009946:	1d19      	adds	r1, r3, #4
 8009948:	9100      	str	r1, [sp, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	07c0      	lsls	r0, r0, #31
 800994e:	bf4c      	ite	mi
 8009950:	801a      	strhmi	r2, [r3, #0]
 8009952:	601a      	strpl	r2, [r3, #0]
 8009954:	e6f3      	b.n	800973e <__ssvfiscanf_r+0x4e>
 8009956:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009958:	4621      	mov	r1, r4
 800995a:	4630      	mov	r0, r6
 800995c:	4798      	blx	r3
 800995e:	2800      	cmp	r0, #0
 8009960:	d0bb      	beq.n	80098da <__ssvfiscanf_r+0x1ea>
 8009962:	e79d      	b.n	80098a0 <__ssvfiscanf_r+0x1b0>
 8009964:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009966:	3201      	adds	r2, #1
 8009968:	9245      	str	r2, [sp, #276]	; 0x114
 800996a:	6862      	ldr	r2, [r4, #4]
 800996c:	3a01      	subs	r2, #1
 800996e:	2a00      	cmp	r2, #0
 8009970:	6062      	str	r2, [r4, #4]
 8009972:	dd02      	ble.n	800997a <__ssvfiscanf_r+0x28a>
 8009974:	3301      	adds	r3, #1
 8009976:	6023      	str	r3, [r4, #0]
 8009978:	e7b2      	b.n	80098e0 <__ssvfiscanf_r+0x1f0>
 800997a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800997c:	4621      	mov	r1, r4
 800997e:	4630      	mov	r0, r6
 8009980:	4798      	blx	r3
 8009982:	2800      	cmp	r0, #0
 8009984:	d0ac      	beq.n	80098e0 <__ssvfiscanf_r+0x1f0>
 8009986:	e78b      	b.n	80098a0 <__ssvfiscanf_r+0x1b0>
 8009988:	2b04      	cmp	r3, #4
 800998a:	dc0f      	bgt.n	80099ac <__ssvfiscanf_r+0x2bc>
 800998c:	466b      	mov	r3, sp
 800998e:	4622      	mov	r2, r4
 8009990:	a941      	add	r1, sp, #260	; 0x104
 8009992:	4630      	mov	r0, r6
 8009994:	f000 f9c2 	bl	8009d1c <_scanf_i>
 8009998:	e7b0      	b.n	80098fc <__ssvfiscanf_r+0x20c>
 800999a:	bf00      	nop
 800999c:	0800963d 	.word	0x0800963d
 80099a0:	080096b7 	.word	0x080096b7
 80099a4:	0800ae2f 	.word	0x0800ae2f
 80099a8:	0800adc2 	.word	0x0800adc2
 80099ac:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <__ssvfiscanf_r+0x2ec>)
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f43f aec5 	beq.w	800973e <__ssvfiscanf_r+0x4e>
 80099b4:	466b      	mov	r3, sp
 80099b6:	4622      	mov	r2, r4
 80099b8:	a941      	add	r1, sp, #260	; 0x104
 80099ba:	4630      	mov	r0, r6
 80099bc:	f3af 8000 	nop.w
 80099c0:	e79c      	b.n	80098fc <__ssvfiscanf_r+0x20c>
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80099c8:	bf18      	it	ne
 80099ca:	f04f 30ff 	movne.w	r0, #4294967295
 80099ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80099d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80099d8:	e7f9      	b.n	80099ce <__ssvfiscanf_r+0x2de>
 80099da:	bf00      	nop
 80099dc:	00000000 	.word	0x00000000

080099e0 <__sfputc_r>:
 80099e0:	6893      	ldr	r3, [r2, #8]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	b410      	push	{r4}
 80099e8:	6093      	str	r3, [r2, #8]
 80099ea:	da08      	bge.n	80099fe <__sfputc_r+0x1e>
 80099ec:	6994      	ldr	r4, [r2, #24]
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	db01      	blt.n	80099f6 <__sfputc_r+0x16>
 80099f2:	290a      	cmp	r1, #10
 80099f4:	d103      	bne.n	80099fe <__sfputc_r+0x1e>
 80099f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099fa:	f7fe b8a4 	b.w	8007b46 <__swbuf_r>
 80099fe:	6813      	ldr	r3, [r2, #0]
 8009a00:	1c58      	adds	r0, r3, #1
 8009a02:	6010      	str	r0, [r2, #0]
 8009a04:	7019      	strb	r1, [r3, #0]
 8009a06:	4608      	mov	r0, r1
 8009a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <__sfputs_r>:
 8009a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a10:	4606      	mov	r6, r0
 8009a12:	460f      	mov	r7, r1
 8009a14:	4614      	mov	r4, r2
 8009a16:	18d5      	adds	r5, r2, r3
 8009a18:	42ac      	cmp	r4, r5
 8009a1a:	d101      	bne.n	8009a20 <__sfputs_r+0x12>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e007      	b.n	8009a30 <__sfputs_r+0x22>
 8009a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a24:	463a      	mov	r2, r7
 8009a26:	4630      	mov	r0, r6
 8009a28:	f7ff ffda 	bl	80099e0 <__sfputc_r>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d1f3      	bne.n	8009a18 <__sfputs_r+0xa>
 8009a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a34 <_vfiprintf_r>:
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	460d      	mov	r5, r1
 8009a3a:	b09d      	sub	sp, #116	; 0x74
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	4698      	mov	r8, r3
 8009a40:	4606      	mov	r6, r0
 8009a42:	b118      	cbz	r0, 8009a4c <_vfiprintf_r+0x18>
 8009a44:	6a03      	ldr	r3, [r0, #32]
 8009a46:	b90b      	cbnz	r3, 8009a4c <_vfiprintf_r+0x18>
 8009a48:	f7fd ff40 	bl	80078cc <__sinit>
 8009a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a4e:	07d9      	lsls	r1, r3, #31
 8009a50:	d405      	bmi.n	8009a5e <_vfiprintf_r+0x2a>
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	059a      	lsls	r2, r3, #22
 8009a56:	d402      	bmi.n	8009a5e <_vfiprintf_r+0x2a>
 8009a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a5a:	f7fe f99c 	bl	8007d96 <__retarget_lock_acquire_recursive>
 8009a5e:	89ab      	ldrh	r3, [r5, #12]
 8009a60:	071b      	lsls	r3, r3, #28
 8009a62:	d501      	bpl.n	8009a68 <_vfiprintf_r+0x34>
 8009a64:	692b      	ldr	r3, [r5, #16]
 8009a66:	b99b      	cbnz	r3, 8009a90 <_vfiprintf_r+0x5c>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7fe f8a8 	bl	8007bc0 <__swsetup_r>
 8009a70:	b170      	cbz	r0, 8009a90 <_vfiprintf_r+0x5c>
 8009a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a74:	07dc      	lsls	r4, r3, #31
 8009a76:	d504      	bpl.n	8009a82 <_vfiprintf_r+0x4e>
 8009a78:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7c:	b01d      	add	sp, #116	; 0x74
 8009a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	0598      	lsls	r0, r3, #22
 8009a86:	d4f7      	bmi.n	8009a78 <_vfiprintf_r+0x44>
 8009a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a8a:	f7fe f985 	bl	8007d98 <__retarget_lock_release_recursive>
 8009a8e:	e7f3      	b.n	8009a78 <_vfiprintf_r+0x44>
 8009a90:	2300      	movs	r3, #0
 8009a92:	9309      	str	r3, [sp, #36]	; 0x24
 8009a94:	2320      	movs	r3, #32
 8009a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a9e:	2330      	movs	r3, #48	; 0x30
 8009aa0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c54 <_vfiprintf_r+0x220>
 8009aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa8:	f04f 0901 	mov.w	r9, #1
 8009aac:	4623      	mov	r3, r4
 8009aae:	469a      	mov	sl, r3
 8009ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab4:	b10a      	cbz	r2, 8009aba <_vfiprintf_r+0x86>
 8009ab6:	2a25      	cmp	r2, #37	; 0x25
 8009ab8:	d1f9      	bne.n	8009aae <_vfiprintf_r+0x7a>
 8009aba:	ebba 0b04 	subs.w	fp, sl, r4
 8009abe:	d00b      	beq.n	8009ad8 <_vfiprintf_r+0xa4>
 8009ac0:	465b      	mov	r3, fp
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7ff ffa1 	bl	8009a0e <__sfputs_r>
 8009acc:	3001      	adds	r0, #1
 8009ace:	f000 80a9 	beq.w	8009c24 <_vfiprintf_r+0x1f0>
 8009ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ad4:	445a      	add	r2, fp
 8009ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 80a1 	beq.w	8009c24 <_vfiprintf_r+0x1f0>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aec:	f10a 0a01 	add.w	sl, sl, #1
 8009af0:	9304      	str	r3, [sp, #16]
 8009af2:	9307      	str	r3, [sp, #28]
 8009af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af8:	931a      	str	r3, [sp, #104]	; 0x68
 8009afa:	4654      	mov	r4, sl
 8009afc:	2205      	movs	r2, #5
 8009afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b02:	4854      	ldr	r0, [pc, #336]	; (8009c54 <_vfiprintf_r+0x220>)
 8009b04:	f7f6 fb64 	bl	80001d0 <memchr>
 8009b08:	9a04      	ldr	r2, [sp, #16]
 8009b0a:	b9d8      	cbnz	r0, 8009b44 <_vfiprintf_r+0x110>
 8009b0c:	06d1      	lsls	r1, r2, #27
 8009b0e:	bf44      	itt	mi
 8009b10:	2320      	movmi	r3, #32
 8009b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b16:	0713      	lsls	r3, r2, #28
 8009b18:	bf44      	itt	mi
 8009b1a:	232b      	movmi	r3, #43	; 0x2b
 8009b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b20:	f89a 3000 	ldrb.w	r3, [sl]
 8009b24:	2b2a      	cmp	r3, #42	; 0x2a
 8009b26:	d015      	beq.n	8009b54 <_vfiprintf_r+0x120>
 8009b28:	9a07      	ldr	r2, [sp, #28]
 8009b2a:	4654      	mov	r4, sl
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	f04f 0c0a 	mov.w	ip, #10
 8009b32:	4621      	mov	r1, r4
 8009b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b38:	3b30      	subs	r3, #48	; 0x30
 8009b3a:	2b09      	cmp	r3, #9
 8009b3c:	d94d      	bls.n	8009bda <_vfiprintf_r+0x1a6>
 8009b3e:	b1b0      	cbz	r0, 8009b6e <_vfiprintf_r+0x13a>
 8009b40:	9207      	str	r2, [sp, #28]
 8009b42:	e014      	b.n	8009b6e <_vfiprintf_r+0x13a>
 8009b44:	eba0 0308 	sub.w	r3, r0, r8
 8009b48:	fa09 f303 	lsl.w	r3, r9, r3
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	46a2      	mov	sl, r4
 8009b52:	e7d2      	b.n	8009afa <_vfiprintf_r+0xc6>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	1d19      	adds	r1, r3, #4
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	9103      	str	r1, [sp, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	bfbb      	ittet	lt
 8009b60:	425b      	neglt	r3, r3
 8009b62:	f042 0202 	orrlt.w	r2, r2, #2
 8009b66:	9307      	strge	r3, [sp, #28]
 8009b68:	9307      	strlt	r3, [sp, #28]
 8009b6a:	bfb8      	it	lt
 8009b6c:	9204      	strlt	r2, [sp, #16]
 8009b6e:	7823      	ldrb	r3, [r4, #0]
 8009b70:	2b2e      	cmp	r3, #46	; 0x2e
 8009b72:	d10c      	bne.n	8009b8e <_vfiprintf_r+0x15a>
 8009b74:	7863      	ldrb	r3, [r4, #1]
 8009b76:	2b2a      	cmp	r3, #42	; 0x2a
 8009b78:	d134      	bne.n	8009be4 <_vfiprintf_r+0x1b0>
 8009b7a:	9b03      	ldr	r3, [sp, #12]
 8009b7c:	1d1a      	adds	r2, r3, #4
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	9203      	str	r2, [sp, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfb8      	it	lt
 8009b86:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b8a:	3402      	adds	r4, #2
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c64 <_vfiprintf_r+0x230>
 8009b92:	7821      	ldrb	r1, [r4, #0]
 8009b94:	2203      	movs	r2, #3
 8009b96:	4650      	mov	r0, sl
 8009b98:	f7f6 fb1a 	bl	80001d0 <memchr>
 8009b9c:	b138      	cbz	r0, 8009bae <_vfiprintf_r+0x17a>
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	eba0 000a 	sub.w	r0, r0, sl
 8009ba4:	2240      	movs	r2, #64	; 0x40
 8009ba6:	4082      	lsls	r2, r0
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	3401      	adds	r4, #1
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb2:	4829      	ldr	r0, [pc, #164]	; (8009c58 <_vfiprintf_r+0x224>)
 8009bb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bb8:	2206      	movs	r2, #6
 8009bba:	f7f6 fb09 	bl	80001d0 <memchr>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d03f      	beq.n	8009c42 <_vfiprintf_r+0x20e>
 8009bc2:	4b26      	ldr	r3, [pc, #152]	; (8009c5c <_vfiprintf_r+0x228>)
 8009bc4:	bb1b      	cbnz	r3, 8009c0e <_vfiprintf_r+0x1da>
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	3307      	adds	r3, #7
 8009bca:	f023 0307 	bic.w	r3, r3, #7
 8009bce:	3308      	adds	r3, #8
 8009bd0:	9303      	str	r3, [sp, #12]
 8009bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd4:	443b      	add	r3, r7
 8009bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd8:	e768      	b.n	8009aac <_vfiprintf_r+0x78>
 8009bda:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bde:	460c      	mov	r4, r1
 8009be0:	2001      	movs	r0, #1
 8009be2:	e7a6      	b.n	8009b32 <_vfiprintf_r+0xfe>
 8009be4:	2300      	movs	r3, #0
 8009be6:	3401      	adds	r4, #1
 8009be8:	9305      	str	r3, [sp, #20]
 8009bea:	4619      	mov	r1, r3
 8009bec:	f04f 0c0a 	mov.w	ip, #10
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf6:	3a30      	subs	r2, #48	; 0x30
 8009bf8:	2a09      	cmp	r2, #9
 8009bfa:	d903      	bls.n	8009c04 <_vfiprintf_r+0x1d0>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0c6      	beq.n	8009b8e <_vfiprintf_r+0x15a>
 8009c00:	9105      	str	r1, [sp, #20]
 8009c02:	e7c4      	b.n	8009b8e <_vfiprintf_r+0x15a>
 8009c04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c08:	4604      	mov	r4, r0
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e7f0      	b.n	8009bf0 <_vfiprintf_r+0x1bc>
 8009c0e:	ab03      	add	r3, sp, #12
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	462a      	mov	r2, r5
 8009c14:	4b12      	ldr	r3, [pc, #72]	; (8009c60 <_vfiprintf_r+0x22c>)
 8009c16:	a904      	add	r1, sp, #16
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7fd f943 	bl	8006ea4 <_printf_float>
 8009c1e:	4607      	mov	r7, r0
 8009c20:	1c78      	adds	r0, r7, #1
 8009c22:	d1d6      	bne.n	8009bd2 <_vfiprintf_r+0x19e>
 8009c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d405      	bmi.n	8009c36 <_vfiprintf_r+0x202>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	059a      	lsls	r2, r3, #22
 8009c2e:	d402      	bmi.n	8009c36 <_vfiprintf_r+0x202>
 8009c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c32:	f7fe f8b1 	bl	8007d98 <__retarget_lock_release_recursive>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	065b      	lsls	r3, r3, #25
 8009c3a:	f53f af1d 	bmi.w	8009a78 <_vfiprintf_r+0x44>
 8009c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c40:	e71c      	b.n	8009a7c <_vfiprintf_r+0x48>
 8009c42:	ab03      	add	r3, sp, #12
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	462a      	mov	r2, r5
 8009c48:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <_vfiprintf_r+0x22c>)
 8009c4a:	a904      	add	r1, sp, #16
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7fd fbcd 	bl	80073ec <_printf_i>
 8009c52:	e7e4      	b.n	8009c1e <_vfiprintf_r+0x1ea>
 8009c54:	0800adbc 	.word	0x0800adbc
 8009c58:	0800adc6 	.word	0x0800adc6
 8009c5c:	08006ea5 	.word	0x08006ea5
 8009c60:	08009a0f 	.word	0x08009a0f
 8009c64:	0800adc2 	.word	0x0800adc2

08009c68 <_scanf_chars>:
 8009c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c6c:	4615      	mov	r5, r2
 8009c6e:	688a      	ldr	r2, [r1, #8]
 8009c70:	4680      	mov	r8, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	b932      	cbnz	r2, 8009c84 <_scanf_chars+0x1c>
 8009c76:	698a      	ldr	r2, [r1, #24]
 8009c78:	2a00      	cmp	r2, #0
 8009c7a:	bf0c      	ite	eq
 8009c7c:	2201      	moveq	r2, #1
 8009c7e:	f04f 32ff 	movne.w	r2, #4294967295
 8009c82:	608a      	str	r2, [r1, #8]
 8009c84:	6822      	ldr	r2, [r4, #0]
 8009c86:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009d18 <_scanf_chars+0xb0>
 8009c8a:	06d1      	lsls	r1, r2, #27
 8009c8c:	bf5f      	itttt	pl
 8009c8e:	681a      	ldrpl	r2, [r3, #0]
 8009c90:	1d11      	addpl	r1, r2, #4
 8009c92:	6019      	strpl	r1, [r3, #0]
 8009c94:	6816      	ldrpl	r6, [r2, #0]
 8009c96:	2700      	movs	r7, #0
 8009c98:	69a0      	ldr	r0, [r4, #24]
 8009c9a:	b188      	cbz	r0, 8009cc0 <_scanf_chars+0x58>
 8009c9c:	2801      	cmp	r0, #1
 8009c9e:	d107      	bne.n	8009cb0 <_scanf_chars+0x48>
 8009ca0:	682a      	ldr	r2, [r5, #0]
 8009ca2:	7811      	ldrb	r1, [r2, #0]
 8009ca4:	6962      	ldr	r2, [r4, #20]
 8009ca6:	5c52      	ldrb	r2, [r2, r1]
 8009ca8:	b952      	cbnz	r2, 8009cc0 <_scanf_chars+0x58>
 8009caa:	2f00      	cmp	r7, #0
 8009cac:	d031      	beq.n	8009d12 <_scanf_chars+0xaa>
 8009cae:	e022      	b.n	8009cf6 <_scanf_chars+0x8e>
 8009cb0:	2802      	cmp	r0, #2
 8009cb2:	d120      	bne.n	8009cf6 <_scanf_chars+0x8e>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009cbc:	071b      	lsls	r3, r3, #28
 8009cbe:	d41a      	bmi.n	8009cf6 <_scanf_chars+0x8e>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	06da      	lsls	r2, r3, #27
 8009cc4:	bf5e      	ittt	pl
 8009cc6:	682b      	ldrpl	r3, [r5, #0]
 8009cc8:	781b      	ldrbpl	r3, [r3, #0]
 8009cca:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009cce:	682a      	ldr	r2, [r5, #0]
 8009cd0:	686b      	ldr	r3, [r5, #4]
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	68a2      	ldr	r2, [r4, #8]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	3a01      	subs	r2, #1
 8009cdc:	606b      	str	r3, [r5, #4]
 8009cde:	3701      	adds	r7, #1
 8009ce0:	60a2      	str	r2, [r4, #8]
 8009ce2:	b142      	cbz	r2, 8009cf6 <_scanf_chars+0x8e>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	dcd7      	bgt.n	8009c98 <_scanf_chars+0x30>
 8009ce8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009cec:	4629      	mov	r1, r5
 8009cee:	4640      	mov	r0, r8
 8009cf0:	4798      	blx	r3
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d0d0      	beq.n	8009c98 <_scanf_chars+0x30>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	f013 0310 	ands.w	r3, r3, #16
 8009cfc:	d105      	bne.n	8009d0a <_scanf_chars+0xa2>
 8009cfe:	68e2      	ldr	r2, [r4, #12]
 8009d00:	3201      	adds	r2, #1
 8009d02:	60e2      	str	r2, [r4, #12]
 8009d04:	69a2      	ldr	r2, [r4, #24]
 8009d06:	b102      	cbz	r2, 8009d0a <_scanf_chars+0xa2>
 8009d08:	7033      	strb	r3, [r6, #0]
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	443b      	add	r3, r7
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	2000      	movs	r0, #0
 8009d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d16:	bf00      	nop
 8009d18:	0800ae2f 	.word	0x0800ae2f

08009d1c <_scanf_i>:
 8009d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d20:	4698      	mov	r8, r3
 8009d22:	4b74      	ldr	r3, [pc, #464]	; (8009ef4 <_scanf_i+0x1d8>)
 8009d24:	460c      	mov	r4, r1
 8009d26:	4682      	mov	sl, r0
 8009d28:	4616      	mov	r6, r2
 8009d2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d2e:	b087      	sub	sp, #28
 8009d30:	ab03      	add	r3, sp, #12
 8009d32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009d36:	4b70      	ldr	r3, [pc, #448]	; (8009ef8 <_scanf_i+0x1dc>)
 8009d38:	69a1      	ldr	r1, [r4, #24]
 8009d3a:	4a70      	ldr	r2, [pc, #448]	; (8009efc <_scanf_i+0x1e0>)
 8009d3c:	2903      	cmp	r1, #3
 8009d3e:	bf18      	it	ne
 8009d40:	461a      	movne	r2, r3
 8009d42:	68a3      	ldr	r3, [r4, #8]
 8009d44:	9201      	str	r2, [sp, #4]
 8009d46:	1e5a      	subs	r2, r3, #1
 8009d48:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d4c:	bf88      	it	hi
 8009d4e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009d52:	4627      	mov	r7, r4
 8009d54:	bf82      	ittt	hi
 8009d56:	eb03 0905 	addhi.w	r9, r3, r5
 8009d5a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d5e:	60a3      	strhi	r3, [r4, #8]
 8009d60:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009d64:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009d68:	bf98      	it	ls
 8009d6a:	f04f 0900 	movls.w	r9, #0
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	463d      	mov	r5, r7
 8009d72:	f04f 0b00 	mov.w	fp, #0
 8009d76:	6831      	ldr	r1, [r6, #0]
 8009d78:	ab03      	add	r3, sp, #12
 8009d7a:	7809      	ldrb	r1, [r1, #0]
 8009d7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009d80:	2202      	movs	r2, #2
 8009d82:	f7f6 fa25 	bl	80001d0 <memchr>
 8009d86:	b328      	cbz	r0, 8009dd4 <_scanf_i+0xb8>
 8009d88:	f1bb 0f01 	cmp.w	fp, #1
 8009d8c:	d159      	bne.n	8009e42 <_scanf_i+0x126>
 8009d8e:	6862      	ldr	r2, [r4, #4]
 8009d90:	b92a      	cbnz	r2, 8009d9e <_scanf_i+0x82>
 8009d92:	6822      	ldr	r2, [r4, #0]
 8009d94:	2308      	movs	r3, #8
 8009d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d9a:	6063      	str	r3, [r4, #4]
 8009d9c:	6022      	str	r2, [r4, #0]
 8009d9e:	6822      	ldr	r2, [r4, #0]
 8009da0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009da4:	6022      	str	r2, [r4, #0]
 8009da6:	68a2      	ldr	r2, [r4, #8]
 8009da8:	1e51      	subs	r1, r2, #1
 8009daa:	60a1      	str	r1, [r4, #8]
 8009dac:	b192      	cbz	r2, 8009dd4 <_scanf_i+0xb8>
 8009dae:	6832      	ldr	r2, [r6, #0]
 8009db0:	1c51      	adds	r1, r2, #1
 8009db2:	6031      	str	r1, [r6, #0]
 8009db4:	7812      	ldrb	r2, [r2, #0]
 8009db6:	f805 2b01 	strb.w	r2, [r5], #1
 8009dba:	6872      	ldr	r2, [r6, #4]
 8009dbc:	3a01      	subs	r2, #1
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	6072      	str	r2, [r6, #4]
 8009dc2:	dc07      	bgt.n	8009dd4 <_scanf_i+0xb8>
 8009dc4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4650      	mov	r0, sl
 8009dcc:	4790      	blx	r2
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f040 8085 	bne.w	8009ede <_scanf_i+0x1c2>
 8009dd4:	f10b 0b01 	add.w	fp, fp, #1
 8009dd8:	f1bb 0f03 	cmp.w	fp, #3
 8009ddc:	d1cb      	bne.n	8009d76 <_scanf_i+0x5a>
 8009dde:	6863      	ldr	r3, [r4, #4]
 8009de0:	b90b      	cbnz	r3, 8009de6 <_scanf_i+0xca>
 8009de2:	230a      	movs	r3, #10
 8009de4:	6063      	str	r3, [r4, #4]
 8009de6:	6863      	ldr	r3, [r4, #4]
 8009de8:	4945      	ldr	r1, [pc, #276]	; (8009f00 <_scanf_i+0x1e4>)
 8009dea:	6960      	ldr	r0, [r4, #20]
 8009dec:	1ac9      	subs	r1, r1, r3
 8009dee:	f000 f91f 	bl	800a030 <__sccl>
 8009df2:	f04f 0b00 	mov.w	fp, #0
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	6822      	ldr	r2, [r4, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d03d      	beq.n	8009e7a <_scanf_i+0x15e>
 8009dfe:	6831      	ldr	r1, [r6, #0]
 8009e00:	6960      	ldr	r0, [r4, #20]
 8009e02:	f891 c000 	ldrb.w	ip, [r1]
 8009e06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009e0a:	2800      	cmp	r0, #0
 8009e0c:	d035      	beq.n	8009e7a <_scanf_i+0x15e>
 8009e0e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009e12:	d124      	bne.n	8009e5e <_scanf_i+0x142>
 8009e14:	0510      	lsls	r0, r2, #20
 8009e16:	d522      	bpl.n	8009e5e <_scanf_i+0x142>
 8009e18:	f10b 0b01 	add.w	fp, fp, #1
 8009e1c:	f1b9 0f00 	cmp.w	r9, #0
 8009e20:	d003      	beq.n	8009e2a <_scanf_i+0x10e>
 8009e22:	3301      	adds	r3, #1
 8009e24:	f109 39ff 	add.w	r9, r9, #4294967295
 8009e28:	60a3      	str	r3, [r4, #8]
 8009e2a:	6873      	ldr	r3, [r6, #4]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	6073      	str	r3, [r6, #4]
 8009e32:	dd1b      	ble.n	8009e6c <_scanf_i+0x150>
 8009e34:	6833      	ldr	r3, [r6, #0]
 8009e36:	3301      	adds	r3, #1
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	68a3      	ldr	r3, [r4, #8]
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	60a3      	str	r3, [r4, #8]
 8009e40:	e7d9      	b.n	8009df6 <_scanf_i+0xda>
 8009e42:	f1bb 0f02 	cmp.w	fp, #2
 8009e46:	d1ae      	bne.n	8009da6 <_scanf_i+0x8a>
 8009e48:	6822      	ldr	r2, [r4, #0]
 8009e4a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009e4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009e52:	d1bf      	bne.n	8009dd4 <_scanf_i+0xb8>
 8009e54:	2310      	movs	r3, #16
 8009e56:	6063      	str	r3, [r4, #4]
 8009e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e5c:	e7a2      	b.n	8009da4 <_scanf_i+0x88>
 8009e5e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009e62:	6022      	str	r2, [r4, #0]
 8009e64:	780b      	ldrb	r3, [r1, #0]
 8009e66:	f805 3b01 	strb.w	r3, [r5], #1
 8009e6a:	e7de      	b.n	8009e2a <_scanf_i+0x10e>
 8009e6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009e70:	4631      	mov	r1, r6
 8009e72:	4650      	mov	r0, sl
 8009e74:	4798      	blx	r3
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d0df      	beq.n	8009e3a <_scanf_i+0x11e>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	05d9      	lsls	r1, r3, #23
 8009e7e:	d50d      	bpl.n	8009e9c <_scanf_i+0x180>
 8009e80:	42bd      	cmp	r5, r7
 8009e82:	d909      	bls.n	8009e98 <_scanf_i+0x17c>
 8009e84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009e88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	4650      	mov	r0, sl
 8009e90:	4798      	blx	r3
 8009e92:	f105 39ff 	add.w	r9, r5, #4294967295
 8009e96:	464d      	mov	r5, r9
 8009e98:	42bd      	cmp	r5, r7
 8009e9a:	d028      	beq.n	8009eee <_scanf_i+0x1d2>
 8009e9c:	6822      	ldr	r2, [r4, #0]
 8009e9e:	f012 0210 	ands.w	r2, r2, #16
 8009ea2:	d113      	bne.n	8009ecc <_scanf_i+0x1b0>
 8009ea4:	702a      	strb	r2, [r5, #0]
 8009ea6:	6863      	ldr	r3, [r4, #4]
 8009ea8:	9e01      	ldr	r6, [sp, #4]
 8009eaa:	4639      	mov	r1, r7
 8009eac:	4650      	mov	r0, sl
 8009eae:	47b0      	blx	r6
 8009eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb4:	6821      	ldr	r1, [r4, #0]
 8009eb6:	1d1a      	adds	r2, r3, #4
 8009eb8:	f8c8 2000 	str.w	r2, [r8]
 8009ebc:	f011 0f20 	tst.w	r1, #32
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	d00f      	beq.n	8009ee4 <_scanf_i+0x1c8>
 8009ec4:	6018      	str	r0, [r3, #0]
 8009ec6:	68e3      	ldr	r3, [r4, #12]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	60e3      	str	r3, [r4, #12]
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	1bed      	subs	r5, r5, r7
 8009ed0:	445d      	add	r5, fp
 8009ed2:	442b      	add	r3, r5
 8009ed4:	6123      	str	r3, [r4, #16]
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	b007      	add	sp, #28
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	f04f 0b00 	mov.w	fp, #0
 8009ee2:	e7ca      	b.n	8009e7a <_scanf_i+0x15e>
 8009ee4:	07ca      	lsls	r2, r1, #31
 8009ee6:	bf4c      	ite	mi
 8009ee8:	8018      	strhmi	r0, [r3, #0]
 8009eea:	6018      	strpl	r0, [r3, #0]
 8009eec:	e7eb      	b.n	8009ec6 <_scanf_i+0x1aa>
 8009eee:	2001      	movs	r0, #1
 8009ef0:	e7f2      	b.n	8009ed8 <_scanf_i+0x1bc>
 8009ef2:	bf00      	nop
 8009ef4:	0800ab50 	.word	0x0800ab50
 8009ef8:	0800a4a5 	.word	0x0800a4a5
 8009efc:	0800a3bd 	.word	0x0800a3bd
 8009f00:	0800addd 	.word	0x0800addd

08009f04 <__swhatbuf_r>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	460c      	mov	r4, r1
 8009f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	b096      	sub	sp, #88	; 0x58
 8009f10:	4615      	mov	r5, r2
 8009f12:	461e      	mov	r6, r3
 8009f14:	da0d      	bge.n	8009f32 <__swhatbuf_r+0x2e>
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f1c:	f04f 0100 	mov.w	r1, #0
 8009f20:	bf0c      	ite	eq
 8009f22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f26:	2340      	movne	r3, #64	; 0x40
 8009f28:	2000      	movs	r0, #0
 8009f2a:	6031      	str	r1, [r6, #0]
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	b016      	add	sp, #88	; 0x58
 8009f30:	bd70      	pop	{r4, r5, r6, pc}
 8009f32:	466a      	mov	r2, sp
 8009f34:	f000 f90a 	bl	800a14c <_fstat_r>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	dbec      	blt.n	8009f16 <__swhatbuf_r+0x12>
 8009f3c:	9901      	ldr	r1, [sp, #4]
 8009f3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f46:	4259      	negs	r1, r3
 8009f48:	4159      	adcs	r1, r3
 8009f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f4e:	e7eb      	b.n	8009f28 <__swhatbuf_r+0x24>

08009f50 <__smakebuf_r>:
 8009f50:	898b      	ldrh	r3, [r1, #12]
 8009f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f54:	079d      	lsls	r5, r3, #30
 8009f56:	4606      	mov	r6, r0
 8009f58:	460c      	mov	r4, r1
 8009f5a:	d507      	bpl.n	8009f6c <__smakebuf_r+0x1c>
 8009f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f60:	6023      	str	r3, [r4, #0]
 8009f62:	6123      	str	r3, [r4, #16]
 8009f64:	2301      	movs	r3, #1
 8009f66:	6163      	str	r3, [r4, #20]
 8009f68:	b002      	add	sp, #8
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	ab01      	add	r3, sp, #4
 8009f6e:	466a      	mov	r2, sp
 8009f70:	f7ff ffc8 	bl	8009f04 <__swhatbuf_r>
 8009f74:	9900      	ldr	r1, [sp, #0]
 8009f76:	4605      	mov	r5, r0
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7fe fdff 	bl	8008b7c <_malloc_r>
 8009f7e:	b948      	cbnz	r0, 8009f94 <__smakebuf_r+0x44>
 8009f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f84:	059a      	lsls	r2, r3, #22
 8009f86:	d4ef      	bmi.n	8009f68 <__smakebuf_r+0x18>
 8009f88:	f023 0303 	bic.w	r3, r3, #3
 8009f8c:	f043 0302 	orr.w	r3, r3, #2
 8009f90:	81a3      	strh	r3, [r4, #12]
 8009f92:	e7e3      	b.n	8009f5c <__smakebuf_r+0xc>
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	6020      	str	r0, [r4, #0]
 8009f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	9b00      	ldr	r3, [sp, #0]
 8009fa0:	6163      	str	r3, [r4, #20]
 8009fa2:	9b01      	ldr	r3, [sp, #4]
 8009fa4:	6120      	str	r0, [r4, #16]
 8009fa6:	b15b      	cbz	r3, 8009fc0 <__smakebuf_r+0x70>
 8009fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fac:	4630      	mov	r0, r6
 8009fae:	f000 f8df 	bl	800a170 <_isatty_r>
 8009fb2:	b128      	cbz	r0, 8009fc0 <__smakebuf_r+0x70>
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f023 0303 	bic.w	r3, r3, #3
 8009fba:	f043 0301 	orr.w	r3, r3, #1
 8009fbe:	81a3      	strh	r3, [r4, #12]
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	431d      	orrs	r5, r3
 8009fc4:	81a5      	strh	r5, [r4, #12]
 8009fc6:	e7cf      	b.n	8009f68 <__smakebuf_r+0x18>

08009fc8 <_putc_r>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	460d      	mov	r5, r1
 8009fcc:	4614      	mov	r4, r2
 8009fce:	4606      	mov	r6, r0
 8009fd0:	b118      	cbz	r0, 8009fda <_putc_r+0x12>
 8009fd2:	6a03      	ldr	r3, [r0, #32]
 8009fd4:	b90b      	cbnz	r3, 8009fda <_putc_r+0x12>
 8009fd6:	f7fd fc79 	bl	80078cc <__sinit>
 8009fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fdc:	07d8      	lsls	r0, r3, #31
 8009fde:	d405      	bmi.n	8009fec <_putc_r+0x24>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	0599      	lsls	r1, r3, #22
 8009fe4:	d402      	bmi.n	8009fec <_putc_r+0x24>
 8009fe6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fe8:	f7fd fed5 	bl	8007d96 <__retarget_lock_acquire_recursive>
 8009fec:	68a3      	ldr	r3, [r4, #8]
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	60a3      	str	r3, [r4, #8]
 8009ff4:	da05      	bge.n	800a002 <_putc_r+0x3a>
 8009ff6:	69a2      	ldr	r2, [r4, #24]
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	db12      	blt.n	800a022 <_putc_r+0x5a>
 8009ffc:	b2eb      	uxtb	r3, r5
 8009ffe:	2b0a      	cmp	r3, #10
 800a000:	d00f      	beq.n	800a022 <_putc_r+0x5a>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	6022      	str	r2, [r4, #0]
 800a008:	701d      	strb	r5, [r3, #0]
 800a00a:	b2ed      	uxtb	r5, r5
 800a00c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a00e:	07da      	lsls	r2, r3, #31
 800a010:	d405      	bmi.n	800a01e <_putc_r+0x56>
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	059b      	lsls	r3, r3, #22
 800a016:	d402      	bmi.n	800a01e <_putc_r+0x56>
 800a018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a01a:	f7fd febd 	bl	8007d98 <__retarget_lock_release_recursive>
 800a01e:	4628      	mov	r0, r5
 800a020:	bd70      	pop	{r4, r5, r6, pc}
 800a022:	4629      	mov	r1, r5
 800a024:	4622      	mov	r2, r4
 800a026:	4630      	mov	r0, r6
 800a028:	f7fd fd8d 	bl	8007b46 <__swbuf_r>
 800a02c:	4605      	mov	r5, r0
 800a02e:	e7ed      	b.n	800a00c <_putc_r+0x44>

0800a030 <__sccl>:
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	780b      	ldrb	r3, [r1, #0]
 800a034:	4604      	mov	r4, r0
 800a036:	2b5e      	cmp	r3, #94	; 0x5e
 800a038:	bf0b      	itete	eq
 800a03a:	784b      	ldrbeq	r3, [r1, #1]
 800a03c:	1c4a      	addne	r2, r1, #1
 800a03e:	1c8a      	addeq	r2, r1, #2
 800a040:	2100      	movne	r1, #0
 800a042:	bf08      	it	eq
 800a044:	2101      	moveq	r1, #1
 800a046:	3801      	subs	r0, #1
 800a048:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a04c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a050:	42a8      	cmp	r0, r5
 800a052:	d1fb      	bne.n	800a04c <__sccl+0x1c>
 800a054:	b90b      	cbnz	r3, 800a05a <__sccl+0x2a>
 800a056:	1e50      	subs	r0, r2, #1
 800a058:	bd70      	pop	{r4, r5, r6, pc}
 800a05a:	f081 0101 	eor.w	r1, r1, #1
 800a05e:	54e1      	strb	r1, [r4, r3]
 800a060:	4610      	mov	r0, r2
 800a062:	4602      	mov	r2, r0
 800a064:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a068:	2d2d      	cmp	r5, #45	; 0x2d
 800a06a:	d005      	beq.n	800a078 <__sccl+0x48>
 800a06c:	2d5d      	cmp	r5, #93	; 0x5d
 800a06e:	d016      	beq.n	800a09e <__sccl+0x6e>
 800a070:	2d00      	cmp	r5, #0
 800a072:	d0f1      	beq.n	800a058 <__sccl+0x28>
 800a074:	462b      	mov	r3, r5
 800a076:	e7f2      	b.n	800a05e <__sccl+0x2e>
 800a078:	7846      	ldrb	r6, [r0, #1]
 800a07a:	2e5d      	cmp	r6, #93	; 0x5d
 800a07c:	d0fa      	beq.n	800a074 <__sccl+0x44>
 800a07e:	42b3      	cmp	r3, r6
 800a080:	dcf8      	bgt.n	800a074 <__sccl+0x44>
 800a082:	3002      	adds	r0, #2
 800a084:	461a      	mov	r2, r3
 800a086:	3201      	adds	r2, #1
 800a088:	4296      	cmp	r6, r2
 800a08a:	54a1      	strb	r1, [r4, r2]
 800a08c:	dcfb      	bgt.n	800a086 <__sccl+0x56>
 800a08e:	1af2      	subs	r2, r6, r3
 800a090:	3a01      	subs	r2, #1
 800a092:	1c5d      	adds	r5, r3, #1
 800a094:	42b3      	cmp	r3, r6
 800a096:	bfa8      	it	ge
 800a098:	2200      	movge	r2, #0
 800a09a:	18ab      	adds	r3, r5, r2
 800a09c:	e7e1      	b.n	800a062 <__sccl+0x32>
 800a09e:	4610      	mov	r0, r2
 800a0a0:	e7da      	b.n	800a058 <__sccl+0x28>

0800a0a2 <__submore>:
 800a0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a0aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0ae:	4299      	cmp	r1, r3
 800a0b0:	d11d      	bne.n	800a0ee <__submore+0x4c>
 800a0b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0b6:	f7fe fd61 	bl	8008b7c <_malloc_r>
 800a0ba:	b918      	cbnz	r0, 800a0c4 <__submore+0x22>
 800a0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0ca:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a0ce:	6360      	str	r0, [r4, #52]	; 0x34
 800a0d0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a0d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a0d8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a0dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0e0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a0e4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a0e8:	6020      	str	r0, [r4, #0]
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e7e8      	b.n	800a0c0 <__submore+0x1e>
 800a0ee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a0f0:	0077      	lsls	r7, r6, #1
 800a0f2:	463a      	mov	r2, r7
 800a0f4:	f000 f8b0 	bl	800a258 <_realloc_r>
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d0de      	beq.n	800a0bc <__submore+0x1a>
 800a0fe:	eb00 0806 	add.w	r8, r0, r6
 800a102:	4601      	mov	r1, r0
 800a104:	4632      	mov	r2, r6
 800a106:	4640      	mov	r0, r8
 800a108:	f000 f852 	bl	800a1b0 <memcpy>
 800a10c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a110:	f8c4 8000 	str.w	r8, [r4]
 800a114:	e7e9      	b.n	800a0ea <__submore+0x48>

0800a116 <memmove>:
 800a116:	4288      	cmp	r0, r1
 800a118:	b510      	push	{r4, lr}
 800a11a:	eb01 0402 	add.w	r4, r1, r2
 800a11e:	d902      	bls.n	800a126 <memmove+0x10>
 800a120:	4284      	cmp	r4, r0
 800a122:	4623      	mov	r3, r4
 800a124:	d807      	bhi.n	800a136 <memmove+0x20>
 800a126:	1e43      	subs	r3, r0, #1
 800a128:	42a1      	cmp	r1, r4
 800a12a:	d008      	beq.n	800a13e <memmove+0x28>
 800a12c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a130:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a134:	e7f8      	b.n	800a128 <memmove+0x12>
 800a136:	4402      	add	r2, r0
 800a138:	4601      	mov	r1, r0
 800a13a:	428a      	cmp	r2, r1
 800a13c:	d100      	bne.n	800a140 <memmove+0x2a>
 800a13e:	bd10      	pop	{r4, pc}
 800a140:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a144:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a148:	e7f7      	b.n	800a13a <memmove+0x24>
	...

0800a14c <_fstat_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d07      	ldr	r5, [pc, #28]	; (800a16c <_fstat_r+0x20>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	4611      	mov	r1, r2
 800a158:	602b      	str	r3, [r5, #0]
 800a15a:	f7f8 fcd9 	bl	8002b10 <_fstat>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d102      	bne.n	800a168 <_fstat_r+0x1c>
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	b103      	cbz	r3, 800a168 <_fstat_r+0x1c>
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	bd38      	pop	{r3, r4, r5, pc}
 800a16a:	bf00      	nop
 800a16c:	200005c4 	.word	0x200005c4

0800a170 <_isatty_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d06      	ldr	r5, [pc, #24]	; (800a18c <_isatty_r+0x1c>)
 800a174:	2300      	movs	r3, #0
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	f7f8 fcd8 	bl	8002b30 <_isatty>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_isatty_r+0x1a>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_isatty_r+0x1a>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	200005c4 	.word	0x200005c4

0800a190 <_sbrk_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d06      	ldr	r5, [pc, #24]	; (800a1ac <_sbrk_r+0x1c>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	f7f8 fce0 	bl	8002b60 <_sbrk>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_sbrk_r+0x1a>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_sbrk_r+0x1a>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	200005c4 	.word	0x200005c4

0800a1b0 <memcpy>:
 800a1b0:	440a      	add	r2, r1
 800a1b2:	4291      	cmp	r1, r2
 800a1b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1b8:	d100      	bne.n	800a1bc <memcpy+0xc>
 800a1ba:	4770      	bx	lr
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1c6:	4291      	cmp	r1, r2
 800a1c8:	d1f9      	bne.n	800a1be <memcpy+0xe>
 800a1ca:	bd10      	pop	{r4, pc}

0800a1cc <__assert_func>:
 800a1cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ce:	4614      	mov	r4, r2
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <__assert_func+0x2c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	68d8      	ldr	r0, [r3, #12]
 800a1da:	b14c      	cbz	r4, 800a1f0 <__assert_func+0x24>
 800a1dc:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <__assert_func+0x30>)
 800a1de:	9100      	str	r1, [sp, #0]
 800a1e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1e4:	4906      	ldr	r1, [pc, #24]	; (800a200 <__assert_func+0x34>)
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	f000 f96c 	bl	800a4c4 <fiprintf>
 800a1ec:	f000 f97c 	bl	800a4e8 <abort>
 800a1f0:	4b04      	ldr	r3, [pc, #16]	; (800a204 <__assert_func+0x38>)
 800a1f2:	461c      	mov	r4, r3
 800a1f4:	e7f3      	b.n	800a1de <__assert_func+0x12>
 800a1f6:	bf00      	nop
 800a1f8:	200000d0 	.word	0x200000d0
 800a1fc:	0800adf2 	.word	0x0800adf2
 800a200:	0800adff 	.word	0x0800adff
 800a204:	0800ae2d 	.word	0x0800ae2d

0800a208 <_calloc_r>:
 800a208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a20a:	fba1 2402 	umull	r2, r4, r1, r2
 800a20e:	b94c      	cbnz	r4, 800a224 <_calloc_r+0x1c>
 800a210:	4611      	mov	r1, r2
 800a212:	9201      	str	r2, [sp, #4]
 800a214:	f7fe fcb2 	bl	8008b7c <_malloc_r>
 800a218:	9a01      	ldr	r2, [sp, #4]
 800a21a:	4605      	mov	r5, r0
 800a21c:	b930      	cbnz	r0, 800a22c <_calloc_r+0x24>
 800a21e:	4628      	mov	r0, r5
 800a220:	b003      	add	sp, #12
 800a222:	bd30      	pop	{r4, r5, pc}
 800a224:	220c      	movs	r2, #12
 800a226:	6002      	str	r2, [r0, #0]
 800a228:	2500      	movs	r5, #0
 800a22a:	e7f8      	b.n	800a21e <_calloc_r+0x16>
 800a22c:	4621      	mov	r1, r4
 800a22e:	f7fd fd1f 	bl	8007c70 <memset>
 800a232:	e7f4      	b.n	800a21e <_calloc_r+0x16>

0800a234 <__ascii_mbtowc>:
 800a234:	b082      	sub	sp, #8
 800a236:	b901      	cbnz	r1, 800a23a <__ascii_mbtowc+0x6>
 800a238:	a901      	add	r1, sp, #4
 800a23a:	b142      	cbz	r2, 800a24e <__ascii_mbtowc+0x1a>
 800a23c:	b14b      	cbz	r3, 800a252 <__ascii_mbtowc+0x1e>
 800a23e:	7813      	ldrb	r3, [r2, #0]
 800a240:	600b      	str	r3, [r1, #0]
 800a242:	7812      	ldrb	r2, [r2, #0]
 800a244:	1e10      	subs	r0, r2, #0
 800a246:	bf18      	it	ne
 800a248:	2001      	movne	r0, #1
 800a24a:	b002      	add	sp, #8
 800a24c:	4770      	bx	lr
 800a24e:	4610      	mov	r0, r2
 800a250:	e7fb      	b.n	800a24a <__ascii_mbtowc+0x16>
 800a252:	f06f 0001 	mvn.w	r0, #1
 800a256:	e7f8      	b.n	800a24a <__ascii_mbtowc+0x16>

0800a258 <_realloc_r>:
 800a258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25c:	4680      	mov	r8, r0
 800a25e:	4614      	mov	r4, r2
 800a260:	460e      	mov	r6, r1
 800a262:	b921      	cbnz	r1, 800a26e <_realloc_r+0x16>
 800a264:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a268:	4611      	mov	r1, r2
 800a26a:	f7fe bc87 	b.w	8008b7c <_malloc_r>
 800a26e:	b92a      	cbnz	r2, 800a27c <_realloc_r+0x24>
 800a270:	f7fe fc10 	bl	8008a94 <_free_r>
 800a274:	4625      	mov	r5, r4
 800a276:	4628      	mov	r0, r5
 800a278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a27c:	f000 f93b 	bl	800a4f6 <_malloc_usable_size_r>
 800a280:	4284      	cmp	r4, r0
 800a282:	4607      	mov	r7, r0
 800a284:	d802      	bhi.n	800a28c <_realloc_r+0x34>
 800a286:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a28a:	d812      	bhi.n	800a2b2 <_realloc_r+0x5a>
 800a28c:	4621      	mov	r1, r4
 800a28e:	4640      	mov	r0, r8
 800a290:	f7fe fc74 	bl	8008b7c <_malloc_r>
 800a294:	4605      	mov	r5, r0
 800a296:	2800      	cmp	r0, #0
 800a298:	d0ed      	beq.n	800a276 <_realloc_r+0x1e>
 800a29a:	42bc      	cmp	r4, r7
 800a29c:	4622      	mov	r2, r4
 800a29e:	4631      	mov	r1, r6
 800a2a0:	bf28      	it	cs
 800a2a2:	463a      	movcs	r2, r7
 800a2a4:	f7ff ff84 	bl	800a1b0 <memcpy>
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f7fe fbf2 	bl	8008a94 <_free_r>
 800a2b0:	e7e1      	b.n	800a276 <_realloc_r+0x1e>
 800a2b2:	4635      	mov	r5, r6
 800a2b4:	e7df      	b.n	800a276 <_realloc_r+0x1e>
	...

0800a2b8 <_strtol_l.constprop.0>:
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2be:	d001      	beq.n	800a2c4 <_strtol_l.constprop.0+0xc>
 800a2c0:	2b24      	cmp	r3, #36	; 0x24
 800a2c2:	d906      	bls.n	800a2d2 <_strtol_l.constprop.0+0x1a>
 800a2c4:	f7fd fd3c 	bl	8007d40 <__errno>
 800a2c8:	2316      	movs	r3, #22
 800a2ca:	6003      	str	r3, [r0, #0]
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a3b8 <_strtol_l.constprop.0+0x100>
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	462e      	mov	r6, r5
 800a2da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a2e2:	f017 0708 	ands.w	r7, r7, #8
 800a2e6:	d1f7      	bne.n	800a2d8 <_strtol_l.constprop.0+0x20>
 800a2e8:	2c2d      	cmp	r4, #45	; 0x2d
 800a2ea:	d132      	bne.n	800a352 <_strtol_l.constprop.0+0x9a>
 800a2ec:	782c      	ldrb	r4, [r5, #0]
 800a2ee:	2701      	movs	r7, #1
 800a2f0:	1cb5      	adds	r5, r6, #2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d05b      	beq.n	800a3ae <_strtol_l.constprop.0+0xf6>
 800a2f6:	2b10      	cmp	r3, #16
 800a2f8:	d109      	bne.n	800a30e <_strtol_l.constprop.0+0x56>
 800a2fa:	2c30      	cmp	r4, #48	; 0x30
 800a2fc:	d107      	bne.n	800a30e <_strtol_l.constprop.0+0x56>
 800a2fe:	782c      	ldrb	r4, [r5, #0]
 800a300:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a304:	2c58      	cmp	r4, #88	; 0x58
 800a306:	d14d      	bne.n	800a3a4 <_strtol_l.constprop.0+0xec>
 800a308:	786c      	ldrb	r4, [r5, #1]
 800a30a:	2310      	movs	r3, #16
 800a30c:	3502      	adds	r5, #2
 800a30e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a312:	f108 38ff 	add.w	r8, r8, #4294967295
 800a316:	f04f 0e00 	mov.w	lr, #0
 800a31a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a31e:	4676      	mov	r6, lr
 800a320:	fb03 8a19 	mls	sl, r3, r9, r8
 800a324:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a328:	f1bc 0f09 	cmp.w	ip, #9
 800a32c:	d816      	bhi.n	800a35c <_strtol_l.constprop.0+0xa4>
 800a32e:	4664      	mov	r4, ip
 800a330:	42a3      	cmp	r3, r4
 800a332:	dd24      	ble.n	800a37e <_strtol_l.constprop.0+0xc6>
 800a334:	f1be 3fff 	cmp.w	lr, #4294967295
 800a338:	d008      	beq.n	800a34c <_strtol_l.constprop.0+0x94>
 800a33a:	45b1      	cmp	r9, r6
 800a33c:	d31c      	bcc.n	800a378 <_strtol_l.constprop.0+0xc0>
 800a33e:	d101      	bne.n	800a344 <_strtol_l.constprop.0+0x8c>
 800a340:	45a2      	cmp	sl, r4
 800a342:	db19      	blt.n	800a378 <_strtol_l.constprop.0+0xc0>
 800a344:	fb06 4603 	mla	r6, r6, r3, r4
 800a348:	f04f 0e01 	mov.w	lr, #1
 800a34c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a350:	e7e8      	b.n	800a324 <_strtol_l.constprop.0+0x6c>
 800a352:	2c2b      	cmp	r4, #43	; 0x2b
 800a354:	bf04      	itt	eq
 800a356:	782c      	ldrbeq	r4, [r5, #0]
 800a358:	1cb5      	addeq	r5, r6, #2
 800a35a:	e7ca      	b.n	800a2f2 <_strtol_l.constprop.0+0x3a>
 800a35c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a360:	f1bc 0f19 	cmp.w	ip, #25
 800a364:	d801      	bhi.n	800a36a <_strtol_l.constprop.0+0xb2>
 800a366:	3c37      	subs	r4, #55	; 0x37
 800a368:	e7e2      	b.n	800a330 <_strtol_l.constprop.0+0x78>
 800a36a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a36e:	f1bc 0f19 	cmp.w	ip, #25
 800a372:	d804      	bhi.n	800a37e <_strtol_l.constprop.0+0xc6>
 800a374:	3c57      	subs	r4, #87	; 0x57
 800a376:	e7db      	b.n	800a330 <_strtol_l.constprop.0+0x78>
 800a378:	f04f 3eff 	mov.w	lr, #4294967295
 800a37c:	e7e6      	b.n	800a34c <_strtol_l.constprop.0+0x94>
 800a37e:	f1be 3fff 	cmp.w	lr, #4294967295
 800a382:	d105      	bne.n	800a390 <_strtol_l.constprop.0+0xd8>
 800a384:	2322      	movs	r3, #34	; 0x22
 800a386:	6003      	str	r3, [r0, #0]
 800a388:	4646      	mov	r6, r8
 800a38a:	b942      	cbnz	r2, 800a39e <_strtol_l.constprop.0+0xe6>
 800a38c:	4630      	mov	r0, r6
 800a38e:	e79e      	b.n	800a2ce <_strtol_l.constprop.0+0x16>
 800a390:	b107      	cbz	r7, 800a394 <_strtol_l.constprop.0+0xdc>
 800a392:	4276      	negs	r6, r6
 800a394:	2a00      	cmp	r2, #0
 800a396:	d0f9      	beq.n	800a38c <_strtol_l.constprop.0+0xd4>
 800a398:	f1be 0f00 	cmp.w	lr, #0
 800a39c:	d000      	beq.n	800a3a0 <_strtol_l.constprop.0+0xe8>
 800a39e:	1e69      	subs	r1, r5, #1
 800a3a0:	6011      	str	r1, [r2, #0]
 800a3a2:	e7f3      	b.n	800a38c <_strtol_l.constprop.0+0xd4>
 800a3a4:	2430      	movs	r4, #48	; 0x30
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1b1      	bne.n	800a30e <_strtol_l.constprop.0+0x56>
 800a3aa:	2308      	movs	r3, #8
 800a3ac:	e7af      	b.n	800a30e <_strtol_l.constprop.0+0x56>
 800a3ae:	2c30      	cmp	r4, #48	; 0x30
 800a3b0:	d0a5      	beq.n	800a2fe <_strtol_l.constprop.0+0x46>
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	e7ab      	b.n	800a30e <_strtol_l.constprop.0+0x56>
 800a3b6:	bf00      	nop
 800a3b8:	0800ae2f 	.word	0x0800ae2f

0800a3bc <_strtol_r>:
 800a3bc:	f7ff bf7c 	b.w	800a2b8 <_strtol_l.constprop.0>

0800a3c0 <_strtoul_l.constprop.0>:
 800a3c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4f36      	ldr	r7, [pc, #216]	; (800a4a0 <_strtoul_l.constprop.0+0xe0>)
 800a3c6:	4686      	mov	lr, r0
 800a3c8:	460d      	mov	r5, r1
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3d0:	5d3e      	ldrb	r6, [r7, r4]
 800a3d2:	f016 0608 	ands.w	r6, r6, #8
 800a3d6:	d1f8      	bne.n	800a3ca <_strtoul_l.constprop.0+0xa>
 800a3d8:	2c2d      	cmp	r4, #45	; 0x2d
 800a3da:	d130      	bne.n	800a43e <_strtoul_l.constprop.0+0x7e>
 800a3dc:	782c      	ldrb	r4, [r5, #0]
 800a3de:	2601      	movs	r6, #1
 800a3e0:	1c85      	adds	r5, r0, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d057      	beq.n	800a496 <_strtoul_l.constprop.0+0xd6>
 800a3e6:	2b10      	cmp	r3, #16
 800a3e8:	d109      	bne.n	800a3fe <_strtoul_l.constprop.0+0x3e>
 800a3ea:	2c30      	cmp	r4, #48	; 0x30
 800a3ec:	d107      	bne.n	800a3fe <_strtoul_l.constprop.0+0x3e>
 800a3ee:	7828      	ldrb	r0, [r5, #0]
 800a3f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a3f4:	2858      	cmp	r0, #88	; 0x58
 800a3f6:	d149      	bne.n	800a48c <_strtoul_l.constprop.0+0xcc>
 800a3f8:	786c      	ldrb	r4, [r5, #1]
 800a3fa:	2310      	movs	r3, #16
 800a3fc:	3502      	adds	r5, #2
 800a3fe:	f04f 38ff 	mov.w	r8, #4294967295
 800a402:	2700      	movs	r7, #0
 800a404:	fbb8 f8f3 	udiv	r8, r8, r3
 800a408:	fb03 f908 	mul.w	r9, r3, r8
 800a40c:	ea6f 0909 	mvn.w	r9, r9
 800a410:	4638      	mov	r0, r7
 800a412:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a416:	f1bc 0f09 	cmp.w	ip, #9
 800a41a:	d815      	bhi.n	800a448 <_strtoul_l.constprop.0+0x88>
 800a41c:	4664      	mov	r4, ip
 800a41e:	42a3      	cmp	r3, r4
 800a420:	dd23      	ble.n	800a46a <_strtoul_l.constprop.0+0xaa>
 800a422:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a426:	d007      	beq.n	800a438 <_strtoul_l.constprop.0+0x78>
 800a428:	4580      	cmp	r8, r0
 800a42a:	d31b      	bcc.n	800a464 <_strtoul_l.constprop.0+0xa4>
 800a42c:	d101      	bne.n	800a432 <_strtoul_l.constprop.0+0x72>
 800a42e:	45a1      	cmp	r9, r4
 800a430:	db18      	blt.n	800a464 <_strtoul_l.constprop.0+0xa4>
 800a432:	fb00 4003 	mla	r0, r0, r3, r4
 800a436:	2701      	movs	r7, #1
 800a438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a43c:	e7e9      	b.n	800a412 <_strtoul_l.constprop.0+0x52>
 800a43e:	2c2b      	cmp	r4, #43	; 0x2b
 800a440:	bf04      	itt	eq
 800a442:	782c      	ldrbeq	r4, [r5, #0]
 800a444:	1c85      	addeq	r5, r0, #2
 800a446:	e7cc      	b.n	800a3e2 <_strtoul_l.constprop.0+0x22>
 800a448:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a44c:	f1bc 0f19 	cmp.w	ip, #25
 800a450:	d801      	bhi.n	800a456 <_strtoul_l.constprop.0+0x96>
 800a452:	3c37      	subs	r4, #55	; 0x37
 800a454:	e7e3      	b.n	800a41e <_strtoul_l.constprop.0+0x5e>
 800a456:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a45a:	f1bc 0f19 	cmp.w	ip, #25
 800a45e:	d804      	bhi.n	800a46a <_strtoul_l.constprop.0+0xaa>
 800a460:	3c57      	subs	r4, #87	; 0x57
 800a462:	e7dc      	b.n	800a41e <_strtoul_l.constprop.0+0x5e>
 800a464:	f04f 37ff 	mov.w	r7, #4294967295
 800a468:	e7e6      	b.n	800a438 <_strtoul_l.constprop.0+0x78>
 800a46a:	1c7b      	adds	r3, r7, #1
 800a46c:	d106      	bne.n	800a47c <_strtoul_l.constprop.0+0xbc>
 800a46e:	2322      	movs	r3, #34	; 0x22
 800a470:	f8ce 3000 	str.w	r3, [lr]
 800a474:	4638      	mov	r0, r7
 800a476:	b932      	cbnz	r2, 800a486 <_strtoul_l.constprop.0+0xc6>
 800a478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a47c:	b106      	cbz	r6, 800a480 <_strtoul_l.constprop.0+0xc0>
 800a47e:	4240      	negs	r0, r0
 800a480:	2a00      	cmp	r2, #0
 800a482:	d0f9      	beq.n	800a478 <_strtoul_l.constprop.0+0xb8>
 800a484:	b107      	cbz	r7, 800a488 <_strtoul_l.constprop.0+0xc8>
 800a486:	1e69      	subs	r1, r5, #1
 800a488:	6011      	str	r1, [r2, #0]
 800a48a:	e7f5      	b.n	800a478 <_strtoul_l.constprop.0+0xb8>
 800a48c:	2430      	movs	r4, #48	; 0x30
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1b5      	bne.n	800a3fe <_strtoul_l.constprop.0+0x3e>
 800a492:	2308      	movs	r3, #8
 800a494:	e7b3      	b.n	800a3fe <_strtoul_l.constprop.0+0x3e>
 800a496:	2c30      	cmp	r4, #48	; 0x30
 800a498:	d0a9      	beq.n	800a3ee <_strtoul_l.constprop.0+0x2e>
 800a49a:	230a      	movs	r3, #10
 800a49c:	e7af      	b.n	800a3fe <_strtoul_l.constprop.0+0x3e>
 800a49e:	bf00      	nop
 800a4a0:	0800ae2f 	.word	0x0800ae2f

0800a4a4 <_strtoul_r>:
 800a4a4:	f7ff bf8c 	b.w	800a3c0 <_strtoul_l.constprop.0>

0800a4a8 <__ascii_wctomb>:
 800a4a8:	b149      	cbz	r1, 800a4be <__ascii_wctomb+0x16>
 800a4aa:	2aff      	cmp	r2, #255	; 0xff
 800a4ac:	bf85      	ittet	hi
 800a4ae:	238a      	movhi	r3, #138	; 0x8a
 800a4b0:	6003      	strhi	r3, [r0, #0]
 800a4b2:	700a      	strbls	r2, [r1, #0]
 800a4b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4b8:	bf98      	it	ls
 800a4ba:	2001      	movls	r0, #1
 800a4bc:	4770      	bx	lr
 800a4be:	4608      	mov	r0, r1
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <fiprintf>:
 800a4c4:	b40e      	push	{r1, r2, r3}
 800a4c6:	b503      	push	{r0, r1, lr}
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	ab03      	add	r3, sp, #12
 800a4cc:	4805      	ldr	r0, [pc, #20]	; (800a4e4 <fiprintf+0x20>)
 800a4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4d2:	6800      	ldr	r0, [r0, #0]
 800a4d4:	9301      	str	r3, [sp, #4]
 800a4d6:	f7ff faad 	bl	8009a34 <_vfiprintf_r>
 800a4da:	b002      	add	sp, #8
 800a4dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4e0:	b003      	add	sp, #12
 800a4e2:	4770      	bx	lr
 800a4e4:	200000d0 	.word	0x200000d0

0800a4e8 <abort>:
 800a4e8:	b508      	push	{r3, lr}
 800a4ea:	2006      	movs	r0, #6
 800a4ec:	f000 f834 	bl	800a558 <raise>
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	f7f8 fadb 	bl	8002aac <_exit>

0800a4f6 <_malloc_usable_size_r>:
 800a4f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4fa:	1f18      	subs	r0, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bfbc      	itt	lt
 800a500:	580b      	ldrlt	r3, [r1, r0]
 800a502:	18c0      	addlt	r0, r0, r3
 800a504:	4770      	bx	lr

0800a506 <_raise_r>:
 800a506:	291f      	cmp	r1, #31
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4604      	mov	r4, r0
 800a50c:	460d      	mov	r5, r1
 800a50e:	d904      	bls.n	800a51a <_raise_r+0x14>
 800a510:	2316      	movs	r3, #22
 800a512:	6003      	str	r3, [r0, #0]
 800a514:	f04f 30ff 	mov.w	r0, #4294967295
 800a518:	bd38      	pop	{r3, r4, r5, pc}
 800a51a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a51c:	b112      	cbz	r2, 800a524 <_raise_r+0x1e>
 800a51e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a522:	b94b      	cbnz	r3, 800a538 <_raise_r+0x32>
 800a524:	4620      	mov	r0, r4
 800a526:	f000 f831 	bl	800a58c <_getpid_r>
 800a52a:	462a      	mov	r2, r5
 800a52c:	4601      	mov	r1, r0
 800a52e:	4620      	mov	r0, r4
 800a530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a534:	f000 b818 	b.w	800a568 <_kill_r>
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d00a      	beq.n	800a552 <_raise_r+0x4c>
 800a53c:	1c59      	adds	r1, r3, #1
 800a53e:	d103      	bne.n	800a548 <_raise_r+0x42>
 800a540:	2316      	movs	r3, #22
 800a542:	6003      	str	r3, [r0, #0]
 800a544:	2001      	movs	r0, #1
 800a546:	e7e7      	b.n	800a518 <_raise_r+0x12>
 800a548:	2400      	movs	r4, #0
 800a54a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a54e:	4628      	mov	r0, r5
 800a550:	4798      	blx	r3
 800a552:	2000      	movs	r0, #0
 800a554:	e7e0      	b.n	800a518 <_raise_r+0x12>
	...

0800a558 <raise>:
 800a558:	4b02      	ldr	r3, [pc, #8]	; (800a564 <raise+0xc>)
 800a55a:	4601      	mov	r1, r0
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f7ff bfd2 	b.w	800a506 <_raise_r>
 800a562:	bf00      	nop
 800a564:	200000d0 	.word	0x200000d0

0800a568 <_kill_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4d07      	ldr	r5, [pc, #28]	; (800a588 <_kill_r+0x20>)
 800a56c:	2300      	movs	r3, #0
 800a56e:	4604      	mov	r4, r0
 800a570:	4608      	mov	r0, r1
 800a572:	4611      	mov	r1, r2
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	f7f8 fa89 	bl	8002a8c <_kill>
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	d102      	bne.n	800a584 <_kill_r+0x1c>
 800a57e:	682b      	ldr	r3, [r5, #0]
 800a580:	b103      	cbz	r3, 800a584 <_kill_r+0x1c>
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	bd38      	pop	{r3, r4, r5, pc}
 800a586:	bf00      	nop
 800a588:	200005c4 	.word	0x200005c4

0800a58c <_getpid_r>:
 800a58c:	f7f8 ba76 	b.w	8002a7c <_getpid>

0800a590 <_init>:
 800a590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a592:	bf00      	nop
 800a594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a596:	bc08      	pop	{r3}
 800a598:	469e      	mov	lr, r3
 800a59a:	4770      	bx	lr

0800a59c <_fini>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	bf00      	nop
 800a5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a2:	bc08      	pop	{r3}
 800a5a4:	469e      	mov	lr, r3
 800a5a6:	4770      	bx	lr
